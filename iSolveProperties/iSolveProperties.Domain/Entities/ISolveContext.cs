using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace iSolveProperties.Domain.Entities;

public partial class ISolveContext : DbContext
{
    public ISolveContext()
    {
    }

    public ISolveContext(DbContextOptions<ISolveContext> options)
        : base(options)
    {
    }

    public  virtual DbSet<BDMChangeRequest> BDMChangeRequests { get; set; }
    public virtual DbSet<Realtor> Realtors { get; set; }

    public virtual DbSet<EventReport> EventReports { get; set; }
    public virtual DbSet<AcknowledgementReceipt> AcknowledgementReceipts { get; set; }

    public virtual DbSet<AcknowledgementReceiptDelivery> AcknowledgementReceiptDeliveries { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AddressInfo> AddressInfos { get; set; }

    public virtual DbSet<Adil> Adils { get; set; }

    public virtual DbSet<Alert> Alerts { get; set; }

    public virtual DbSet<AlertManagementDetail> AlertManagementDetails { get; set; }

    public virtual DbSet<AlertManagementMain> AlertManagementMains { get; set; }

    public virtual DbSet<AllotmentLetter> AllotmentLetters { get; set; }

    public virtual DbSet<AllotmentLetterDelivery> AllotmentLetterDeliveries { get; set; }

    public virtual DbSet<Announcement> Announcements { get; set; }

    public virtual DbSet<AppRight> AppRights { get; set; }

    public virtual DbSet<AppRightsForm> AppRightsForms { get; set; }

    public virtual DbSet<AppRightsSegment> AppRightsSegments { get; set; }

    public virtual DbSet<AppRightsVoucher> AppRightsVouchers { get; set; }

    public virtual DbSet<Applicant> Applicants { get; set; }

    public virtual DbSet<ApplicantEducation> ApplicantEducations { get; set; }

    public virtual DbSet<ApplicantJob> ApplicantJobs { get; set; }

    public virtual DbSet<AreaDetail> AreaDetails { get; set; }

    public virtual DbSet<AssetAdditionModification> AssetAdditionModifications { get; set; }

    public virtual DbSet<AssetAdditionModificationDetail> AssetAdditionModificationDetails { get; set; }

    public virtual DbSet<AssetDisposal> AssetDisposals { get; set; }

    public virtual DbSet<AssetDisposalDetail> AssetDisposalDetails { get; set; }

    public virtual DbSet<AssetHandingOver> AssetHandingOvers { get; set; }

    public virtual DbSet<AssetHandingOverDetail> AssetHandingOverDetails { get; set; }

    public virtual DbSet<AssetPartialPayment> AssetPartialPayments { get; set; }

    public virtual DbSet<AssetPartialPaymentDetail> AssetPartialPaymentDetails { get; set; }

    public virtual DbSet<AssetTransfer> AssetTransfers { get; set; }

    public virtual DbSet<AssetTransferDetail> AssetTransferDetails { get; set; }

    public virtual DbSet<AssetType> AssetTypes { get; set; }

    public virtual DbSet<AtcDetail> AtcDetails { get; set; }

    public virtual DbSet<AtcDetailsNew> AtcDetailsNews { get; set; }

    public virtual DbSet<AtcMain> AtcMains { get; set; }

    public virtual DbSet<AtcMainNew> AtcMainNews { get; set; }

    public virtual DbSet<AttendanceInfo> AttendanceInfos { get; set; }

    public virtual DbSet<AttendanceLocation> AttendanceLocations { get; set; }

    public virtual DbSet<Authority> Authorities { get; set; }

    public virtual DbSet<BalanceSheet> BalanceSheets { get; set; }

    public virtual DbSet<BalanceSheetConfiguration> BalanceSheetConfigurations { get; set; }

    public virtual DbSet<Bank> Banks { get; set; }

    public virtual DbSet<BankClearing> BankClearings { get; set; }

    public virtual DbSet<BankClearingCheque> BankClearingCheques { get; set; }

    public virtual DbSet<BankClearingDetail> BankClearingDetails { get; set; }

    public virtual DbSet<BankClearingDetail1> BankClearingDetails1 { get; set; }

    public virtual DbSet<BankClearingMain> BankClearingMains { get; set; }

    public virtual DbSet<BankDetail> BankDetails { get; set; }

    public virtual DbSet<BankMaster> BankMasters { get; set; }

    public virtual DbSet<BankVdetail> BankVdetails { get; set; }

    public virtual DbSet<BankVmain> BankVmains { get; set; }

    public virtual DbSet<Blconfig> Blconfigs { get; set; }

    public virtual DbSet<BlconfigMgmt> BlconfigMgmts { get; set; }

    public virtual DbSet<BlocksDetail> BlocksDetails { get; set; }

    public virtual DbSet<BookingCategoryDetail> BookingCategoryDetails { get; set; }

    public virtual DbSet<BookingConfirmationLetter> BookingConfirmationLetters { get; set; }

    public virtual DbSet<BookingForm> BookingForms { get; set; }

    public virtual DbSet<BookingFormDelivery> BookingFormDeliveries { get; set; }

    public virtual DbSet<BookingFormDeliveryDebit> BookingFormDeliveryDebits { get; set; }

    public virtual DbSet<BookingFormDeliveryDetail> BookingFormDeliveryDetails { get; set; }

    public virtual DbSet<BookingFormDeliveryInstrument> BookingFormDeliveryInstruments { get; set; }

    public virtual DbSet<BookingFormExtraChargesDetail> BookingFormExtraChargesDetails { get; set; }

    public virtual DbSet<BookingFormIssue> BookingFormIssues { get; set; }

    public virtual DbSet<BookingFormReceiving> BookingFormReceivings { get; set; }

    public virtual DbSet<BookingReceipt> BookingReceipts { get; set; }

    public virtual DbSet<BookingTypeDetail> BookingTypeDetails { get; set; }

    public virtual DbSet<BookingformCredit> BookingformCredits { get; set; }

    public virtual DbSet<BookingformReceipt> BookingformReceipts { get; set; }

    public virtual DbSet<Bsleft> Bslefts { get; set; }

    public virtual DbSet<Bsnote> Bsnotes { get; set; }

    public virtual DbSet<Bsright> Bsrights { get; set; }

    public virtual DbSet<Budget> Budgets { get; set; }

    public virtual DbSet<BudgetDefinition> BudgetDefinitions { get; set; }

    public virtual DbSet<BudgetDefinitionDetail> BudgetDefinitionDetails { get; set; }

    public virtual DbSet<BusinessPartnersDetailAddress> BusinessPartnersDetailAddresses { get; set; }

    public virtual DbSet<BusinessPartnersDetailBank> BusinessPartnersDetailBanks { get; set; }

    public virtual DbSet<BusinessPartnersMain> BusinessPartnersMains { get; set; }

    public virtual DbSet<BusinessPartnersSubsegment> BusinessPartnersSubsegments { get; set; }

    public virtual DbSet<BusniessPartnersDetailContactPerson> BusniessPartnersDetailContactPersons { get; set; }

    public virtual DbSet<BuyBack> BuyBacks { get; set; }

    public virtual DbSet<CallLog> CallLogs { get; set; }

    public virtual DbSet<CallRecording> CallRecordings { get; set; }

    public virtual DbSet<CampaignAllocation> CampaignAllocations { get; set; }

    public virtual DbSet<CampaignsAnalysis> CampaignsAnalyses { get; set; }

    public virtual DbSet<CampaignsAnalysisDetail> CampaignsAnalysisDetails { get; set; }

    public virtual DbSet<Cashflow> Cashflows { get; set; }

    public virtual DbSet<Catagory> Catagories { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Cccode> Cccodes { get; set; }

    public virtual DbSet<CccodeLog> CccodeLogs { get; set; }

    public virtual DbSet<CfsCompressor> CfsCompressors { get; set; }

    public virtual DbSet<CfsLiquid> CfsLiquids { get; set; }

    public virtual DbSet<CfsMain> CfsMains { get; set; }

    public virtual DbSet<CfstmDetail> CfstmDetails { get; set; }

    public virtual DbSet<CfstmMain> CfstmMains { get; set; }

    public virtual DbSet<Cg> Cgs { get; set; }

    public virtual DbSet<Cgsr> Cgsrs { get; set; }

    public virtual DbSet<ChartofAcct> ChartofAccts { get; set; }

    public virtual DbSet<CheckForUpdate> CheckForUpdates { get; set; }

    public virtual DbSet<ChequeInHandManagementDetailPayment> ChequeInHandManagementDetailPayments { get; set; }

    public virtual DbSet<ChequeInHandManagementDetailReceipt> ChequeInHandManagementDetailReceipts { get; set; }

    public virtual DbSet<ChequeInHandManagementMain> ChequeInHandManagementMains { get; set; }

    public virtual DbSet<ChequebookRegistrationDetail> ChequebookRegistrationDetails { get; set; }

    public virtual DbSet<ChequebookRegistrationMain> ChequebookRegistrationMains { get; set; }

    public virtual DbSet<ChequesClearing> ChequesClearings { get; set; }

    public virtual DbSet<ChequesClearingDetail> ChequesClearingDetails { get; set; }

    public virtual DbSet<CitiesList> CitiesLists { get; set; }

    public virtual DbSet<Client> Clients { get; set; }

    public virtual DbSet<CnfrmtionPyment> CnfrmtionPyments { get; set; }

    public virtual DbSet<CnfrmtionPymentDetail> CnfrmtionPymentDetails { get; set; }

    public virtual DbSet<CnfrmtionPymentInstrument> CnfrmtionPymentInstruments { get; set; }

    public virtual DbSet<Commission> Commissions { get; set; }

    public virtual DbSet<CommissionDetail> CommissionDetails { get; set; }

    public virtual DbSet<CommissionPayment> CommissionPayments { get; set; }

    public virtual DbSet<CommissionPaymentBooking> CommissionPaymentBookings { get; set; }

    public virtual DbSet<CommissionPaymentOnAccount> CommissionPaymentOnAccounts { get; set; }

    public virtual DbSet<CompInfo> CompInfos { get; set; }

    public virtual DbSet<CompanyInfo> CompanyInfos { get; set; }

    public virtual DbSet<Companysetup> Companysetups { get; set; }

    public virtual DbSet<ConfirmationPayment> ConfirmationPayments { get; set; }

    public virtual DbSet<ConfirmationPaymentCustomerReceipt> ConfirmationPaymentCustomerReceipts { get; set; }

    public virtual DbSet<ConfirmationReceipt> ConfirmationReceipts { get; set; }

    public virtual DbSet<ConfirmationReceiptsDelivery> ConfirmationReceiptsDeliveries { get; set; }

    public virtual DbSet<Contract> Contracts { get; set; }

    public virtual DbSet<ContractInventory> ContractInventories { get; set; }

    public virtual DbSet<ContractPayment> ContractPayments { get; set; }

    public virtual DbSet<Crcancellation> Crcancellations { get; set; }

    public virtual DbSet<CustomFollowUp> CustomFollowUps { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerRateList> CustomerRateLists { get; set; }

    public virtual DbSet<CustomerRateListLog> CustomerRateListLogs { get; set; }

    public virtual DbSet<CustomerReceipt> CustomerReceipts { get; set; }

    public virtual DbSet<CustomerReceiptOnline> CustomerReceiptOnlines { get; set; }

    public virtual DbSet<CustomerReceiptPrint> CustomerReceiptPrints { get; set; }

    public virtual DbSet<CustomerWiseRateList> CustomerWiseRateLists { get; set; }

    public virtual DbSet<CustomerWiseRateListDetail> CustomerWiseRateListDetails { get; set; }

    public virtual DbSet<CylinderFillingSessionDetail> CylinderFillingSessionDetails { get; set; }

    public virtual DbSet<CylinderFillingSessionMain> CylinderFillingSessionMains { get; set; }

    public virtual DbSet<CylinderFillingSessionTmDetail> CylinderFillingSessionTmDetails { get; set; }

    public virtual DbSet<CylinderFillingSessionTmMain> CylinderFillingSessionTmMains { get; set; }

    public virtual DbSet<CylinderReconciliation> CylinderReconciliations { get; set; }

    public virtual DbSet<CylinderRegistration> CylinderRegistrations { get; set; }

    public virtual DbSet<DailyTankStatusDetail> DailyTankStatusDetails { get; set; }

    public virtual DbSet<DailyTankStatusMaster> DailyTankStatusMasters { get; set; }

    public virtual DbSet<DealPurchase> DealPurchases { get; set; }

    public virtual DbSet<DealPurchaseDetail> DealPurchaseDetails { get; set; }

    public virtual DbSet<DealPurchaseDetailActual> DealPurchaseDetailActuals { get; set; }

    public virtual DbSet<DealPurchaseInstrument> DealPurchaseInstruments { get; set; }

    public virtual DbSet<DealPurchaseModified> DealPurchaseModifieds { get; set; }

    public virtual DbSet<DealPurchaseModifiedDetail> DealPurchaseModifiedDetails { get; set; }

    public virtual DbSet<DealerQuotaDetail> DealerQuotaDetails { get; set; }

    public virtual DbSet<DealerQuotum> DealerQuota { get; set; }

    public virtual DbSet<DecantingDetail> DecantingDetails { get; set; }

    public virtual DbSet<DecantingMain> DecantingMains { get; set; }

    public virtual DbSet<DeliveryDispatchMaster> DeliveryDispatchMasters { get; set; }

    public virtual DbSet<DeliveryOrderCashSale> DeliveryOrderCashSales { get; set; }

    public virtual DbSet<DeliveryOrderDriverLoader> DeliveryOrderDriverLoaders { get; set; }

    public virtual DbSet<DeliveryOrderMaster> DeliveryOrderMasters { get; set; }

    public virtual DbSet<DeliveryOrderMasterReturn> DeliveryOrderMasterReturns { get; set; }

    public virtual DbSet<DeliveryOrderParty> DeliveryOrderParties { get; set; }

    public virtual DbSet<DeliveryOrderPartyReturn> DeliveryOrderPartyReturns { get; set; }

    public virtual DbSet<DeliveryOrderWarehouse> DeliveryOrderWarehouses { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Deposit> Deposits { get; set; }

    public virtual DbSet<DepositedDetail> DepositedDetails { get; set; }

    public virtual DbSet<DepositedMain> DepositedMains { get; set; }

    public virtual DbSet<Depreciation> Depreciations { get; set; }

    public virtual DbSet<DepreciationDetail> DepreciationDetails { get; set; }

    public virtual DbSet<Detail> Details { get; set; }

    public virtual DbSet<DiscountDetail> DiscountDetails { get; set; }

    public virtual DbSet<DiscountPolicyBusinessPartnerDetail> DiscountPolicyBusinessPartnerDetails { get; set; }

    public virtual DbSet<DiscountPolicyRegistration> DiscountPolicyRegistrations { get; set; }

    public virtual DbSet<DiscountPolicyRegistrationDetail> DiscountPolicyRegistrationDetails { get; set; }

    public virtual DbSet<DiscountPolicyRegistrationSlab> DiscountPolicyRegistrationSlabs { get; set; }

    public virtual DbSet<DiscountPosting> DiscountPostings { get; set; }

    public virtual DbSet<DiscountPostingDetail> DiscountPostingDetails { get; set; }

    public virtual DbSet<DiscountTypeRegistration> DiscountTypeRegistrations { get; set; }

    public virtual DbSet<DiscountsMain> DiscountsMains { get; set; }

    public virtual DbSet<DispatchDetail> DispatchDetails { get; set; }

    public virtual DbSet<DispatchMaster> DispatchMasters { get; set; }

    public virtual DbSet<DoDetail> DoDetails { get; set; }

    public virtual DbSet<DoDetail1> DoDetails1 { get; set; }

    public virtual DbSet<DoMain> DoMains { get; set; }

    public virtual DbSet<Domain1> Domains1 { get; set; }

    public virtual DbSet<DriverRegistration> DriverRegistrations { get; set; }

    public virtual DbSet<DuplicatePendingLead> DuplicatePendingLeads { get; set; }

    public virtual DbSet<Ecr> Ecrs { get; set; }

    public virtual DbSet<EcrDetail> EcrDetails { get; set; }

    public virtual DbSet<EcrDetailNew> EcrDetailNews { get; set; }

    public virtual DbSet<EcrMain> EcrMains { get; set; }

    public virtual DbSet<EcrMainNew> EcrMainNews { get; set; }

    public virtual DbSet<EcrProductName> EcrProductNames { get; set; }

    public virtual DbSet<EdataBookingForm> EdataBookingForms { get; set; }

    public virtual DbSet<EmailCompaign> EmailCompaigns { get; set; }

    public virtual DbSet<EmailCompaignDetail> EmailCompaignDetails { get; set; }

    public virtual DbSet<EmployeeBenifit> EmployeeBenifits { get; set; }

    public virtual DbSet<EmployeeBenifitDetail> EmployeeBenifitDetails { get; set; }

    public virtual DbSet<EmployeeFingerPrintRegistration> EmployeeFingerPrintRegistrations { get; set; }

    public virtual DbSet<EmployeeOfMonth> EmployeeOfMonths { get; set; }

    public virtual DbSet<EmployeeRegistrationAssignmentPortable> EmployeeRegistrationAssignmentPortables { get; set; }

    public virtual DbSet<EmployeeRegistrationAssignmentTadum> EmployeeRegistrationAssignmentTada { get; set; }

    public virtual DbSet<EmployeeRegistrationAssignmentVehicle> EmployeeRegistrationAssignmentVehicles { get; set; }

    public virtual DbSet<EmployeeRegistrationBasicInformation> EmployeeRegistrationBasicInformations { get; set; }

    public virtual DbSet<EmployeeRegistrationDesignation> EmployeeRegistrationDesignations { get; set; }

    public virtual DbSet<EmployeeRegistrationJobDescription> EmployeeRegistrationJobDescriptions { get; set; }

    public virtual DbSet<EmployeeRegistrationLeaveManagement> EmployeeRegistrationLeaveManagements { get; set; }

    public virtual DbSet<EmployeeRegistrationMain> EmployeeRegistrationMains { get; set; }

    public virtual DbSet<EmployeeRegistrationSalaryDetail> EmployeeRegistrationSalaryDetails { get; set; }

    public virtual DbSet<EmployeeVoucherDetail> EmployeeVoucherDetails { get; set; }

    public virtual DbSet<EmployeeVoucherMain> EmployeeVoucherMains { get; set; }

    public virtual DbSet<EquipmentCategory> EquipmentCategories { get; set; }

    public virtual DbSet<EquipmentGroup> EquipmentGroups { get; set; }

    public virtual DbSet<EquipmentRegistrationDetailAttachment> EquipmentRegistrationDetailAttachments { get; set; }

    public virtual DbSet<EquipmentRegistrationDetailPart> EquipmentRegistrationDetailParts { get; set; }

    public virtual DbSet<EquipmentRegistrationDetailRoutine> EquipmentRegistrationDetailRoutines { get; set; }

    public virtual DbSet<EquipmentRegistrationMaster> EquipmentRegistrationMasters { get; set; }

    public virtual DbSet<Exm> Exms { get; set; }

    public virtual DbSet<ExtraChargesDetail> ExtraChargesDetails { get; set; }

    public virtual DbSet<FacebookLead> FacebookLeads { get; set; }

    public virtual DbSet<Faq> Faqs { get; set; }

    public virtual DbSet<Fbform> Fbforms { get; set; }

    public virtual DbSet<Fbpage> Fbpages { get; set; }

    public virtual DbSet<Fbprofile> Fbprofiles { get; set; }

    public virtual DbSet<Fbwebhook> Fbwebhooks { get; set; }

    public virtual DbSet<Feedback> Feedbacks { get; set; }

    public virtual DbSet<FileDeliveryConfirmation> FileDeliveryConfirmations { get; set; }

    public virtual DbSet<FileInventory> FileInventories { get; set; }

    public virtual DbSet<FileInventoryDetail> FileInventoryDetails { get; set; }

    public virtual DbSet<FilePurchasing> FilePurchasings { get; set; }

    public virtual DbSet<FilePurchasingDetail> FilePurchasingDetails { get; set; }

    public virtual DbSet<FileReceiving> FileReceivings { get; set; }

    public virtual DbSet<FileSale> FileSales { get; set; }

    public virtual DbSet<FileSalesDetail> FileSalesDetails { get; set; }

    public virtual DbSet<FinancialYear> FinancialYears { get; set; }

    public virtual DbSet<FollowupDetail> FollowupDetails { get; set; }

    public virtual DbSet<ForecastDetail> ForecastDetails { get; set; }

    public virtual DbSet<ForecastMaster> ForecastMasters { get; set; }

    public virtual DbSet<FormState> FormStates { get; set; }

    public virtual DbSet<FormsIssuance> FormsIssuances { get; set; }

    public virtual DbSet<FormsIssuanceDetail> FormsIssuanceDetails { get; set; }

    public virtual DbSet<FormsReceiving> FormsReceivings { get; set; }

    public virtual DbSet<FormsReceivingDetail> FormsReceivingDetails { get; set; }

    public virtual DbSet<FormsReturn> FormsReturns { get; set; }

    public virtual DbSet<FormsReturnDetail> FormsReturnDetails { get; set; }

    public virtual DbSet<GeneralFingerPrintRegistration> GeneralFingerPrintRegistrations { get; set; }

    public virtual DbSet<Glreceipt> Glreceipts { get; set; }

    public virtual DbSet<GoogleDrive> GoogleDrives { get; set; }

    public virtual DbSet<Grn> Grns { get; set; }

    public virtual DbSet<GrnDetail> GrnDetails { get; set; }

    public virtual DbSet<GrnMaster> GrnMasters { get; set; }

    public virtual DbSet<GrnWithPoDetail> GrnWithPoDetails { get; set; }

    public virtual DbSet<GrnWithPoMaster> GrnWithPoMasters { get; set; }

    public virtual DbSet<GrnreturnDetail> GrnreturnDetails { get; set; }

    public virtual DbSet<GrnreturnMaster> GrnreturnMasters { get; set; }

    public virtual DbSet<IgpDetail> IgpDetails { get; set; }

    public virtual DbSet<IgpMaster> IgpMasters { get; set; }

    public virtual DbSet<Igpdetail1> Igpdetails1 { get; set; }

    public virtual DbSet<Igpmaster1> Igpmasters1 { get; set; }

    public virtual DbSet<InBoundInventory> InBoundInventories { get; set; }

    public virtual DbSet<InBoundInventoryDetail> InBoundInventoryDetails { get; set; }

    public virtual DbSet<IncentiveManagementInvoice> IncentiveManagementInvoices { get; set; }

    public virtual DbSet<IncentiveManagementInvoiceDetail> IncentiveManagementInvoiceDetails { get; set; }

    public virtual DbSet<InstallmentPlan> InstallmentPlans { get; set; }

    public virtual DbSet<InstallmentPlanDetail> InstallmentPlanDetails { get; set; }

    public virtual DbSet<InstallmentPlanDetailNew> InstallmentPlanDetailNews { get; set; }

    public virtual DbSet<InstallmentPlanNew> InstallmentPlanNews { get; set; }

    public virtual DbSet<InstallmentReceipt> InstallmentReceipts { get; set; }

    public virtual DbSet<InstallmentReceiptDelivery> InstallmentReceiptDeliveries { get; set; }

    public virtual DbSet<Instrument> Instruments { get; set; }

    public virtual DbSet<InstrumentDetail> InstrumentDetails { get; set; }

    public virtual DbSet<InstrumentInOut> InstrumentInOuts { get; set; }

    public virtual DbSet<InstrumentInOutDetail> InstrumentInOutDetails { get; set; }

    public virtual DbSet<InterBankTransferDetail> InterBankTransferDetails { get; set; }

    public virtual DbSet<InterBankTransferMain> InterBankTransferMains { get; set; }

    public virtual DbSet<InventoryDetail> InventoryDetails { get; set; }

    public virtual DbSet<InventoryList> InventoryLists { get; set; }

    public virtual DbSet<InventoryLogisticsDetail> InventoryLogisticsDetails { get; set; }

    public virtual DbSet<InventoryMaster> InventoryMasters { get; set; }

    public virtual DbSet<InventorySinWarehouseDetail> InventorySinWarehouseDetails { get; set; }

    public virtual DbSet<InvestmentReturn> InvestmentReturns { get; set; }

    public virtual DbSet<InvestorDetail> InvestorDetails { get; set; }

    public virtual DbSet<InvestorRegistration> InvestorRegistrations { get; set; }

    public virtual DbSet<IpDetailPurchase> IpDetailPurchases { get; set; }

    public virtual DbSet<IpDetailSale> IpDetailSales { get; set; }

    public virtual DbSet<IpMain> IpMains { get; set; }

    public virtual DbSet<IssuedCheque> IssuedCheques { get; set; }

    public virtual DbSet<ItemBom> ItemBoms { get; set; }

    public virtual DbSet<ItemBoqplan> ItemBoqplans { get; set; }

    public virtual DbSet<ItemBoqplanDetail> ItemBoqplanDetails { get; set; }

    public virtual DbSet<ItemMaster> ItemMasters { get; set; }

    public virtual DbSet<ItemMasterUom> ItemMasterUoms { get; set; }

    public virtual DbSet<ItemSubSegment> ItemSubSegments { get; set; }

    public virtual DbSet<ItemUom> ItemUoms { get; set; }

    public virtual DbSet<ItemWarehouse> ItemWarehouses { get; set; }

    public virtual DbSet<Itemcode> Itemcodes { get; set; }

    public virtual DbSet<JobOrderDetail> JobOrderDetails { get; set; }

    public virtual DbSet<JobOrderDriverLoader> JobOrderDriverLoaders { get; set; }

    public virtual DbSet<JobOrderMaster> JobOrderMasters { get; set; }

    public virtual DbSet<JobOrderTransfer> JobOrderTransfers { get; set; }

    public virtual DbSet<JobOrderWarehouse> JobOrderWarehouses { get; set; }

    public virtual DbSet<LatePaymentCharge> LatePaymentCharges { get; set; }

    public virtual DbSet<LatePaymentChargesDetail> LatePaymentChargesDetails { get; set; }

    public virtual DbSet<LcForeignSupplier> LcForeignSuppliers { get; set; }

    public virtual DbSet<LcLandedCost> LcLandedCosts { get; set; }

    public virtual DbSet<LcfacilityDetail> LcfacilityDetails { get; set; }

    public virtual DbSet<LcfacilityMain> LcfacilityMains { get; set; }

    public virtual DbSet<LcmanagementMain> LcmanagementMains { get; set; }

    public virtual DbSet<LcmanagementWithCf> LcmanagementWithCfs { get; set; }

    public virtual DbSet<LcmanagementWithLcc> LcmanagementWithLccs { get; set; }

    public virtual DbSet<LcmanagementWithPo> LcmanagementWithPos { get; set; }

    public virtual DbSet<Lead> Leads { get; set; }

    public virtual DbSet<LeadAssignmentSetup> LeadAssignmentSetups { get; set; }

    public virtual DbSet<LeadAssignmentSetupDetail> LeadAssignmentSetupDetails { get; set; }

    public virtual DbSet<LeadType> LeadTypes { get; set; }

    public virtual DbSet<LeadsHistory> LeadsHistories { get; set; }

    public virtual DbSet<LeaveApplication> LeaveApplications { get; set; }

    public virtual DbSet<LeaveApplicationApprovedDate> LeaveApplicationApprovedDates { get; set; }

    public virtual DbSet<LeaveApplicationDetail> LeaveApplicationDetails { get; set; }

    public virtual DbSet<LeaveRulesDefinition> LeaveRulesDefinitions { get; set; }

    public virtual DbSet<LeaveRulesSubSegmentsDetail> LeaveRulesSubSegmentsDetails { get; set; }

    public virtual DbSet<LiveChat> LiveChats { get; set; }

    public virtual DbSet<LoaderRegistration> LoaderRegistrations { get; set; }

    public virtual DbSet<LoanAndAdvance> LoanAndAdvances { get; set; }

    public virtual DbSet<LoanAndAdvanceSetup> LoanAndAdvanceSetups { get; set; }

    public virtual DbSet<LoanAndAdvancesDeductionRule> LoanAndAdvancesDeductionRules { get; set; }

    public virtual DbSet<LoanAndAdvancesDeductionRulesDetail> LoanAndAdvancesDeductionRulesDetails { get; set; }

    public virtual DbSet<LoanAndAdvancesDeductionSetup> LoanAndAdvancesDeductionSetups { get; set; }

    public virtual DbSet<LoanAndAdvancesDeductionSetupDetail> LoanAndAdvancesDeductionSetupDetails { get; set; }

    public virtual DbSet<LoanAndAdvancesDeductionSubSegment> LoanAndAdvancesDeductionSubSegments { get; set; }

    public virtual DbSet<LoansAndAdvanceSetup> LoansAndAdvanceSetups { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<MachineCode> MachineCodes { get; set; }

    public virtual DbSet<MainStoreDet> MainStoreDets { get; set; }

    public virtual DbSet<Master> Masters { get; set; }

    public virtual DbSet<Mch> Mches { get; set; }

    public virtual DbSet<MchLog> MchLogs { get; set; }

    public virtual DbSet<MegaAccountConfiguration> MegaAccountConfigurations { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<MiscFarmula> MiscFarmulas { get; set; }

    public virtual DbSet<NewUserRight> NewUserRights { get; set; }

    public virtual DbSet<NewUserRightsSubSegment> NewUserRightsSubSegments { get; set; }

    public virtual DbSet<NewUserRightsVtype> NewUserRightsVtypes { get; set; }

    public virtual DbSet<NewUserRightsWarehouse> NewUserRightsWarehouses { get; set; }

    public virtual DbSet<OfferForSale> OfferForSales { get; set; }

    public virtual DbSet<Ogp> Ogps { get; set; }

    public virtual DbSet<OnlineBooking> OnlineBookings { get; set; }

    public virtual DbSet<OpYear> OpYears { get; set; }

    public virtual DbSet<OpenTrading> OpenTradings { get; set; }

    public virtual DbSet<OpenTradingDetail> OpenTradingDetails { get; set; }

    public virtual DbSet<Organagram> Organagrams { get; set; }

    public virtual DbSet<PartialAdjustment> PartialAdjustments { get; set; }

    public virtual DbSet<PartialAdjustmentPaymentDetail> PartialAdjustmentPaymentDetails { get; set; }

    public virtual DbSet<PartialAdjustmentReceiptDetail> PartialAdjustmentReceiptDetails { get; set; }

    public virtual DbSet<PartialReceipt> PartialReceipts { get; set; }

    public virtual DbSet<Party> Parties { get; set; }

    public virtual DbSet<Party1> Parties1 { get; set; }

    public virtual DbSet<PartyAddress> PartyAddresses { get; set; }

    public virtual DbSet<PartyCategory> PartyCategories { get; set; }

    public virtual DbSet<PartyChartofAcct> PartyChartofAccts { get; set; }

    public virtual DbSet<PartyCreditLimit> PartyCreditLimits { get; set; }

    public virtual DbSet<PartyLog> PartyLogs { get; set; }

    public virtual DbSet<PartyPayment> PartyPayments { get; set; }

    public virtual DbSet<PartyPaymentCheque> PartyPaymentCheques { get; set; }

    public virtual DbSet<PartyPaymentDetail> PartyPaymentDetails { get; set; }

    public virtual DbSet<PartyPaymentDetail1> PartyPaymentDetails1 { get; set; }

    public virtual DbSet<PartyPaymentMain> PartyPaymentMains { get; set; }

    public virtual DbSet<PartyPaymentSecurity> PartyPaymentSecurities { get; set; }

    public virtual DbSet<PartyPaymentSecurity1> PartyPaymentSecurities1 { get; set; }

    public virtual DbSet<PartyVoucherDetail> PartyVoucherDetails { get; set; }

    public virtual DbSet<PartyVoucherMain> PartyVoucherMains { get; set; }

    public virtual DbSet<PaymentPlan> PaymentPlans { get; set; }

    public virtual DbSet<PendingFollowup> PendingFollowups { get; set; }

    public virtual DbSet<PendingLead> PendingLeads { get; set; }

    public virtual DbSet<PendingLeadsNew> PendingLeadsNews { get; set; }

    public virtual DbSet<Pid> Pids { get; set; }

    public virtual DbSet<PidLog> PidLogs { get; set; }

    public virtual DbSet<Pim> Pims { get; set; }

    public virtual DbSet<PimLog> PimLogs { get; set; }

    public virtual DbSet<PipePurchaseDetail> PipePurchaseDetails { get; set; }

    public virtual DbSet<PipePurchaseMain> PipePurchaseMains { get; set; }

    public virtual DbSet<PipeSaleDetail> PipeSaleDetails { get; set; }

    public virtual DbSet<PipeSaleMain> PipeSaleMains { get; set; }

    public virtual DbSet<Plconfig> Plconfigs { get; set; }

    public virtual DbSet<PlotAllocationReceipt> PlotAllocationReceipts { get; set; }

    public virtual DbSet<PlotAllocationReceiptDelivery> PlotAllocationReceiptDeliveries { get; set; }

    public virtual DbSet<Po> Pos { get; set; }

    public virtual DbSet<Podetail> Podetails { get; set; }

    public virtual DbSet<Pomaster> Pomasters { get; set; }

    public virtual DbSet<PrDetail> PrDetails { get; set; }

    public virtual DbSet<PrMaster> PrMasters { get; set; }

    public virtual DbSet<PriceList> PriceLists { get; set; }

    public virtual DbSet<PriceListDetail> PriceListDetails { get; set; }

    public virtual DbSet<PriorityQueue> PriorityQueues { get; set; }

    public virtual DbSet<PriorityQueueDetail> PriorityQueueDetails { get; set; }

    public virtual DbSet<ProductPricingDetail> ProductPricingDetails { get; set; }

    public virtual DbSet<ProductPricingDetail1> ProductPricingDetails1 { get; set; }

    public virtual DbSet<ProductPricingDetailBp> ProductPricingDetailBps { get; set; }

    public virtual DbSet<ProductPricingMain> ProductPricingMains { get; set; }

    public virtual DbSet<ProductPricingMainBp> ProductPricingMainBps { get; set; }

    public virtual DbSet<ProductPricingMaster> ProductPricingMasters { get; set; }

    public virtual DbSet<ProductPricingPurchaseDetail> ProductPricingPurchaseDetails { get; set; }

    public virtual DbSet<ProductPricingPurchaseMain> ProductPricingPurchaseMains { get; set; }

    public virtual DbSet<ProfitLoss> ProfitLosses { get; set; }

    public virtual DbSet<ProjectExchange> ProjectExchanges { get; set; }

    public virtual DbSet<ProjectInventory> ProjectInventories { get; set; }

    public virtual DbSet<ProjectInventoryDetail> ProjectInventoryDetails { get; set; }

    public virtual DbSet<ProjectRegistration> ProjectRegistrations { get; set; }

    public virtual DbSet<ProjectReschedule> ProjectReschedules { get; set; }

    public virtual DbSet<ProjectRescheduleDetail> ProjectRescheduleDetails { get; set; }

    public virtual DbSet<ProjectReversal> ProjectReversals { get; set; }

    public virtual DbSet<ProjectSale> ProjectSales { get; set; }

    public virtual DbSet<ProjectSaleCrd> ProjectSaleCrds { get; set; }

    public virtual DbSet<ProjectSaleDetail> ProjectSaleDetails { get; set; }

    public virtual DbSet<ProjectSaleFileDelivery> ProjectSaleFileDeliveries { get; set; }

    public virtual DbSet<ProjectSaleFingerPrint> ProjectSaleFingerPrints { get; set; }

    public virtual DbSet<ProjectSalePcd> ProjectSalePcds { get; set; }

    public virtual DbSet<ProjectSaleReceiptsDelivery> ProjectSaleReceiptsDeliveries { get; set; }

    public virtual DbSet<ProjectSaleTransfer> ProjectSaleTransfers { get; set; }

    public virtual DbSet<ProjectTransfer> ProjectTransfers { get; set; }

    public virtual DbSet<ProjectTransferFingerPrint> ProjectTransferFingerPrints { get; set; }

    public virtual DbSet<ProjectTransfererFingerPrint> ProjectTransfererFingerPrints { get; set; }

    public virtual DbSet<ProjectWiseGl> ProjectWiseGls { get; set; }

    public virtual DbSet<PropertyDetail> PropertyDetails { get; set; }

    public virtual DbSet<ProvisionalSalePurchase> ProvisionalSalePurchases { get; set; }

    public virtual DbSet<Psdetail> Psdetails { get; set; }

    public virtual DbSet<PslatePayment> PslatePayments { get; set; }

    public virtual DbSet<PurchaseDiscountDetail> PurchaseDiscountDetails { get; set; }

    public virtual DbSet<PurchaseDiscountMain> PurchaseDiscountMains { get; set; }

    public virtual DbSet<PurchaseDiscountsBpDetail> PurchaseDiscountsBpDetails { get; set; }

    public virtual DbSet<PurchaseDiscountsBpMain> PurchaseDiscountsBpMains { get; set; }

    public virtual DbSet<PurchaseRate> PurchaseRates { get; set; }

    public virtual DbSet<PurchaseRatesDetail> PurchaseRatesDetails { get; set; }

    public virtual DbSet<PurchaseRatesSubSegmentsDetail> PurchaseRatesSubSegmentsDetails { get; set; }

    public virtual DbSet<QueryForPurchase> QueryForPurchases { get; set; }

    public virtual DbSet<QuotaAllocation> QuotaAllocations { get; set; }

    public virtual DbSet<QuotaAllocationDetail> QuotaAllocationDetails { get; set; }

    public virtual DbSet<QuotaAllocationModified> QuotaAllocationModifieds { get; set; }

    public virtual DbSet<QuotaAllocationModifiedDetail> QuotaAllocationModifiedDetails { get; set; }

    public virtual DbSet<QuotationDetail> QuotationDetails { get; set; }

    public virtual DbSet<QuotationMaster> QuotationMasters { get; set; }

    public virtual DbSet<RawMaterialIssuanceDetail> RawMaterialIssuanceDetails { get; set; }

    public virtual DbSet<RawMaterialIssuanceMaster> RawMaterialIssuanceMasters { get; set; }

    public virtual DbSet<RawMaterialReturnDetail> RawMaterialReturnDetails { get; set; }

    public virtual DbSet<RawMaterialReturnMaster> RawMaterialReturnMasters { get; set; }

    public virtual DbSet<RebateDefinition> RebateDefinitions { get; set; }

    public virtual DbSet<RebateDefinitionDetail> RebateDefinitionDetails { get; set; }

    public virtual DbSet<ReceiptSecurity> ReceiptSecurities { get; set; }

    public virtual DbSet<ReceiptsDelivery> ReceiptsDeliveries { get; set; }

    public virtual DbSet<ReceiptsDetail> ReceiptsDetails { get; set; }

    public virtual DbSet<ReceiptsMain> ReceiptsMains { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<RegionRight> RegionRights { get; set; }

    public virtual DbSet<RegionRightsDetail> RegionRightsDetails { get; set; }

    public virtual DbSet<Rental> Rentals { get; set; }

    public virtual DbSet<RentalStructure> RentalStructures { get; set; }

    public virtual DbSet<RentalStructureDetail> RentalStructureDetails { get; set; }

    public virtual DbSet<Requisition> Requisitions { get; set; }

    public virtual DbSet<RequisitionDetail> RequisitionDetails { get; set; }

    public virtual DbSet<RequisitionDetail1> RequisitionDetails1 { get; set; }

    public virtual DbSet<RequisitionMaster> RequisitionMasters { get; set; }

    public virtual DbSet<RetailSale> RetailSales { get; set; }

    public virtual DbSet<ReturnFromDept> ReturnFromDepts { get; set; }

    public virtual DbSet<RouteDetail> RouteDetails { get; set; }

    public virtual DbSet<RouteRegistration> RouteRegistrations { get; set; }

    public virtual DbSet<SalaryDispersement> SalaryDispersements { get; set; }

    public virtual DbSet<SalaryDispersementBankDetail> SalaryDispersementBankDetails { get; set; }

    public virtual DbSet<SalaryDispersementDetail> SalaryDispersementDetails { get; set; }

    public virtual DbSet<SalaryDispersementSetup> SalaryDispersementSetups { get; set; }

    public virtual DbSet<SalaryPerquisitesDetail> SalaryPerquisitesDetails { get; set; }

    public virtual DbSet<SalaryPerquisitesMain> SalaryPerquisitesMains { get; set; }

    public virtual DbSet<SalaryScaleDetail> SalaryScaleDetails { get; set; }

    public virtual DbSet<SalaryScaleMain> SalaryScaleMains { get; set; }

    public virtual DbSet<SalarySheet> SalarySheets { get; set; }

    public virtual DbSet<SalarySheetDeductionDetail> SalarySheetDeductionDetails { get; set; }

    public virtual DbSet<SalarySheetDetail> SalarySheetDetails { get; set; }

    public virtual DbSet<SalarySlip> SalarySlips { get; set; }

    public virtual DbSet<SaleDetail> SaleDetails { get; set; }

    public virtual DbSet<SaleMain> SaleMains { get; set; }

    public virtual DbSet<SaleOrderMaster> SaleOrderMasters { get; set; }

    public virtual DbSet<SaleTax> SaleTaxes { get; set; }

    public virtual DbSet<SaleorderDetail> SaleorderDetails { get; set; }

    public virtual DbSet<SalesInvoiceDetail> SalesInvoiceDetails { get; set; }

    public virtual DbSet<SalesInvoiceMaster> SalesInvoiceMasters { get; set; }

    public virtual DbSet<SalesInvoiceService> SalesInvoiceServices { get; set; }

    public virtual DbSet<SalesMan> SalesMen { get; set; }

    public virtual DbSet<SalesManDetail> SalesManDetails { get; set; }

    public virtual DbSet<SalesOrderSubSegment> SalesOrderSubSegments { get; set; }

    public virtual DbSet<Segment> Segments { get; set; }

    public virtual DbSet<Service> Services { get; set; }

    public virtual DbSet<ServiceBoqplan> ServiceBoqplans { get; set; }

    public virtual DbSet<ServiceBoqplanDetail> ServiceBoqplanDetails { get; set; }

    public virtual DbSet<ServicesRegistration> ServicesRegistrations { get; set; }

    public virtual DbSet<Sir> Sirs { get; set; }

    public virtual DbSet<SireturnDetail> SireturnDetails { get; set; }

    public virtual DbSet<SireturnMaster> SireturnMasters { get; set; }

    public virtual DbSet<SkipedLead> SkipedLeads { get; set; }

    public virtual DbSet<SmsapiIntegration> SmsapiIntegrations { get; set; }

    public virtual DbSet<Smscompaign> Smscompaigns { get; set; }

    public virtual DbSet<SmscompaignDetail> SmscompaignDetails { get; set; }

    public virtual DbSet<SocietyInstallment> SocietyInstallments { get; set; }

    public virtual DbSet<SocietyInstallmentCustomerReceipt> SocietyInstallmentCustomerReceipts { get; set; }

    public virtual DbSet<SocietyPayment> SocietyPayments { get; set; }

    public virtual DbSet<SocietyPaymentDetail> SocietyPaymentDetails { get; set; }

    public virtual DbSet<SocietyPaymentInstrument> SocietyPaymentInstruments { get; set; }

    public virtual DbSet<SpRptSaleRegister> SpRptSaleRegisters { get; set; }

    public virtual DbSet<StatementOfFinancialPosition> StatementOfFinancialPositions { get; set; }

    public virtual DbSet<StatementOfFinancialPositionDetail> StatementOfFinancialPositionDetails { get; set; }

    public virtual DbSet<StatementOfProfitAndLoss> StatementOfProfitAndLosses { get; set; }

    public virtual DbSet<StatementOfProfitAndLossDetail> StatementOfProfitAndLossDetails { get; set; }

    public virtual DbSet<Stock> Stocks { get; set; }

    public virtual DbSet<StockAdjustmentDetail> StockAdjustmentDetails { get; set; }

    public virtual DbSet<StockAdustmentMaster> StockAdustmentMasters { get; set; }

    public virtual DbSet<StockIssue> StockIssues { get; set; }

    public virtual DbSet<StockIssueDetail> StockIssueDetails { get; set; }

    public virtual DbSet<SubProject> SubProjects { get; set; }

    public virtual DbSet<SubSegment> SubSegments { get; set; }

    public virtual DbSet<Sublet> Sublets { get; set; }

    public virtual DbSet<SubletService> SubletServices { get; set; }

    public virtual DbSet<SupportCharge> SupportCharges { get; set; }

    public virtual DbSet<SupportChargesDetail> SupportChargesDetails { get; set; }

    public virtual DbSet<SysConfig> SysConfigs { get; set; }

    public virtual DbSet<SysGenOption> SysGenOptions { get; set; }

    public virtual DbSet<SysSetting> SysSettings { get; set; }

    public virtual DbSet<Table1> Table1s { get; set; }

    public virtual DbSet<Table2> Table2s { get; set; }

    public virtual DbSet<Tank> Tanks { get; set; }

    public virtual DbSet<TankChart> TankCharts { get; set; }

    public virtual DbSet<Target> Targets { get; set; }

    public virtual DbSet<TargetsDetail> TargetsDetails { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<TaskHistory> TaskHistories { get; set; }

    public virtual DbSet<TaxSlab> TaxSlabs { get; set; }

    public virtual DbSet<TeamDetail> TeamDetails { get; set; }

    public virtual DbSet<TeamLeader> TeamLeaders { get; set; }

    public virtual DbSet<TeamLeaderDetail> TeamLeaderDetails { get; set; }

    public virtual DbSet<TeamMaster> TeamMasters { get; set; }

    public virtual DbSet<TeamSetup> TeamSetups { get; set; }

    public virtual DbSet<TeamSetupDetail> TeamSetupDetails { get; set; }

    public virtual DbSet<TempBlcode> TempBlcodes { get; set; }

    public virtual DbSet<TempCapacity> TempCapacities { get; set; }

    public virtual DbSet<TempDepartment> TempDepartments { get; set; }

    public virtual DbSet<TempDoforIp> TempDoforIps { get; set; }

    public virtual DbSet<TempDrRequisition> TempDrRequisitions { get; set; }

    public virtual DbSet<TempGrn> TempGrns { get; set; }

    public virtual DbSet<TempIgp> TempIgps { get; set; }

    public virtual DbSet<TempIp> TempIps { get; set; }

    public virtual DbSet<TempIpPurchase> TempIpPurchases { get; set; }

    public virtual DbSet<TempJobOrder> TempJobOrders { get; set; }

    public virtual DbSet<TempJobOrderWh> TempJobOrderWhs { get; set; }

    public virtual DbSet<TempMonth> TempMonths { get; set; }

    public virtual DbSet<TempParty> TempParties { get; set; }

    public virtual DbSet<TempPartyType> TempPartyTypes { get; set; }

    public virtual DbSet<TempPlcode> TempPlcodes { get; set; }

    public virtual DbSet<TempPo> TempPos { get; set; }

    public virtual DbSet<TempProduct> TempProducts { get; set; }

    public virtual DbSet<TempReceipt> TempReceipts { get; set; }

    public virtual DbSet<TempRequisition> TempRequisitions { get; set; }

    public virtual DbSet<TempSaleOrder> TempSaleOrders { get; set; }

    public virtual DbSet<TempSegment> TempSegments { get; set; }

    public virtual DbSet<TempSegment1> TempSegments1 { get; set; }

    public virtual DbSet<TempSubSegment> TempSubSegments { get; set; }

    public virtual DbSet<TempSubSegment1> TempSubSegments1 { get; set; }

    public virtual DbSet<TempUser> TempUsers { get; set; }

    public virtual DbSet<TempVehicle> TempVehicles { get; set; }

    public virtual DbSet<TempWarehouse> TempWarehouses { get; set; }

    public virtual DbSet<Temprory> Temprories { get; set; }

    public virtual DbSet<Test> Tests { get; set; }

    public virtual DbSet<TestCostCenterDetail> TestCostCenterDetails { get; set; }

    public virtual DbSet<TestCostCenterMain> TestCostCenterMains { get; set; }

    public virtual DbSet<TestDemo> TestDemos { get; set; }

    public virtual DbSet<TestIssue> TestIssues { get; set; }

    public virtual DbSet<TestSir> TestSirs { get; set; }

    public virtual DbSet<TokenReceipt> TokenReceipts { get; set; }

    public virtual DbSet<TokenReturn> TokenReturns { get; set; }

    public virtual DbSet<Trading> Tradings { get; set; }

    public virtual DbSet<TradingClosing> TradingClosings { get; set; }

    public virtual DbSet<TradingListing> TradingListings { get; set; }

    public virtual DbSet<TradingListingDetail> TradingListingDetails { get; set; }

    public virtual DbSet<TradingPayment> TradingPayments { get; set; }

    public virtual DbSet<TradingReceipt> TradingReceipts { get; set; }

    public virtual DbSet<TradingReceiptsPayment> TradingReceiptsPayments { get; set; }

    public virtual DbSet<TradingTokenReceipt> TradingTokenReceipts { get; set; }

    public virtual DbSet<TradingTokenReturn> TradingTokenReturns { get; set; }

    public virtual DbSet<TransactionLog> TransactionLogs { get; set; }

    public virtual DbSet<TrialBalance> TrialBalances { get; set; }

    public virtual DbSet<TrialBalance1> TrialBalances1 { get; set; }

    public virtual DbSet<UnitInfo> UnitInfos { get; set; }

    public virtual DbSet<UomConversion> UomConversions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserAndPartyMaping> UserAndPartyMapings { get; set; }

    public virtual DbSet<UserInfo> UserInfos { get; set; }

    public virtual DbSet<UserPendingLeadsSummaryProjectWise> UserPendingLeadsSummaryProjectWises { get; set; }

    public virtual DbSet<UserRight> UserRights { get; set; }

    public virtual DbSet<UserRightsForm> UserRightsForms { get; set; }

    public virtual DbSet<UserRightsSpecial> UserRightsSpecials { get; set; }

    public virtual DbSet<UsersActiveTime> UsersActiveTimes { get; set; }

    public virtual DbSet<VDetail> VDetails { get; set; }

    public virtual DbSet<VDetailLog> VDetailLogs { get; set; }

    public virtual DbSet<VDetailPnr> VDetailPnrs { get; set; }

    public virtual DbSet<VMain> VMains { get; set; }

    public virtual DbSet<VMainLog> VMainLogs { get; set; }

    public virtual DbSet<VMainPnr> VMainPnrs { get; set; }

    public virtual DbSet<VWAtc> VWAtcs { get; set; }

    public virtual DbSet<VWAtcDetailNew> VWAtcDetailNews { get; set; }

    public virtual DbSet<VWAtcMain> VWAtcMains { get; set; }

    public virtual DbSet<VWAtcMainNew> VWAtcMainNews { get; set; }

    public virtual DbSet<VWAtcnewReport> VWAtcnewReports { get; set; }

    public virtual DbSet<VWBarCode> VWBarCodes { get; set; }

    public virtual DbSet<VWCfsMain> VWCfsMains { get; set; }

    public virtual DbSet<VWCfstmMain> VWCfstmMains { get; set; }

    public virtual DbSet<VWCylinderFillingSessionMain> VWCylinderFillingSessionMains { get; set; }

    public virtual DbSet<VWCylinderFillingSessionReport> VWCylinderFillingSessionReports { get; set; }

    public virtual DbSet<VWCylinderFillingSessionTmMain> VWCylinderFillingSessionTmMains { get; set; }

    public virtual DbSet<VWCylinderFillingSessionTmReport> VWCylinderFillingSessionTmReports { get; set; }

    public virtual DbSet<VWDecantingDetail> VWDecantingDetails { get; set; }

    public virtual DbSet<VWDecantingMain> VWDecantingMains { get; set; }

    public virtual DbSet<VWDeliveryOrderCashSalesReport> VWDeliveryOrderCashSalesReports { get; set; }

    public virtual DbSet<VWDeliveryOrderDriverLoaderReport> VWDeliveryOrderDriverLoaderReports { get; set; }

    public virtual DbSet<VWDeliveryOrderMainDetailReport> VWDeliveryOrderMainDetailReports { get; set; }

    public virtual DbSet<VWDeliveryOrderWarehouseReport> VWDeliveryOrderWarehouseReports { get; set; }

    public virtual DbSet<VWDriverRegistration> VWDriverRegistrations { get; set; }

    public virtual DbSet<VWEcrMain> VWEcrMains { get; set; }

    public virtual DbSet<VWEcrMainNew> VWEcrMainNews { get; set; }

    public virtual DbSet<VWEcrmanagement> VWEcrmanagements { get; set; }

    public virtual DbSet<VWEcrmanagementCylinderWise> VWEcrmanagementCylinderWises { get; set; }

    public virtual DbSet<VWEcrmanagementNew> VWEcrmanagementNews { get; set; }

    public virtual DbSet<VWIpMain> VWIpMains { get; set; }

    public virtual DbSet<VWIpReport> VWIpReports { get; set; }

    public virtual DbSet<VWJobOrderDetail> VWJobOrderDetails { get; set; }

    public virtual DbSet<VWJobOrderDriverLoaderReport> VWJobOrderDriverLoaderReports { get; set; }

    public virtual DbSet<VWJobOrderMain> VWJobOrderMains { get; set; }

    public virtual DbSet<VWJobOrderMainDetailReport> VWJobOrderMainDetailReports { get; set; }

    public virtual DbSet<VWJobOrderWarehouse> VWJobOrderWarehouses { get; set; }

    public virtual DbSet<VWJobOrderWarehouseReport> VWJobOrderWarehouseReports { get; set; }

    public virtual DbSet<VWLcForeignSupplier> VWLcForeignSuppliers { get; set; }

    public virtual DbSet<VWLcLandedCost> VWLcLandedCosts { get; set; }

    public virtual DbSet<VWLcfacility> VWLcfacilities { get; set; }

    public virtual DbSet<VWLoaderRegistration> VWLoaderRegistrations { get; set; }

    public virtual DbSet<VWOgp> VWOgps { get; set; }

    public virtual DbSet<VWOgpReport> VWOgpReports { get; set; }

    public virtual DbSet<VWPossalesReport> VWPossalesReports { get; set; }

    public virtual DbSet<VWProductPricingDetail> VWProductPricingDetails { get; set; }

    public virtual DbSet<VWProductPricingDetailBp> VWProductPricingDetailBps { get; set; }

    public virtual DbSet<VWProductPricingMain> VWProductPricingMains { get; set; }

    public virtual DbSet<VWProductPricingMainBp> VWProductPricingMainBps { get; set; }

    public virtual DbSet<VWProductPricingReport> VWProductPricingReports { get; set; }

    public virtual DbSet<VWProductPricingReportBp> VWProductPricingReportBps { get; set; }

    public virtual DbSet<VWProfitLoss> VWProfitLosses { get; set; }

    public virtual DbSet<VWProfitLossDonnerwise> VWProfitLossDonnerwises { get; set; }

    public virtual DbSet<VWSaleInvoiceItem> VWSaleInvoiceItems { get; set; }

    public virtual DbSet<VWSaleInvoiceItemsW> VWSaleInvoiceItemsWs { get; set; }

    public virtual DbSet<VWSaleOrderForQuotationdatum> VWSaleOrderForQuotationdata { get; set; }

    public virtual DbSet<VWSaleOrderMain> VWSaleOrderMains { get; set; }

    public virtual DbSet<VWSaleorderSubsegment> VWSaleorderSubsegments { get; set; }

    public virtual DbSet<VWSalesInvoiceDetail> VWSalesInvoiceDetails { get; set; }

    public virtual DbSet<VWSalesInvoiceMain> VWSalesInvoiceMains { get; set; }

    public virtual DbSet<VWSalesInvoiceReport> VWSalesInvoiceReports { get; set; }

    public virtual DbSet<VWSalesMonthly> VWSalesMonthlies { get; set; }

    public virtual DbSet<VWSalesOrderReport> VWSalesOrderReports { get; set; }

    public virtual DbSet<VWSireturnDetail> VWSireturnDetails { get; set; }

    public virtual DbSet<VWSireturnMain> VWSireturnMains { get; set; }

    public virtual DbSet<VWTestCostCenter> VWTestCostCenters { get; set; }

    public virtual DbSet<VWretailSale> VWretailSales { get; set; }

    public virtual DbSet<VehicleRegistration> VehicleRegistrations { get; set; }

    public virtual DbSet<VendorCommission> VendorCommissions { get; set; }

    public virtual DbSet<VendorCommissionDetail> VendorCommissionDetails { get; set; }

    public virtual DbSet<VendorItemsDetail> VendorItemsDetails { get; set; }

    public virtual DbSet<VendorItemsMain> VendorItemsMains { get; set; }

    public virtual DbSet<VersionProduct> VersionProducts { get; set; }

    public virtual DbSet<Visitor> Visitors { get; set; }

    public virtual DbSet<VoucherType> VoucherTypes { get; set; }

    public virtual DbSet<VuDo> VuDos { get; set; }

    public virtual DbSet<VuDoReport> VuDoReports { get; set; }

    public virtual DbSet<VwAccumulatedBalance> VwAccumulatedBalances { get; set; }

    public virtual DbSet<VwAcknowledgementReceipt> VwAcknowledgementReceipts { get; set; }

    public virtual DbSet<VwAcknowledgementReceiptDelivery> VwAcknowledgementReceiptDeliveries { get; set; }

    public virtual DbSet<VwActivityAnalyser> VwActivityAnalysers { get; set; }

    public virtual DbSet<VwActivityAnalysis> VwActivityAnalyses { get; set; }

    public virtual DbSet<VwActivityAnalysisNew> VwActivityAnalysisNews { get; set; }

    public virtual DbSet<VwAddUser> VwAddUsers { get; set; }

    public virtual DbSet<VwAddUser1> VwAddUsers1 { get; set; }

    public virtual DbSet<VwAging> VwAgings { get; set; }

    public virtual DbSet<VwAlertUser> VwAlertUsers { get; set; }

    public virtual DbSet<VwAllYearItem> VwAllYearItems { get; set; }

    public virtual DbSet<VwAllotmentLetter> VwAllotmentLetters { get; set; }

    public virtual DbSet<VwAllotmentLetterDelivery> VwAllotmentLetterDeliveries { get; set; }

    public virtual DbSet<VwAssetAdditionModification> VwAssetAdditionModifications { get; set; }

    public virtual DbSet<VwAssetAdditionModificationDetail> VwAssetAdditionModificationDetails { get; set; }

    public virtual DbSet<VwAssetDisposal> VwAssetDisposals { get; set; }

    public virtual DbSet<VwAssetDisposalDetail> VwAssetDisposalDetails { get; set; }

    public virtual DbSet<VwAssetHandingOver> VwAssetHandingOvers { get; set; }

    public virtual DbSet<VwAssetHandingOverDetail> VwAssetHandingOverDetails { get; set; }

    public virtual DbSet<VwAssetPartialPayment> VwAssetPartialPayments { get; set; }

    public virtual DbSet<VwAssetPartialPaymentDetail> VwAssetPartialPaymentDetails { get; set; }

    public virtual DbSet<VwAssetReport> VwAssetReports { get; set; }

    public virtual DbSet<VwAssetTransfer> VwAssetTransfers { get; set; }

    public virtual DbSet<VwAssetTransferDetail> VwAssetTransferDetails { get; set; }

    public virtual DbSet<VwAssetType> VwAssetTypes { get; set; }

    public virtual DbSet<VwAtcCharge> VwAtcCharges { get; set; }

    public virtual DbSet<VwAtcCylinderReconciliation> VwAtcCylinderReconciliations { get; set; }

    public virtual DbSet<VwAtcCylinderReconciliationNew> VwAtcCylinderReconciliationNews { get; set; }

    public virtual DbSet<VwB> VwBs { get; set; }

    public virtual DbSet<VwBankClearing> VwBankClearings { get; set; }

    public virtual DbSet<VwBankClearing1> VwBankClearings1 { get; set; }

    public virtual DbSet<VwBankClearingCheque> VwBankClearingCheques { get; set; }

    public virtual DbSet<VwBankClearingDetail1> VwBankClearingDetails1 { get; set; }

    public virtual DbSet<VwBankClearingMain> VwBankClearingMains { get; set; }

    public virtual DbSet<VwBankClearingMasterDetail> VwBankClearingMasterDetails { get; set; }

    public virtual DbSet<VwBankDetail> VwBankDetails { get; set; }

    public virtual DbSet<VwBankGeneralLedger> VwBankGeneralLedgers { get; set; }

    public virtual DbSet<VwBankMainDetail> VwBankMainDetails { get; set; }

    public virtual DbSet<VwBankMasterDetail> VwBankMasterDetails { get; set; }

    public virtual DbSet<VwBankName> VwBankNames { get; set; }

    public virtual DbSet<VwBankPosition> VwBankPositions { get; set; }

    public virtual DbSet<VwBankRegistration> VwBankRegistrations { get; set; }

    public virtual DbSet<VwBankclearingDetail> VwBankclearingDetails { get; set; }

    public virtual DbSet<VwBelowReOrderItem> VwBelowReOrderItems { get; set; }

    public virtual DbSet<VwBl> VwBls { get; set; }

    public virtual DbSet<VwBlupto> VwBluptos { get; set; }

    public virtual DbSet<VwBomCompressor> VwBomCompressors { get; set; }

    public virtual DbSet<VwBomLiquid> VwBomLiquids { get; set; }

    public virtual DbSet<VwBomtm> VwBomtms { get; set; }

    public virtual DbSet<VwBookingByStaff> VwBookingByStaffs { get; set; }

    public virtual DbSet<VwBookingConfirmationLetter> VwBookingConfirmationLetters { get; set; }

    public virtual DbSet<VwBookingForm> VwBookingForms { get; set; }

    public virtual DbSet<VwBookingFormConfirmationPayment> VwBookingFormConfirmationPayments { get; set; }

    public virtual DbSet<VwBookingFormDelivery> VwBookingFormDeliveries { get; set; }

    public virtual DbSet<VwBookingFormDeliveryDebit> VwBookingFormDeliveryDebits { get; set; }

    public virtual DbSet<VwBookingFormDeliveryDetail> VwBookingFormDeliveryDetails { get; set; }

    public virtual DbSet<VwBookingFormIssue> VwBookingFormIssues { get; set; }

    public virtual DbSet<VwBookingFormReceiving> VwBookingFormReceivings { get; set; }

    public virtual DbSet<VwBookingFormReport> VwBookingFormReports { get; set; }

    public virtual DbSet<VwBookingFormTracking> VwBookingFormTrackings { get; set; }

    public virtual DbSet<VwBookingOperation> VwBookingOperations { get; set; }

    public virtual DbSet<VwBookingReceipt> VwBookingReceipts { get; set; }

    public virtual DbSet<VwBookingformCredit> VwBookingformCredits { get; set; }

    public virtual DbSet<VwBpGeneralLedger> VwBpGeneralLedgers { get; set; }

    public virtual DbSet<VwBpRoute> VwBpRoutes { get; set; }

    public virtual DbSet<VwBpVendorsTemprory> VwBpVendorsTemprories { get; set; }

    public virtual DbSet<VwBpcodeProject> VwBpcodeProjects { get; set; }

    public virtual DbSet<VwBs2> VwBs2s { get; set; }

    public virtual DbSet<VwBs3> VwBs3s { get; set; }

    public virtual DbSet<VwBsNote> VwBsNotes { get; set; }

    public virtual DbSet<VwBscomplete> VwBscompletes { get; set; }

    public virtual DbSet<VwBsleft> VwBslefts { get; set; }

    public virtual DbSet<VwBsnet> VwBsnets { get; set; }

    public virtual DbSet<VwBsnote1> VwBsnotes1 { get; set; }

    public virtual DbSet<VwBsnotes2> VwBsnotes2s { get; set; }

    public virtual DbSet<VwBsnotesComplete> VwBsnotesCompletes { get; set; }

    public virtual DbSet<VwBsnotesCompleteNote> VwBsnotesCompleteNotes { get; set; }

    public virtual DbSet<VwBsright> VwBsrights { get; set; }

    public virtual DbSet<VwBudgetDefinition> VwBudgetDefinitions { get; set; }

    public virtual DbSet<VwBudgetDefinitionDetail> VwBudgetDefinitionDetails { get; set; }

    public virtual DbSet<VwBusinessPartner> VwBusinessPartners { get; set; }

    public virtual DbSet<VwBusinessPartnersAddress> VwBusinessPartnersAddresses { get; set; }

    public virtual DbSet<VwBusinessPartnersSubSegment> VwBusinessPartnersSubSegments { get; set; }

    public virtual DbSet<VwBuyBack> VwBuyBacks { get; set; }

    public virtual DbSet<VwCallLogsLead> VwCallLogsLeads { get; set; }

    public virtual DbSet<VwCallRecording> VwCallRecordings { get; set; }

    public virtual DbSet<VwCampaignAllocation> VwCampaignAllocations { get; set; }

    public virtual DbSet<VwCampaignsAnalysis> VwCampaignsAnalyses { get; set; }

    public virtual DbSet<VwCcCodeAll> VwCcCodeAlls { get; set; }

    public virtual DbSet<VwCcconsSum> VwCcconsSums { get; set; }

    public virtual DbSet<VwCcwmconsCompprct> VwCcwmconsCompprcts { get; set; }

    public virtual DbSet<VwCcwmconsCompprct1> VwCcwmconsCompprct1s { get; set; }

    public virtual DbSet<VwCcwmonthConsComp> VwCcwmonthConsComps { get; set; }

    public virtual DbSet<VwCcwmonthConsComp1> VwCcwmonthConsComp1s { get; set; }

    public virtual DbSet<VwCcwmonthConsComptotal> VwCcwmonthConsComptotals { get; set; }

    public virtual DbSet<VwCcwpendingPi> VwCcwpendingPis { get; set; }

    public virtual DbSet<VwCcwsummery> VwCcwsummeries { get; set; }

    public virtual DbSet<VwCcwtwoMonthComp> VwCcwtwoMonthComps { get; set; }

    public virtual DbSet<VwCheckBookSubsegment> VwCheckBookSubsegments { get; set; }

    public virtual DbSet<VwChequeInHandManagement> VwChequeInHandManagements { get; set; }

    public virtual DbSet<VwChequebookRegistrationMain> VwChequebookRegistrationMains { get; set; }

    public virtual DbSet<VwChequebookRegistrationReport> VwChequebookRegistrationReports { get; set; }

    public virtual DbSet<VwChequesClearing> VwChequesClearings { get; set; }

    public virtual DbSet<VwChequesClearingDetail> VwChequesClearingDetails { get; set; }

    public virtual DbSet<VwChequesClearingMainDetail> VwChequesClearingMainDetails { get; set; }

    public virtual DbSet<VwCnfrmtionPyment> VwCnfrmtionPyments { get; set; }

    public virtual DbSet<VwCnfrmtionPymentDetail> VwCnfrmtionPymentDetails { get; set; }

    public virtual DbSet<VwCommissionDetail> VwCommissionDetails { get; set; }

    public virtual DbSet<VwCommissionPayment> VwCommissionPayments { get; set; }

    public virtual DbSet<VwCommissionPaymentBooking> VwCommissionPaymentBookings { get; set; }

    public virtual DbSet<VwCommissionPaymentOnAccount> VwCommissionPaymentOnAccounts { get; set; }

    public virtual DbSet<VwCommissionReport> VwCommissionReports { get; set; }

    public virtual DbSet<VwCompanySetup> VwCompanySetups { get; set; }

    public virtual DbSet<VwConfirmationPayment> VwConfirmationPayments { get; set; }

    public virtual DbSet<VwConfirmationReceipt> VwConfirmationReceipts { get; set; }

    public virtual DbSet<VwConfirmationReceiptsDelivery> VwConfirmationReceiptsDeliveries { get; set; }

    public virtual DbSet<VwContract> VwContracts { get; set; }

    public virtual DbSet<VwContractInventory> VwContractInventories { get; set; }

    public virtual DbSet<VwContractPayment> VwContractPayments { get; set; }

    public virtual DbSet<VwCostCentreDet> VwCostCentreDets { get; set; }

    public virtual DbSet<VwCrcancellation> VwCrcancellations { get; set; }

    public virtual DbSet<VwCurrentItemRate> VwCurrentItemRates { get; set; }

    public virtual DbSet<VwCustomerRateList> VwCustomerRateLists { get; set; }

    public virtual DbSet<VwCustomerReceipt> VwCustomerReceipts { get; set; }

    public virtual DbSet<VwCustomerReceiptPrint> VwCustomerReceiptPrints { get; set; }

    public virtual DbSet<VwCustomerWiseRateListDetail> VwCustomerWiseRateListDetails { get; set; }

    public virtual DbSet<VwCylinderReconciliation> VwCylinderReconciliations { get; set; }

    public virtual DbSet<VwCylinderRegistration> VwCylinderRegistrations { get; set; }

    public virtual DbSet<VwDailyTankStatusMaster> VwDailyTankStatusMasters { get; set; }

    public virtual DbSet<VwDailyTankStatusReport> VwDailyTankStatusReports { get; set; }

    public virtual DbSet<VwDamagedStock> VwDamagedStocks { get; set; }

    public virtual DbSet<VwDeadItem> VwDeadItems { get; set; }

    public virtual DbSet<VwDealPurchase> VwDealPurchases { get; set; }

    public virtual DbSet<VwDealPurchaseDetail> VwDealPurchaseDetails { get; set; }

    public virtual DbSet<VwDealPurchaseDetailActual> VwDealPurchaseDetailActuals { get; set; }

    public virtual DbSet<VwDealPurchaseModified> VwDealPurchaseModifieds { get; set; }

    public virtual DbSet<VwDealPurchaseModifiedDetail> VwDealPurchaseModifiedDetails { get; set; }

    public virtual DbSet<VwDealPurchasedDetailNew> VwDealPurchasedDetailNews { get; set; }

    public virtual DbSet<VwDealerQuotaDetail> VwDealerQuotaDetails { get; set; }

    public virtual DbSet<VwDealerQuotum> VwDealerQuota { get; set; }

    public virtual DbSet<VwDecantingReport> VwDecantingReports { get; set; }

    public virtual DbSet<VwDeliveryDispatch> VwDeliveryDispatches { get; set; }

    public virtual DbSet<VwDeliveryOrderMainDetail> VwDeliveryOrderMainDetails { get; set; }

    public virtual DbSet<VwDeliveryOrderReturnDetails1> VwDeliveryOrderReturnDetails1s { get; set; }

    public virtual DbSet<VwDepositedDetail> VwDepositedDetails { get; set; }

    public virtual DbSet<VwDepositedMain> VwDepositedMains { get; set; }

    public virtual DbSet<VwDepositedMasterDetail> VwDepositedMasterDetails { get; set; }

    public virtual DbSet<VwDepreciation> VwDepreciations { get; set; }

    public virtual DbSet<VwDepreciationDetail> VwDepreciationDetails { get; set; }

    public virtual DbSet<VwDetail> VwDetails { get; set; }

    public virtual DbSet<VwDetail1> VwDetails1 { get; set; }

    public virtual DbSet<VwDetailNew> VwDetailNews { get; set; }

    public virtual DbSet<VwDetailPnr> VwDetailPnrs { get; set; }

    public virtual DbSet<VwDiscountMainDetail> VwDiscountMainDetails { get; set; }

    public virtual DbSet<VwDiscountPolicyBusinessPartnerDetail> VwDiscountPolicyBusinessPartnerDetails { get; set; }

    public virtual DbSet<VwDiscountPolicyMainDetail> VwDiscountPolicyMainDetails { get; set; }

    public virtual DbSet<VwDiscountPolicyRegistration> VwDiscountPolicyRegistrations { get; set; }

    public virtual DbSet<VwDiscountPolicyRegistrationDetail> VwDiscountPolicyRegistrationDetails { get; set; }

    public virtual DbSet<VwDiscountPosting> VwDiscountPostings { get; set; }

    public virtual DbSet<VwDiscountPostingDetail> VwDiscountPostingDetails { get; set; }

    public virtual DbSet<VwDiscountPostingMainDetail> VwDiscountPostingMainDetails { get; set; }

    public virtual DbSet<VwDispatchMasterDetail> VwDispatchMasterDetails { get; set; }

    public virtual DbSet<VwDocashSale> VwDocashSales { get; set; }

    public virtual DbSet<VwDomaster> VwDomasters { get; set; }

    public virtual DbSet<VwDomasterReturn> VwDomasterReturns { get; set; }

    public virtual DbSet<VwDoparty> VwDoparties { get; set; }

    public virtual DbSet<VwDopartyReturn> VwDopartyReturns { get; set; }

    public virtual DbSet<VwDoreturnIp> VwDoreturnIps { get; set; }

    public virtual DbSet<VwDosalesComparison> VwDosalesComparisons { get; set; }

    public virtual DbSet<VwDosubSegment> VwDosubSegments { get; set; }

    public virtual DbSet<VwDosubSegmentOld> VwDosubSegmentOlds { get; set; }

    public virtual DbSet<VwDosubSegmentforIp> VwDosubSegmentforIps { get; set; }

    public virtual DbSet<VwDowarehouse> VwDowarehouses { get; set; }

    public virtual DbSet<VwEcrReport> VwEcrReports { get; set; }

    public virtual DbSet<VwEdataBookingForm> VwEdataBookingForms { get; set; }

    public virtual DbSet<VwEditlistingNew> VwEditlistingNews { get; set; }

    public virtual DbSet<VwEmailCompaign> VwEmailCompaigns { get; set; }

    public virtual DbSet<VwEmailCompaignDetailBookingForm> VwEmailCompaignDetailBookingForms { get; set; }

    public virtual DbSet<VwEmailCompaignDetailLead> VwEmailCompaignDetailLeads { get; set; }

    public virtual DbSet<VwEmailCompaignDetailProjectSale> VwEmailCompaignDetailProjectSales { get; set; }

    public virtual DbSet<VwEmployeeAttendanceDetail> VwEmployeeAttendanceDetails { get; set; }

    public virtual DbSet<VwEmployeeAttendanceDetailZkt> VwEmployeeAttendanceDetailZkts { get; set; }

    public virtual DbSet<VwEmployeeBalance> VwEmployeeBalances { get; set; }

    public virtual DbSet<VwEmployeeBenifit> VwEmployeeBenifits { get; set; }

    public virtual DbSet<VwEmployeeBenifitDetail> VwEmployeeBenifitDetails { get; set; }

    public virtual DbSet<VwEmployeeFingerPrintDetail> VwEmployeeFingerPrintDetails { get; set; }

    public virtual DbSet<VwEmployeeOfMonth> VwEmployeeOfMonths { get; set; }

    public virtual DbSet<VwEmployeeRegistration> VwEmployeeRegistrations { get; set; }

    public virtual DbSet<VwEmployeeRegistrationAssignmentPortable> VwEmployeeRegistrationAssignmentPortables { get; set; }

    public virtual DbSet<VwEmployeeRegistrationAssignmentTadum> VwEmployeeRegistrationAssignmentTada { get; set; }

    public virtual DbSet<VwEmployeeRegistrationAssignmentVehicle> VwEmployeeRegistrationAssignmentVehicles { get; set; }

    public virtual DbSet<VwEmployeeRegistrationJobDescription> VwEmployeeRegistrationJobDescriptions { get; set; }

    public virtual DbSet<VwEmployeeResgistrationDesignation> VwEmployeeResgistrationDesignations { get; set; }

    public virtual DbSet<VwEmployeeResgistrationLeaveManagement> VwEmployeeResgistrationLeaveManagements { get; set; }

    public virtual DbSet<VwEmployeeResgistrationSalaryDetail> VwEmployeeResgistrationSalaryDetails { get; set; }

    public virtual DbSet<VwEmployeeVoucherDetail> VwEmployeeVoucherDetails { get; set; }

    public virtual DbSet<VwFacebookLead> VwFacebookLeads { get; set; }

    public virtual DbSet<VwFaq> VwFaqs { get; set; }

    public virtual DbSet<VwFileDeliveryConfirmation> VwFileDeliveryConfirmations { get; set; }

    public virtual DbSet<VwFileInventory> VwFileInventories { get; set; }

    public virtual DbSet<VwFileInventoryDetail> VwFileInventoryDetails { get; set; }

    public virtual DbSet<VwFileInventoryReport> VwFileInventoryReports { get; set; }

    public virtual DbSet<VwFilePurchasing> VwFilePurchasings { get; set; }

    public virtual DbSet<VwFilePurchasingDetail> VwFilePurchasingDetails { get; set; }

    public virtual DbSet<VwFileReceiving> VwFileReceivings { get; set; }

    public virtual DbSet<VwFileSale> VwFileSales { get; set; }

    public virtual DbSet<VwFileSalesDetail> VwFileSalesDetails { get; set; }

    public virtual DbSet<VwFileTradingReport> VwFileTradingReports { get; set; }

    public virtual DbSet<VwFollowupDetail> VwFollowupDetails { get; set; }

    public virtual DbSet<VwFormsIssuance> VwFormsIssuances { get; set; }

    public virtual DbSet<VwFormsIssuanceDetail> VwFormsIssuanceDetails { get; set; }

    public virtual DbSet<VwFormsReceiving> VwFormsReceivings { get; set; }

    public virtual DbSet<VwFormsReceivingDetail> VwFormsReceivingDetails { get; set; }

    public virtual DbSet<VwFormsReturn> VwFormsReturns { get; set; }

    public virtual DbSet<VwFormsReturnDetail> VwFormsReturnDetails { get; set; }

    public virtual DbSet<VwGeneralLedger> VwGeneralLedgers { get; set; }

    public virtual DbSet<VwGeneralLedgerSubSegmentWise> VwGeneralLedgerSubSegmentWises { get; set; }

    public virtual DbSet<VwGetConfirmationPayement> VwGetConfirmationPayements { get; set; }

    public virtual DbSet<VwGetSocietyInstallment> VwGetSocietyInstallments { get; set; }

    public virtual DbSet<VwGlAllCode> VwGlAllCodes { get; set; }

    public virtual DbSet<VwGlreceipt> VwGlreceipts { get; set; }

    public virtual DbSet<VwGrnapproval> VwGrnapprovals { get; set; }

    public virtual DbSet<VwGrncomparison> VwGrncomparisons { get; set; }

    public virtual DbSet<VwGrnmasterDatum> VwGrnmasterData { get; set; }

    public virtual DbSet<VwGrnmasterDetail> VwGrnmasterDetails { get; set; }

    public virtual DbSet<VwGrnmasterDetailForDatum> VwGrnmasterDetailForData { get; set; }

    public virtual DbSet<VwGrnmasterDetailNew> VwGrnmasterDetailNews { get; set; }

    public virtual DbSet<VwGrnrate> VwGrnrates { get; set; }

    public virtual DbSet<VwGrnreturnDetail> VwGrnreturnDetails { get; set; }

    public virtual DbSet<VwGrnreturnMaster> VwGrnreturnMasters { get; set; }

    public virtual DbSet<VwGrnreturnMasterDetail> VwGrnreturnMasterDetails { get; set; }

    public virtual DbSet<VwGrnsubSegment> VwGrnsubSegments { get; set; }

    public virtual DbSet<VwGrnwithIgp> VwGrnwithIgps { get; set; }

    public virtual DbSet<VwIgpdetail> VwIgpdetails { get; set; }

    public virtual DbSet<VwIgpmaster> VwIgpmasters { get; set; }

    public virtual DbSet<VwIgpmasterDetail> VwIgpmasterDetails { get; set; }

    public virtual DbSet<VwIgpmasterSubSegment> VwIgpmasterSubSegments { get; set; }

    public virtual DbSet<VwIgpstandered> VwIgpstandereds { get; set; }

    public virtual DbSet<VwIgpsubSegment> VwIgpsubSegments { get; set; }

    public virtual DbSet<VwInBoundInventoryDetail> VwInBoundInventoryDetails { get; set; }

    public virtual DbSet<VwInboundInventory> VwInboundInventories { get; set; }

    public virtual DbSet<VwIncentiveManagementInvoice> VwIncentiveManagementInvoices { get; set; }

    public virtual DbSet<VwIncentiveManagementInvoiceDetail> VwIncentiveManagementInvoiceDetails { get; set; }

    public virtual DbSet<VwInstallmentPlan> VwInstallmentPlans { get; set; }

    public virtual DbSet<VwInstallmentPlanDetail> VwInstallmentPlanDetails { get; set; }

    public virtual DbSet<VwInstallmentPlanNew> VwInstallmentPlanNews { get; set; }

    public virtual DbSet<VwInstallmentReceipt> VwInstallmentReceipts { get; set; }

    public virtual DbSet<VwInstallmentReceiptDelivery> VwInstallmentReceiptDeliveries { get; set; }

    public virtual DbSet<VwInstrument> VwInstruments { get; set; }

    public virtual DbSet<VwInstrumentInOut> VwInstrumentInOuts { get; set; }

    public virtual DbSet<VwInterBankTransferDetail> VwInterBankTransferDetails { get; set; }

    public virtual DbSet<VwInterBankTransferMain> VwInterBankTransferMains { get; set; }

    public virtual DbSet<VwInventoryConsumption> VwInventoryConsumptions { get; set; }

    public virtual DbSet<VwInventoryMasterDetail> VwInventoryMasterDetails { get; set; }

    public virtual DbSet<VwInventoryPending> VwInventoryPendings { get; set; }

    public virtual DbSet<VwInvestmentReturn> VwInvestmentReturns { get; set; }

    public virtual DbSet<VwInvestorDetail> VwInvestorDetails { get; set; }

    public virtual DbSet<VwInvestorRegistration> VwInvestorRegistrations { get; set; }

    public virtual DbSet<VwIpPurchase> VwIpPurchases { get; set; }

    public virtual DbSet<VwIppurchasingForPayment> VwIppurchasingForPayments { get; set; }

    public virtual DbSet<VwIpsalesMasterDetail> VwIpsalesMasterDetails { get; set; }

    public virtual DbSet<VwIpsubSegment> VwIpsubSegments { get; set; }

    public virtual DbSet<VwIssueOpeningQty> VwIssueOpeningQties { get; set; }

    public virtual DbSet<VwIssueRunningQty> VwIssueRunningQties { get; set; }

    public virtual DbSet<VwItem> VwItems { get; set; }

    public virtual DbSet<VwItemBom> VwItemBoms { get; set; }

    public virtual DbSet<VwItemBom1> VwItemBoms1 { get; set; }

    public virtual DbSet<VwItemBom2> VwItemBoms2 { get; set; }

    public virtual DbSet<VwItemBoqplan> VwItemBoqplans { get; set; }

    public virtual DbSet<VwItemBoqplanDetail> VwItemBoqplanDetails { get; set; }

    public virtual DbSet<VwItemCcwcomp> VwItemCcwcomps { get; set; }

    public virtual DbSet<VwItemCodeAll> VwItemCodeAlls { get; set; }

    public virtual DbSet<VwItemConsRate> VwItemConsRates { get; set; }

    public virtual DbSet<VwItemConsRate1> VwItemConsRate1s { get; set; }

    public virtual DbSet<VwItemConsRate2> VwItemConsRate2s { get; set; }

    public virtual DbSet<VwItemFinalQty> VwItemFinalQties { get; set; }

    public virtual DbSet<VwItemLedger> VwItemLedgers { get; set; }

    public virtual DbSet<VwItemMaster> VwItemMasters { get; set; }

    public virtual DbSet<VwItemMonthConsComp> VwItemMonthConsComps { get; set; }

    public virtual DbSet<VwItemOpeningQty> VwItemOpeningQties { get; set; }

    public virtual DbSet<VwItemPurchaseRate> VwItemPurchaseRates { get; set; }

    public virtual DbSet<VwItemPurchaseRate1> VwItemPurchaseRate1s { get; set; }

    public virtual DbSet<VwItemPurchaseRate2> VwItemPurchaseRate2s { get; set; }

    public virtual DbSet<VwItemPurchaseRateAll> VwItemPurchaseRateAlls { get; set; }

    public virtual DbSet<VwItemPurchaseRateAll1> VwItemPurchaseRateAll1s { get; set; }

    public virtual DbSet<VwItemPurchaseRateAll2> VwItemPurchaseRateAll2s { get; set; }

    public virtual DbSet<VwItemRate> VwItemRates { get; set; }

    public virtual DbSet<VwItemRate1> VwItemRate1s { get; set; }

    public virtual DbSet<VwItemRateHist> VwItemRateHists { get; set; }

    public virtual DbSet<VwItemRateHistView> VwItemRateHistViews { get; set; }

    public virtual DbSet<VwItemReconcilation> VwItemReconcilations { get; set; }

    public virtual DbSet<VwItemReconciliation> VwItemReconciliations { get; set; }

    public virtual DbSet<VwItemReconciliationGroupWise> VwItemReconciliationGroupWises { get; set; }

    public virtual DbSet<VwItemRunningQty> VwItemRunningQties { get; set; }

    public virtual DbSet<VwItemUom> VwItemUoms { get; set; }

    public virtual DbSet<VwItemUomsubSegment> VwItemUomsubSegments { get; set; }

    public virtual DbSet<VwItemWarehouseNew> VwItemWarehouseNews { get; set; }

    public virtual DbSet<VwItemWiseConsSum> VwItemWiseConsSums { get; set; }

    public virtual DbSet<VwItemWridetail> VwItemWridetails { get; set; }

    public virtual DbSet<VwItemchart> VwItemcharts { get; set; }

    public virtual DbSet<VwItemledger1> VwItemledgers1 { get; set; }

    public virtual DbSet<VwItemwarehouse> VwItemwarehouses { get; set; }

    public virtual DbSet<VwJobOrder> VwJobOrders { get; set; }

    public virtual DbSet<VwJobOrderSubSegment> VwJobOrderSubSegments { get; set; }

    public virtual DbSet<VwJoborderDriverLoader> VwJoborderDriverLoaders { get; set; }

    public virtual DbSet<VwLatePaymentCharge> VwLatePaymentCharges { get; set; }

    public virtual DbSet<VwLatePaymentChargesDetail> VwLatePaymentChargesDetails { get; set; }

    public virtual DbSet<VwLcCfLandedCost> VwLcCfLandedCosts { get; set; }

    public virtual DbSet<VwLcLandedCost1> VwLcLandedCosts1 { get; set; }

    public virtual DbSet<VwLcwithPo> VwLcwithPos { get; set; }

    public virtual DbSet<VwLead> VwLeads { get; set; }

    public virtual DbSet<VwLeaderUser> VwLeaderUsers { get; set; }

    public virtual DbSet<VwLeadsActivitySummary> VwLeadsActivitySummaries { get; set; }

    public virtual DbSet<VwLeadsAssignmentSetup> VwLeadsAssignmentSetups { get; set; }

    public virtual DbSet<VwLeadsAssignmentSetupDetail> VwLeadsAssignmentSetupDetails { get; set; }

    public virtual DbSet<VwLeadsHisotry> VwLeadsHisotries { get; set; }

    public virtual DbSet<VwLeaveApplication> VwLeaveApplications { get; set; }

    public virtual DbSet<VwLeaveApplicationDetail> VwLeaveApplicationDetails { get; set; }

    public virtual DbSet<VwLeaveRulesSubSegment> VwLeaveRulesSubSegments { get; set; }

    public virtual DbSet<VwLedgOpening> VwLedgOpenings { get; set; }

    public virtual DbSet<VwLoanAndAdvance> VwLoanAndAdvances { get; set; }

    public virtual DbSet<VwLoanAndAdvanceDeductionMainDetail> VwLoanAndAdvanceDeductionMainDetails { get; set; }

    public virtual DbSet<VwLoanAndAdvanceDeductionSetupDetail> VwLoanAndAdvanceDeductionSetupDetails { get; set; }

    public virtual DbSet<VwLoanAndAdvanceDeductionSubSegment> VwLoanAndAdvanceDeductionSubSegments { get; set; }

    public virtual DbSet<VwLoanAndAdvancesDeductionRule> VwLoanAndAdvancesDeductionRules { get; set; }

    public virtual DbSet<VwLoanAndAdvancesDeductionRulesDetail> VwLoanAndAdvancesDeductionRulesDetails { get; set; }

    public virtual DbSet<VwLoanAndAdvancesSetup> VwLoanAndAdvancesSetups { get; set; }

    public virtual DbSet<VwLoansAndAdvanceSetup> VwLoansAndAdvanceSetups { get; set; }

    public virtual DbSet<VwMainStoreOpening> VwMainStoreOpenings { get; set; }

    public virtual DbSet<VwMainStoreOpeningall> VwMainStoreOpeningalls { get; set; }

    public virtual DbSet<VwMainStoreYearOpening> VwMainStoreYearOpenings { get; set; }

    public virtual DbSet<VwMappingLeadsVsBooking> VwMappingLeadsVsBookings { get; set; }

    public virtual DbSet<VwMaster> VwMasters { get; set; }

    public virtual DbSet<VwMasterNew> VwMasterNews { get; set; }

    public virtual DbSet<VwMaxRate> VwMaxRates { get; set; }

    public virtual DbSet<VwMaxRateHist> VwMaxRateHists { get; set; }

    public virtual DbSet<VwMaxRateHistory> VwMaxRateHistories { get; set; }

    public virtual DbSet<VwMchWmonthComp> VwMchWmonthComps { get; set; }

    public virtual DbSet<VwMchWmonthComp1> VwMchWmonthComp1s { get; set; }

    public virtual DbSet<VwMchconsSum> VwMchconsSums { get; set; }

    public virtual DbSet<VwMchitemWisSum> VwMchitemWisSums { get; set; }

    public virtual DbSet<VwMchwisSum> VwMchwisSums { get; set; }

    public virtual DbSet<VwMinMaxRateHist> VwMinMaxRateHists { get; set; }

    public virtual DbSet<VwMinMaxRateHistory> VwMinMaxRateHistories { get; set; }

    public virtual DbSet<VwMinRate> VwMinRates { get; set; }

    public virtual DbSet<VwMinRateHist> VwMinRateHists { get; set; }

    public virtual DbSet<VwMinRateHistory> VwMinRateHistories { get; set; }

    public virtual DbSet<VwMisDailyStsum> VwMisDailyStsums { get; set; }

    public virtual DbSet<VwMisDailyStsum1> VwMisDailyStsum1s { get; set; }

    public virtual DbSet<VwMisDailyStsum1Oth> VwMisDailyStsum1Oths { get; set; }

    public virtual DbSet<VwMisOverStock> VwMisOverStocks { get; set; }

    public virtual DbSet<VwMisOverStock1> VwMisOverStock1s { get; set; }

    public virtual DbSet<VwMisStockSum> VwMisStockSums { get; set; }

    public virtual DbSet<VwMisStockSum1> VwMisStockSum1s { get; set; }

    public virtual DbSet<VwMonth1> VwMonth1s { get; set; }

    public virtual DbSet<VwMonth2> VwMonth2s { get; set; }

    public virtual DbSet<VwMonthCon> VwMonthCons { get; set; }

    public virtual DbSet<VwNewOpportunity> VwNewOpportunities { get; set; }

    public virtual DbSet<VwOfferForSale> VwOfferForSales { get; set; }

    public virtual DbSet<VwOnlineBooking> VwOnlineBookings { get; set; }

    public virtual DbSet<VwOpenTrading> VwOpenTradings { get; set; }

    public virtual DbSet<VwOpenTradingDetail> VwOpenTradingDetails { get; set; }

    public virtual DbSet<VwOutstandingChartBp> VwOutstandingChartBps { get; set; }

    public virtual DbSet<VwOverConsumption> VwOverConsumptions { get; set; }

    public virtual DbSet<VwPartialAdjustment> VwPartialAdjustments { get; set; }

    public virtual DbSet<VwPartialAdjustmentPaymentDetail> VwPartialAdjustmentPaymentDetails { get; set; }

    public virtual DbSet<VwPartialAdjustmentReceiptDetail> VwPartialAdjustmentReceiptDetails { get; set; }

    public virtual DbSet<VwPartialReceipt> VwPartialReceipts { get; set; }

    public virtual DbSet<VwPartyAging> VwPartyAgings { get; set; }

    public virtual DbSet<VwPartyDetail> VwPartyDetails { get; set; }

    public virtual DbSet<VwPartyDetail1> VwPartyDetails1 { get; set; }

    public virtual DbSet<VwPartyDetailCashPayment> VwPartyDetailCashPayments { get; set; }

    public virtual DbSet<VwPartyPayment> VwPartyPayments { get; set; }

    public virtual DbSet<VwPartyPaymentCheque> VwPartyPaymentCheques { get; set; }

    public virtual DbSet<VwPartyPaymentDetail> VwPartyPaymentDetails { get; set; }

    public virtual DbSet<VwPartyPaymentMainDetail> VwPartyPaymentMainDetails { get; set; }

    public virtual DbSet<VwPartyPaymentMasterDetail> VwPartyPaymentMasterDetails { get; set; }

    public virtual DbSet<VwPartyPaymentSecurity> VwPartyPaymentSecurities { get; set; }

    public virtual DbSet<VwPartySecurity> VwPartySecurities { get; set; }

    public virtual DbSet<VwPartyVoucher> VwPartyVouchers { get; set; }

    public virtual DbSet<VwPartyVoucherDetail> VwPartyVoucherDetails { get; set; }

    public virtual DbSet<VwPaymentPlan> VwPaymentPlans { get; set; }

    public virtual DbSet<VwPaymentPlanReport> VwPaymentPlanReports { get; set; }

    public virtual DbSet<VwPaymentVoucher> VwPaymentVouchers { get; set; }

    public virtual DbSet<VwPendingDeliveryOrder> VwPendingDeliveryOrders { get; set; }

    public virtual DbSet<VwPendingFollowup> VwPendingFollowups { get; set; }

    public virtual DbSet<VwPendingGrn> VwPendingGrns { get; set; }

    public virtual DbSet<VwPendingGrnnew> VwPendingGrnnews { get; set; }

    public virtual DbSet<VwPendingIgp> VwPendingIgps { get; set; }

    public virtual DbSet<VwPendingIp> VwPendingIps { get; set; }

    public virtual DbSet<VwPendingIpPurchase> VwPendingIpPurchases { get; set; }

    public virtual DbSet<VwPendingJobOrder> VwPendingJobOrders { get; set; }

    public virtual DbSet<VwPendingJobOrderWh> VwPendingJobOrderWhs { get; set; }

    public virtual DbSet<VwPendingLead> VwPendingLeads { get; set; }

    public virtual DbSet<VwPendingLeadsNew> VwPendingLeadsNews { get; set; }

    public virtual DbSet<VwPendingPo> VwPendingPos { get; set; }

    public virtual DbSet<VwPendingPonew> VwPendingPonews { get; set; }

    public virtual DbSet<VwPendingRecovry> VwPendingRecovries { get; set; }

    public virtual DbSet<VwPendingSaleOrder> VwPendingSaleOrders { get; set; }

    public virtual DbSet<VwPendingSalesOrderReport> VwPendingSalesOrderReports { get; set; }

    public virtual DbSet<VwPendingVoucher> VwPendingVouchers { get; set; }

    public virtual DbSet<VwPl> VwPls { get; set; }

    public virtual DbSet<VwPl12month> VwPl12months { get; set; }

    public virtual DbSet<VwPlfor> VwPlfors { get; set; }

    public virtual DbSet<VwPlforprev> VwPlforprevs { get; set; }

    public virtual DbSet<VwPlnote> VwPlnotes { get; set; }

    public virtual DbSet<VwPlnotes2> VwPlnotes2s { get; set; }

    public virtual DbSet<VwPlnotesComplete> VwPlnotesCompletes { get; set; }

    public virtual DbSet<VwPlotAllocationReceipt> VwPlotAllocationReceipts { get; set; }

    public virtual DbSet<VwPlotAllocationReceiptDelivery> VwPlotAllocationReceiptDeliveries { get; set; }

    public virtual DbSet<VwPlupto> VwPluptos { get; set; }

    public virtual DbSet<VwPluptocomplete> VwPluptocompletes { get; set; }

    public virtual DbSet<VwPocomparison> VwPocomparisons { get; set; }

    public virtual DbSet<VwPomasterDetail> VwPomasterDetails { get; set; }

    public virtual DbSet<VwPostDatedCheq> VwPostDatedCheqs { get; set; }

    public virtual DbSet<VwPostVoucher> VwPostVouchers { get; set; }

    public virtual DbSet<VwPosubSegment> VwPosubSegments { get; set; }

    public virtual DbSet<VwPreviousTankStatus> VwPreviousTankStatuses { get; set; }

    public virtual DbSet<VwPriceList> VwPriceLists { get; set; }

    public virtual DbSet<VwPriceListDetail> VwPriceListDetails { get; set; }

    public virtual DbSet<VwPriorityQueue> VwPriorityQueues { get; set; }

    public virtual DbSet<VwProductPricingPurchase> VwProductPricingPurchases { get; set; }

    public virtual DbSet<VwProjectExchange> VwProjectExchanges { get; set; }

    public virtual DbSet<VwProjectExchangeFingerPrint> VwProjectExchangeFingerPrints { get; set; }

    public virtual DbSet<VwProjectInventory> VwProjectInventories { get; set; }

    public virtual DbSet<VwProjectInventoryDetail> VwProjectInventoryDetails { get; set; }

    public virtual DbSet<VwProjectInventoryDetailNew> VwProjectInventoryDetailNews { get; set; }

    public virtual DbSet<VwProjectReschedule> VwProjectReschedules { get; set; }

    public virtual DbSet<VwProjectReversal> VwProjectReversals { get; set; }

    public virtual DbSet<VwProjectSale> VwProjectSales { get; set; }

    public virtual DbSet<VwProjectSaleCrd> VwProjectSaleCrds { get; set; }

    public virtual DbSet<VwProjectSaleDetail> VwProjectSaleDetails { get; set; }

    public virtual DbSet<VwProjectSaleDetailPaymentPlan> VwProjectSaleDetailPaymentPlans { get; set; }

    public virtual DbSet<VwProjectSaleFileDelivery> VwProjectSaleFileDeliveries { get; set; }

    public virtual DbSet<VwProjectSaleFingerPrint> VwProjectSaleFingerPrints { get; set; }

    public virtual DbSet<VwProjectSalePcd> VwProjectSalePcds { get; set; }

    public virtual DbSet<VwProjectSaleReceiptsDelivery> VwProjectSaleReceiptsDeliveries { get; set; }

    public virtual DbSet<VwProjectSaleTransfer> VwProjectSaleTransfers { get; set; }

    public virtual DbSet<VwProjectTransfer> VwProjectTransfers { get; set; }

    public virtual DbSet<VwProjectTransferFingerPrint> VwProjectTransferFingerPrints { get; set; }

    public virtual DbSet<VwProjectTransferReport> VwProjectTransferReports { get; set; }

    public virtual DbSet<VwProjectWiseGl> VwProjectWiseGls { get; set; }

    public virtual DbSet<VwProvisionalSalePurchase> VwProvisionalSalePurchases { get; set; }

    public virtual DbSet<VwPsdetail> VwPsdetails { get; set; }

    public virtual DbSet<VwPurchaseDiscountBpReport> VwPurchaseDiscountBpReports { get; set; }

    public virtual DbSet<VwPurchaseDiscountMasterDetail> VwPurchaseDiscountMasterDetails { get; set; }

    public virtual DbSet<VwPurchaseDiscountsBpDetail> VwPurchaseDiscountsBpDetails { get; set; }

    public virtual DbSet<VwPurchaseDiscountsBpMain> VwPurchaseDiscountsBpMains { get; set; }

    public virtual DbSet<VwPurchaseOpeningQty> VwPurchaseOpeningQties { get; set; }

    public virtual DbSet<VwPurchasePartyWise> VwPurchasePartyWises { get; set; }

    public virtual DbSet<VwPurchasePartyWiseSumm> VwPurchasePartyWiseSumms { get; set; }

    public virtual DbSet<VwPurchaseRate> VwPurchaseRates { get; set; }

    public virtual DbSet<VwPurchaseRatesDetail> VwPurchaseRatesDetails { get; set; }

    public virtual DbSet<VwPurchaseRatesMasterDetail> VwPurchaseRatesMasterDetails { get; set; }

    public virtual DbSet<VwPurchaseRatesSubSegmentsDetail> VwPurchaseRatesSubSegmentsDetails { get; set; }

    public virtual DbSet<VwPurchaseRunningQty> VwPurchaseRunningQties { get; set; }

    public virtual DbSet<VwQtyInStock> VwQtyInStocks { get; set; }

    public virtual DbSet<VwQuantativeSale> VwQuantativeSales { get; set; }

    public virtual DbSet<VwQueryForPurchase> VwQueryForPurchases { get; set; }

    public virtual DbSet<VwQuotaAllocation> VwQuotaAllocations { get; set; }

    public virtual DbSet<VwQuotaAllocationDetail> VwQuotaAllocationDetails { get; set; }

    public virtual DbSet<VwQuotaAllocationModified> VwQuotaAllocationModifieds { get; set; }

    public virtual DbSet<VwQuotaAllocationModifiedDetail> VwQuotaAllocationModifiedDetails { get; set; }

    public virtual DbSet<VwQuotaFile> VwQuotaFiles { get; set; }

    public virtual DbSet<VwQuotationBusinessPartner> VwQuotationBusinessPartners { get; set; }

    public virtual DbSet<VwQuotationDetail> VwQuotationDetails { get; set; }

    public virtual DbSet<VwQuotationMasterDetail> VwQuotationMasterDetails { get; set; }

    public virtual DbSet<VwQuotationSubSegment> VwQuotationSubSegments { get; set; }

    public virtual DbSet<VwRawMaterialIssuanceDetail> VwRawMaterialIssuanceDetails { get; set; }

    public virtual DbSet<VwRawMaterialIssuanceMaster> VwRawMaterialIssuanceMasters { get; set; }

    public virtual DbSet<VwRawMaterialIssuanceMasterDetail> VwRawMaterialIssuanceMasterDetails { get; set; }

    public virtual DbSet<VwRawMaterialIssuanceReport> VwRawMaterialIssuanceReports { get; set; }

    public virtual DbSet<VwRawMaterialReturnDetail> VwRawMaterialReturnDetails { get; set; }

    public virtual DbSet<VwRawMaterialReturnMaster> VwRawMaterialReturnMasters { get; set; }

    public virtual DbSet<VwRcptItemWiseDet> VwRcptItemWiseDets { get; set; }

    public virtual DbSet<VwRcptItemWiseSum> VwRcptItemWiseSums { get; set; }

    public virtual DbSet<VwRcptMonthComp> VwRcptMonthComps { get; set; }

    public virtual DbSet<VwRcptMonthComp1> VwRcptMonthComp1s { get; set; }

    public virtual DbSet<VwRebateDefinition> VwRebateDefinitions { get; set; }

    public virtual DbSet<VwRebateDefinitionDetail> VwRebateDefinitionDetails { get; set; }

    public virtual DbSet<VwReceiptMain> VwReceiptMains { get; set; }

    public virtual DbSet<VwReceiptMasterDetail> VwReceiptMasterDetails { get; set; }

    public virtual DbSet<VwReceiptSecurity> VwReceiptSecurities { get; set; }

    public virtual DbSet<VwReceiptsDelivery> VwReceiptsDeliveries { get; set; }

    public virtual DbSet<VwReceiptsMasterDetail> VwReceiptsMasterDetails { get; set; }

    public virtual DbSet<VwRecoveryAlert> VwRecoveryAlerts { get; set; }

    public virtual DbSet<VwRegionRight> VwRegionRights { get; set; }

    public virtual DbSet<VwRegionRightsDetail> VwRegionRightsDetails { get; set; }

    public virtual DbSet<VwRental> VwRentals { get; set; }

    public virtual DbSet<VwRentalStructure> VwRentalStructures { get; set; }

    public virtual DbSet<VwRequisition> VwRequisitions { get; set; }

    public virtual DbSet<VwRequisition1> VwRequisitions1 { get; set; }

    public virtual DbSet<VwRequisitionDetail> VwRequisitionDetails { get; set; }

    public virtual DbSet<VwRequisitionReport> VwRequisitionReports { get; set; }

    public virtual DbSet<VwRiswtran> VwRiswtrans { get; set; }

    public virtual DbSet<VwRiswtransStSum> VwRiswtransStSums { get; set; }

    public virtual DbSet<VwRiwmonthComp> VwRiwmonthComps { get; set; }

    public virtual DbSet<VwRiwyearComp> VwRiwyearComps { get; set; }

    public virtual DbSet<VwRouteRegistration> VwRouteRegistrations { get; set; }

    public virtual DbSet<VwRptPidateWise> VwRptPidateWises { get; set; }

    public virtual DbSet<VwRptPipurchase> VwRptPipurchases { get; set; }

    public virtual DbSet<VwRrwiseRcpt> VwRrwiseRcpts { get; set; }

    public virtual DbSet<VwSalaryDispersement> VwSalaryDispersements { get; set; }

    public virtual DbSet<VwSalaryDispersementBankDetail> VwSalaryDispersementBankDetails { get; set; }

    public virtual DbSet<VwSalaryDispersementDetail> VwSalaryDispersementDetails { get; set; }

    public virtual DbSet<VwSalaryDispersementSetup> VwSalaryDispersementSetups { get; set; }

    public virtual DbSet<VwSalaryPerquisitesMainDetail> VwSalaryPerquisitesMainDetails { get; set; }

    public virtual DbSet<VwSalaryScaleMainDetail> VwSalaryScaleMainDetails { get; set; }

    public virtual DbSet<VwSalarySheet> VwSalarySheets { get; set; }

    public virtual DbSet<VwSalarySheetDeductionDetail> VwSalarySheetDeductionDetails { get; set; }

    public virtual DbSet<VwSalarySheetDetail> VwSalarySheetDetails { get; set; }

    public virtual DbSet<VwSalarySlip> VwSalarySlips { get; set; }

    public virtual DbSet<VwSale> VwSales { get; set; }

    public virtual DbSet<VwSale1> VwSales1 { get; set; }

    public virtual DbSet<VwSaleOrderComparison> VwSaleOrderComparisons { get; set; }

    public virtual DbSet<VwSaleOrderMainDetail> VwSaleOrderMainDetails { get; set; }

    public virtual DbSet<VwSalePartyWise> VwSalePartyWises { get; set; }

    public virtual DbSet<VwSalePartyWiseSumm> VwSalePartyWiseSumms { get; set; }

    public virtual DbSet<VwSalePurchaseRate> VwSalePurchaseRates { get; set; }

    public virtual DbSet<VwSaleWithCg> VwSaleWithCgs { get; set; }

    public virtual DbSet<VwSalemenSale> VwSalemenSales { get; set; }

    public virtual DbSet<VwSalemenSaleF> VwSalemenSaleFs { get; set; }

    public virtual DbSet<VwSalesGroup> VwSalesGroups { get; set; }

    public virtual DbSet<VwSalesGroupReturn> VwSalesGroupReturns { get; set; }

    public virtual DbSet<VwSalesInvoiceComparison> VwSalesInvoiceComparisons { get; set; }

    public virtual DbSet<VwSalesInvoiceService> VwSalesInvoiceServices { get; set; }

    public virtual DbSet<VwSalesIp> VwSalesIps { get; set; }

    public virtual DbSet<VwSalesManDetail> VwSalesManDetails { get; set; }

    public virtual DbSet<VwSalesOrderDetail> VwSalesOrderDetails { get; set; }

    public virtual DbSet<VwSalesOrderItem> VwSalesOrderItems { get; set; }

    public virtual DbSet<VwSalesValue> VwSalesValues { get; set; }

    public virtual DbSet<VwSalesWithCg> VwSalesWithCgs { get; set; }

    public virtual DbSet<VwSalesgroupwise> VwSalesgroupwises { get; set; }

    public virtual DbSet<VwService> VwServices { get; set; }

    public virtual DbSet<VwServiceBoqplan> VwServiceBoqplans { get; set; }

    public virtual DbSet<VwServiceBoqplanDetail> VwServiceBoqplanDetails { get; set; }

    public virtual DbSet<VwServiceRegistration> VwServiceRegistrations { get; set; }

    public virtual DbSet<VwSin> VwSins { get; set; }

    public virtual DbSet<VwSinmasterDetail> VwSinmasterDetails { get; set; }

    public virtual DbSet<VwSinsubSegment> VwSinsubSegments { get; set; }

    public virtual DbSet<VwSkipedLead> VwSkipedLeads { get; set; }

    public virtual DbSet<VwSmsapiIntegration> VwSmsapiIntegrations { get; set; }

    public virtual DbSet<VwSmscompaign> VwSmscompaigns { get; set; }

    public virtual DbSet<VwSmscompaignDetailBookingForm> VwSmscompaignDetailBookingForms { get; set; }

    public virtual DbSet<VwSmscompaignDetailLead> VwSmscompaignDetailLeads { get; set; }

    public virtual DbSet<VwSmscompaignDetailProjectSale> VwSmscompaignDetailProjectSales { get; set; }

    public virtual DbSet<VwSocietyInstallment> VwSocietyInstallments { get; set; }

    public virtual DbSet<VwSocietyPayment> VwSocietyPayments { get; set; }

    public virtual DbSet<VwSocietyPaymentDetail> VwSocietyPaymentDetails { get; set; }

    public virtual DbSet<VwStatementOfFinancialPosition> VwStatementOfFinancialPositions { get; set; }

    public virtual DbSet<VwStatementOfProfitAndLoss> VwStatementOfProfitAndLosses { get; set; }

    public virtual DbSet<VwStockAdustmentMasterDetail> VwStockAdustmentMasterDetails { get; set; }

    public virtual DbSet<VwStockGroupWise> VwStockGroupWises { get; set; }

    public virtual DbSet<VwStockIssue> VwStockIssues { get; set; }

    public virtual DbSet<VwStockIssueDetail> VwStockIssueDetails { get; set; }

    public virtual DbSet<VwStockPurchase> VwStockPurchases { get; set; }

    public virtual DbSet<VwStoreCcwcomp> VwStoreCcwcomps { get; set; }

    public virtual DbSet<VwStoreCcwcomp1> VwStoreCcwcomp1s { get; set; }

    public virtual DbSet<VwStoreSecConsSum> VwStoreSecConsSums { get; set; }

    public virtual DbSet<VwStoreSecWmonthComp> VwStoreSecWmonthComps { get; set; }

    public virtual DbSet<VwStoreSecWmonthComp1> VwStoreSecWmonthComp1s { get; set; }

    public virtual DbSet<VwStoreWmonthIr> VwStoreWmonthIrs { get; set; }

    public virtual DbSet<VwSubSegment> VwSubSegments { get; set; }

    public virtual DbSet<VwSublet> VwSublets { get; set; }

    public virtual DbSet<VwSubletService> VwSubletServices { get; set; }

    public virtual DbSet<VwSupportCharge> VwSupportCharges { get; set; }

    public virtual DbSet<VwSupportChargesDetail> VwSupportChargesDetails { get; set; }

    public virtual DbSet<VwTarget> VwTargets { get; set; }

    public virtual DbSet<VwTargetsDetail> VwTargetsDetails { get; set; }

    public virtual DbSet<VwTargetvsAch> VwTargetvsAches { get; set; }

    public virtual DbSet<VwTask> VwTasks { get; set; }

    public virtual DbSet<VwTeamKpi> VwTeamKpis { get; set; }

    public virtual DbSet<VwTeamLeader> VwTeamLeaders { get; set; }

    public virtual DbSet<VwTeamLeaderDetail> VwTeamLeaderDetails { get; set; }

    public virtual DbSet<VwTeamMasterDetail> VwTeamMasterDetails { get; set; }

    public virtual DbSet<VwTeamSetup> VwTeamSetups { get; set; }

    public virtual DbSet<VwTeamSetupMainDetail> VwTeamSetupMainDetails { get; set; }

    public virtual DbSet<VwTestCostCenter1> VwTestCostCenters1 { get; set; }

    public virtual DbSet<VwThirdPartyChequesForClearing> VwThirdPartyChequesForClearings { get; set; }

    public virtual DbSet<VwTmoveStock> VwTmoveStocks { get; set; }

    public virtual DbSet<VwTmoveStock1> VwTmoveStock1s { get; set; }

    public virtual DbSet<VwTmoveStock2> VwTmoveStock2s { get; set; }

    public virtual DbSet<VwTokenReceipt> VwTokenReceipts { get; set; }

    public virtual DbSet<VwTokenReturn> VwTokenReturns { get; set; }

    public virtual DbSet<VwTokenTracking> VwTokenTrackings { get; set; }

    public virtual DbSet<VwTotCon> VwTotCons { get; set; }

    public virtual DbSet<VwTrading> VwTradings { get; set; }

    public virtual DbSet<VwTradingClosing> VwTradingClosings { get; set; }

    public virtual DbSet<VwTradingListing> VwTradingListings { get; set; }

    public virtual DbSet<VwTradingPayment> VwTradingPayments { get; set; }

    public virtual DbSet<VwTradingReceipt> VwTradingReceipts { get; set; }

    public virtual DbSet<VwTradingReceiptsPayment> VwTradingReceiptsPayments { get; set; }

    public virtual DbSet<VwTradingTokenReceipt> VwTradingTokenReceipts { get; set; }

    public virtual DbSet<VwTradingTokenReturn> VwTradingTokenReturns { get; set; }

    public virtual DbSet<VwTransactionlog> VwTransactionlogs { get; set; }

    public virtual DbSet<VwTwoMonthComp> VwTwoMonthComps { get; set; }

    public virtual DbSet<VwUserAndPartyMaping> VwUserAndPartyMapings { get; set; }

    public virtual DbSet<VwUserPendingLead> VwUserPendingLeads { get; set; }

    public virtual DbSet<VwUserPendingLeadsSummary> VwUserPendingLeadsSummaries { get; set; }

    public virtual DbSet<VwVdetailVmainPnr> VwVdetailVmainPnrs { get; set; }

    public virtual DbSet<VwVehicleRegistration> VwVehicleRegistrations { get; set; }

    public virtual DbSet<VwVendorCommission> VwVendorCommissions { get; set; }

    public virtual DbSet<VwVendorCommissionDetail> VwVendorCommissionDetails { get; set; }

    public virtual DbSet<VwVendorCommissionMainDetail> VwVendorCommissionMainDetails { get; set; }

    public virtual DbSet<VwVendorItemsDetail> VwVendorItemsDetails { get; set; }

    public virtual DbSet<VwVendorItemsMain> VwVendorItemsMains { get; set; }

    public virtual DbSet<VwVisitor> VwVisitors { get; set; }

    public virtual DbSet<VwVmainPnr> VwVmainPnrs { get; set; }

    public virtual DbSet<VwVoucherPrint> VwVoucherPrints { get; set; }

    public virtual DbSet<VwWarehouse> VwWarehouses { get; set; }

    public virtual DbSet<VwWarehouseGrn> VwWarehouseGrns { get; set; }

    public virtual DbSet<VwWarehouseReceiptNew> VwWarehouseReceiptNews { get; set; }

    public virtual DbSet<VwWarehouseReceiptNewDetail> VwWarehouseReceiptNewDetails { get; set; }

    public virtual DbSet<VwWarehouseReceiptNewReport> VwWarehouseReceiptNewReports { get; set; }

    public virtual DbSet<VwWarehouseSubSegment> VwWarehouseSubSegments { get; set; }

    public virtual DbSet<VwWarehouseTransferNew> VwWarehouseTransferNews { get; set; }

    public virtual DbSet<VwWarehouseTransferNewDetail> VwWarehouseTransferNewDetails { get; set; }

    public virtual DbSet<VwWarehouseTransferNewMasterDetail> VwWarehouseTransferNewMasterDetails { get; set; }

    public virtual DbSet<VwWarehouseTransferNewReport> VwWarehouseTransferNewReports { get; set; }

    public virtual DbSet<VwWarehouseWiseStock> VwWarehouseWiseStocks { get; set; }

    public virtual DbSet<VwWoconsSum> VwWoconsSums { get; set; }

    public virtual DbSet<VwWodeptWise> VwWodeptWises { get; set; }

    public virtual DbSet<VwWodetail> VwWodetails { get; set; }

    public virtual DbSet<VwWorkingScheduleOvertiming> VwWorkingScheduleOvertimings { get; set; }

    public virtual DbSet<VwWorkingScheduleWorkTiming> VwWorkingScheduleWorkTimings { get; set; }

    public virtual DbSet<VwWorkingScheduleWorkingHour> VwWorkingScheduleWorkingHours { get; set; }

    public virtual DbSet<VwWostoreSecWise> VwWostoreSecWises { get; set; }

    public virtual DbSet<VwWosummery> VwWosummeries { get; set; }

    public virtual DbSet<VwWowridetail> VwWowridetails { get; set; }

    public virtual DbSet<VwYearComparison> VwYearComparisons { get; set; }

    public virtual DbSet<VwYearlyRateComp> VwYearlyRateComps { get; set; }

    public virtual DbSet<VwYearlyRateCompDetail> VwYearlyRateCompDetails { get; set; }

    public virtual DbSet<VwYearlyRicomp> VwYearlyRicomps { get; set; }

    public virtual DbSet<Vwcashandbank> Vwcashandbanks { get; set; }

    public virtual DbSet<Vwccsumdet> Vwccsumdets { get; set; }

    public virtual DbSet<Vwchallan> Vwchallans { get; set; }

    public virtual DbSet<Vwdo> Vwdos { get; set; }

    public virtual DbSet<Vweditinglist> Vweditinglists { get; set; }

    public virtual DbSet<Vweditlisting> Vweditlistings { get; set; }

    public virtual DbSet<Vweditlistingall> Vweditlistingalls { get; set; }

    public virtual DbSet<Vwfacon> Vwfacons { get; set; }

    public virtual DbSet<VwgrnPo> VwgrnPos { get; set; }

    public virtual DbSet<Vwigp> Vwigps { get; set; }

    public virtual DbSet<Vwigpstd> Vwigpstds { get; set; }

    public virtual DbSet<Vwinventory> Vwinventories { get; set; }

    public virtual DbSet<Vwitemmmmm> Vwitemmmmms { get; set; }

    public virtual DbSet<Vwitemsum> Vwitemsums { get; set; }

    public virtual DbSet<Vwitemsumoth> Vwitemsumoths { get; set; }

    public virtual DbSet<Vwitquery> Vwitqueries { get; set; }

    public virtual DbSet<Vwledger> Vwledgers { get; set; }

    public virtual DbSet<VwmainstoreopeningOth> VwmainstoreopeningOths { get; set; }

    public virtual DbSet<Vwmainstoresum> Vwmainstoresums { get; set; }

    public virtual DbSet<Vwmainsum> Vwmainsums { get; set; }

    public virtual DbSet<Vwmaxrateact> Vwmaxrateacts { get; set; }

    public virtual DbSet<Vwmaxratehistoryact> Vwmaxratehistoryacts { get; set; }

    public virtual DbSet<Vwminrateact> Vwminrateacts { get; set; }

    public virtual DbSet<VwminratehistoryAct> VwminratehistoryActs { get; set; }

    public virtual DbSet<VwmisdailystsumOth> VwmisdailystsumOths { get; set; }

    public virtual DbSet<Vwopening> Vwopenings { get; set; }

    public virtual DbSet<Vwoptran> Vwoptrans { get; set; }

    public virtual DbSet<VwpArtyGrade> VwpArtyGrades { get; set; }

    public virtual DbSet<Vwpilastmonth> Vwpilastmonths { get; set; }

    public virtual DbSet<Vwpilastyear> Vwpilastyears { get; set; }

    public virtual DbSet<VwpithisYear> VwpithisYears { get; set; }

    public virtual DbSet<Vwpo> Vwpos { get; set; }

    public virtual DbSet<Vwprytrcpt> Vwprytrcpts { get; set; }

    public virtual DbSet<VwrcptSum> VwrcptSums { get; set; }

    public virtual DbSet<VwrcptSum1> VwrcptSum1s { get; set; }

    public virtual DbSet<Vwregister> Vwregisters { get; set; }

    public virtual DbSet<Vwrol> Vwrols { get; set; }

    public virtual DbSet<VwrptPiop> VwrptPiops { get; set; }

    public virtual DbSet<Vwrptpi> Vwrptpis { get; set; }

    public virtual DbSet<Vwrptpinew> Vwrptpinews { get; set; }

    public virtual DbSet<Vwslowmovingitem> Vwslowmovingitems { get; set; }

    public virtual DbSet<Vwstock> Vwstocks { get; set; }

    public virtual DbSet<Vwstoredet> Vwstoredets { get; set; }

    public virtual DbSet<Vwstoresum> Vwstoresums { get; set; }

    public virtual DbSet<Vwsummery> Vwsummeries { get; set; }

    public virtual DbSet<Vwsummery1> Vwsummery1s { get; set; }

    public virtual DbSet<Vwsummery2> Vwsummery2s { get; set; }

    public virtual DbSet<Vwsummery3> Vwsummery3s { get; set; }

    public virtual DbSet<VwtestGrn> VwtestGrns { get; set; }

    public virtual DbSet<Vwtran> Vwtrans { get; set; }

    public virtual DbSet<VwvDetailVMainRecord> VwvDetailVMainRecords { get; set; }

    public virtual DbSet<Warehouse> Warehouses { get; set; }

    public virtual DbSet<WarehouseReceiptNew> WarehouseReceiptNews { get; set; }

    public virtual DbSet<WarehouseReceiptNewDetail> WarehouseReceiptNewDetails { get; set; }

    public virtual DbSet<WarehouseSubSegment> WarehouseSubSegments { get; set; }

    public virtual DbSet<WarehouseTransferNew> WarehouseTransferNews { get; set; }

    public virtual DbSet<WarehouseTransferNewDetail> WarehouseTransferNewDetails { get; set; }

    public virtual DbSet<WorkingScheduleMain> WorkingScheduleMains { get; set; }

    public virtual DbSet<WorkingScheduleOvertiming> WorkingScheduleOvertimings { get; set; }

    public virtual DbSet<WorkingScheduleWorkingHour> WorkingScheduleWorkingHours { get; set; }

    public virtual DbSet<WorkingScheduleWorkingTiming> WorkingScheduleWorkingTimings { get; set; }

    public virtual DbSet<Workorder> Workorders { get; set; }

    public virtual DbSet<Zerob> Zerobs { get; set; }

    public virtual DbSet<Zerobal> Zerobals { get; set; }

    public virtual DbSet<ZktimeAttendence> ZktimeAttendences { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {

    }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AcknowledgementReceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("AcknowledgementReceipt");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RefNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<AcknowledgementReceiptDelivery>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("AcknowledgementReceiptDelivery");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Courier)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredFrom)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.AdAddress1)
                .HasMaxLength(100)
                .HasColumnName("Ad_address1");
            entity.Property(e => e.AdAddress2)
                .HasMaxLength(100)
                .HasColumnName("Ad_address2");
            entity.Property(e => e.AdCity)
                .HasMaxLength(50)
                .HasColumnName("ad_city");
            entity.Property(e => e.AdContactperson)
                .HasMaxLength(30)
                .HasColumnName("ad_contactperson");
            entity.Property(e => e.AdCountry)
                .HasMaxLength(50)
                .HasColumnName("ad_country");
            entity.Property(e => e.AdCpemail)
                .HasMaxLength(100)
                .HasColumnName("ad_CPemail");
            entity.Property(e => e.AdCpphone)
                .HasMaxLength(50)
                .HasColumnName("ad_CPphone");
            entity.Property(e => e.AdEmail)
                .HasMaxLength(100)
                .HasColumnName("ad_Email");
            entity.Property(e => e.AdFax)
                .HasMaxLength(50)
                .HasColumnName("ad_fax");
            entity.Property(e => e.AdNtn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ad_NTN");
            entity.Property(e => e.AdPaymentTerms)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ad_PaymentTerms");
            entity.Property(e => e.AdPhone)
                .HasMaxLength(50)
                .HasColumnName("ad_phone");
            entity.Property(e => e.AdStreg)
                .HasMaxLength(17)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ad_STReg");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
        });

        modelBuilder.Entity<AddressInfo>(entity =>
        {
            entity.HasKey(e => e.PCode);

            entity.ToTable("AddressInfo");

            entity.Property(e => e.PCode)
                .HasMaxLength(50)
                .HasColumnName("P_code");
            entity.Property(e => e.AdPaymentTerms)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ad_PaymentTerms");
            entity.Property(e => e.CEmail).HasColumnName("C_email");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CPhone)
                .HasMaxLength(50)
                .HasColumnName("C_phone");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
            entity.Property(e => e.Ntn).HasMaxLength(50);
            entity.Property(e => e.PName).HasColumnName("P_name");
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.Tax).HasMaxLength(50);
            entity.Property(e => e.Terms).HasMaxLength(50);
        });

        modelBuilder.Entity<Adil>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("adil");

            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.Grndate)
                .HasColumnType("datetime")
                .HasColumnName("GRNDATE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.Party)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("PARTY");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(31)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrPretGrnno)
                .HasMaxLength(5)
                .HasColumnName("tr_PretGRNno");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("TR_QTY");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("TR_VALUE");
        });

        modelBuilder.Entity<Alert>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.BankClearing).HasColumnName("Bank_Clearing");
            entity.Property(e => e.BusinessPartner).HasColumnName("Business_Partner");
            entity.Property(e => e.DepositedIn).HasColumnName("Deposited_IN");
            entity.Property(e => e.Description)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Grn).HasColumnName("GRN");
            entity.Property(e => e.Grnr).HasColumnName("GRNR");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Ip).HasColumnName("IP");
            entity.Property(e => e.ItemMaster).HasColumnName("ITEM_Master");
            entity.Property(e => e.PartyPayment).HasColumnName("Party_Payment");
            entity.Property(e => e.PartyReceipts).HasColumnName("Party_Receipts");
            entity.Property(e => e.Pnr).HasColumnName("PNR");
            entity.Property(e => e.Po).HasColumnName("PO");
            entity.Property(e => e.Priority)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("priority");
            entity.Property(e => e.Sin).HasColumnName("SIN");
            entity.Property(e => e.Sinr).HasColumnName("SINR");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AlertManagementDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Alert_Management_Detail");

            entity.Property(e => e.Fax).HasColumnName("FAX");
            entity.Property(e => e.Sms).HasColumnName("SMS");
            entity.Property(e => e.Srno).HasColumnName("srno");
            entity.Property(e => e.UserId).HasColumnName("user_Id");

            entity.HasOne(d => d.SrnoNavigation).WithMany()
                .HasForeignKey(d => d.Srno)
                .HasConstraintName("FK_Alert_MAnagement_Detail_Alert_Management_Main");
        });

        modelBuilder.Entity<AlertManagementMain>(entity =>
        {
            entity.HasKey(e => e.Srno);

            entity.ToTable("Alert_Management_Main");

            entity.Property(e => e.Srno).ValueGeneratedNever();
            entity.Property(e => e.AlertId).HasColumnName("Alert_ID");
        });

        modelBuilder.Entity<AllotmentLetter>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("AllotmentLetter");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RefNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<AllotmentLetterDelivery>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("AllotmentLetterDelivery");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Courier)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredFrom)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<Announcement>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("Announcement");

            entity.Property(e => e.Description)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AppRight>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<AppRightsForm>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.FormName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AppRightsForms_AppRights");
        });

        modelBuilder.Entity<AppRightsSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AppRightsSegment");

            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AppRightsSegment_AppRights");
        });

        modelBuilder.Entity<AppRightsVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AppRightsVoucher");

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VoucherType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.User).WithMany()
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_AppRightsVoucher_AppRights");
        });

        modelBuilder.Entity<Applicant>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("Applicant");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ContactA)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactB)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrentAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Facebook).HasMaxLength(1000);
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LinkedIn).HasMaxLength(1000);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Other)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PermanentAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Position)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceContact)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ApplicantEducation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ApplicantEducation");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DegreeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Institution)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstitutionAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstitutionWebLink).HasMaxLength(1000);
            entity.Property(e => e.Marks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.Applicant).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_ApplicantEducation_Applicant");
        });

        modelBuilder.Entity<ApplicantJob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ApplicantJob");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JobTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrganizationWebLinks).HasMaxLength(1000);
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.Applicant).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_ApplicantJob_Applicant");
        });

        modelBuilder.Entity<AreaDetail>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.HasIndex(e => e.Area, "uArea_AreaDetails").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Area)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<AssetAdditionModification>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_AssetAdditionModification_1");

            entity.ToTable("AssetAdditionModification");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.AssetAdditionModifications)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_AssetAdditionModification_SubSegment");
        });

        modelBuilder.Entity<AssetAdditionModificationDetail>(entity =>
        {
            entity.HasNoKey();

            entity.HasIndex(e => e.Keys, "UKeys_AssetAdditionModificationDetails").IsUnique();

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NewLocation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.TypeId).HasColumnName("TypeID");

            entity.HasOne(d => d.AssetAdditionModification).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_AssetAdditionModificationDetails_AssetAdditionModification");

            entity.HasOne(d => d.AssetType).WithMany()
                .HasForeignKey(d => new { d.TypeId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetAdditionModificationDetails_AssetType");
        });

        modelBuilder.Entity<AssetDisposal>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("AssetDisposal");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.AssetDisposals)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_AssetDisposal_SubSegment");
        });

        modelBuilder.Entity<AssetDisposalDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssetDisposalDetail");

            entity.Property(e => e.AssetId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.Comp).WithMany()
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetDisposalDetail_Companysetup");

            entity.HasOne(d => d.AssetDisposal).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_AssetDisposalDetail_AssetDisposal");
        });

        modelBuilder.Entity<AssetHandingOver>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("AssetHandingOver");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Comp).WithMany(p => p.AssetHandingOvers)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetHandingOver_Companysetup");

            entity.HasOne(d => d.Suser).WithMany(p => p.AssetHandingOvers)
                .HasForeignKey(d => d.SuserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetHandingOver_Users");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.AssetHandingOvers)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetHandingOver_SubSegment");
        });

        modelBuilder.Entity<AssetHandingOverDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssetHandingOverDetail");

            entity.Property(e => e.Aamdkeys)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AAMDKeys");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.AssetHandingOver).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_AssetHandingOverDetail_AssetTransfer");
        });

        modelBuilder.Entity<AssetPartialPayment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("AssetPartialPayment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Suser).WithMany(p => p.AssetPartialPayments)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_AssetPartialPayment_Users");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.AssetPartialPayments)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_AssetPartialPayment_Business_Partners_Main");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.AssetPartialPayments)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_AssetPartialPayment_SubSegment");
        });

        modelBuilder.Entity<AssetPartialPaymentDetail>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Comp).WithMany()
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetPartialPaymentDetails_Companysetup");

            entity.HasOne(d => d.AssetPartialPayment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_AssetPartialPaymentDetails_AssetPartialPayment");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.VendorCode, d.CompId })
                .HasConstraintName("FK_AssetPartialPaymentDetails_Business_Partners_Main");
        });

        modelBuilder.Entity<AssetTransfer>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("AssetTransfer");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Comp).WithMany(p => p.AssetTransfers)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetTransfer_Companysetup");

            entity.HasOne(d => d.Suser).WithMany(p => p.AssetTransfers)
                .HasForeignKey(d => d.SuserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetTransfer_Users");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.AssetTransferSubSegments)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetTransfer_SubSegment");

            entity.HasOne(d => d.SubSegmentNavigation).WithMany(p => p.AssetTransferSubSegmentNavigations)
                .HasForeignKey(d => new { d.SubSegmentTo, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AssetTransfer_SubSegment1");
        });

        modelBuilder.Entity<AssetTransferDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AssetTransferDetail");

            entity.Property(e => e.Aamdkeys)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AAMDKeys");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.AssetTransfer).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_AssetTransferDetail_AssetTransfer");
        });

        modelBuilder.Entity<AssetType>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("AssetType");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccumulatedDepreciationId)
                .HasMaxLength(50)
                .HasColumnName("AccumulatedDepreciationID");
            entity.Property(e => e.AssetId)
                .HasMaxLength(50)
                .HasColumnName("AssetID");
            entity.Property(e => e.DepreciationExpenseId)
                .HasMaxLength(50)
                .HasColumnName("DepreciationExpenseID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.OtherIncomeId)
                .HasMaxLength(50)
                .HasColumnName("OtherIncomeID");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AtcDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATC_Details");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cylinder_no");
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo).HasColumnName("ECR_no");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.KeysNavigation).WithMany()
                .HasForeignKey(d => d.Keys)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ATC_Details_ATC_Main");
        });

        modelBuilder.Entity<AtcDetailsNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ATC_Details_New");

            entity.Property(e => e.AtcNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ATC_no");
            entity.Property(e => e.Capacity)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Cpamount).HasColumnName("CPAmount");
            entity.Property(e => e.Cpqty).HasColumnName("CPQty");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ECR_no");
            entity.Property(e => e.Mclamount).HasColumnName("MCLAmount");
            entity.Property(e => e.Mclqty).HasColumnName("MCLQty");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.Product)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalAmount).HasColumnName("Total_Amount");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AtcMainNew).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .HasConstraintName("FK_ATC_Details_New_ATC_Main_New");
        });

        modelBuilder.Entity<AtcMain>(entity =>
        {
            entity.HasKey(e => e.Keys).HasName("PK_ATC_Main_1");

            entity.ToTable("ATC_Main");

            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AtcDate).HasColumnName("ATC_date");
            entity.Property(e => e.AtcNo).HasColumnName("ATC_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AtcMainNew>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("ATC_Main_New");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AtcDate).HasColumnName("ATC_date");
            entity.Property(e => e.AtcNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ATC_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalAmountCp).HasColumnName("TotalAmount_CP");
            entity.Property(e => e.TotalAmountMcl).HasColumnName("TotalAmount_MCL");
        });

        modelBuilder.Entity<AttendanceInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AttendanceInfo");

            entity.Property(e => e.AttendanceType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CheckTime).HasColumnType("datetime");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReaderId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReaderID");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<AttendanceLocation>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("AttendanceLocation");

            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<Authority>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Authority1)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("authority1");
            entity.Property(e => e.Authority10)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("authority10");
            entity.Property(e => e.Authority2)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("authority2");
            entity.Property(e => e.Authority3)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("authority3");
            entity.Property(e => e.Authority4)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("authority4");
            entity.Property(e => e.Authority5)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("authority5");
            entity.Property(e => e.Authority6)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("authority6");
            entity.Property(e => e.Authority7)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("authority7");
            entity.Property(e => e.Authority8)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("authority8");
            entity.Property(e => e.Authority9)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("authority9");
            entity.Property(e => e.Post).HasColumnName("post");
            entity.Property(e => e.Type)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("type");
        });

        modelBuilder.Entity<BalanceSheet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BalanceSheet");

            entity.Property(e => e.BlCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bl_code");
            entity.Property(e => e.BlDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("bl_desc");
        });

        modelBuilder.Entity<BalanceSheetConfiguration>(entity =>
        {
            entity.HasKey(e => e.Line);

            entity.ToTable("BalanceSheetConfiguration");

            entity.Property(e => e.Line).ValueGeneratedNever();
            entity.Property(e => e.BoxL).HasMaxLength(50);
            entity.Property(e => e.BoxR).HasMaxLength(50);
            entity.Property(e => e.Bs1L).HasMaxLength(50);
            entity.Property(e => e.Bs1R).HasMaxLength(50);
            entity.Property(e => e.Bs2L).HasMaxLength(50);
            entity.Property(e => e.Bs2R).HasMaxLength(50);
            entity.Property(e => e.Bs3L).HasMaxLength(50);
            entity.Property(e => e.Bs3R).HasMaxLength(50);
            entity.Property(e => e.Bs4L).HasMaxLength(50);
            entity.Property(e => e.Bs4R).HasMaxLength(50);
            entity.Property(e => e.Bs5L).HasMaxLength(50);
            entity.Property(e => e.Bs5R).HasMaxLength(50);
            entity.Property(e => e.DoubleunderlineL).HasMaxLength(50);
            entity.Property(e => e.DoubleunderlineR).HasMaxLength(50);
            entity.Property(e => e.DownlineL).HasMaxLength(50);
            entity.Property(e => e.DownlineR).HasMaxLength(50);
            entity.Property(e => e.FigureboldL).HasMaxLength(50);
            entity.Property(e => e.FigureboldR).HasMaxLength(50);
            entity.Property(e => e.HeadingboldL).HasMaxLength(50);
            entity.Property(e => e.HeadingboldR).HasMaxLength(50);
            entity.Property(e => e.NetdrcrL).HasMaxLength(50);
            entity.Property(e => e.NetdrcrR).HasMaxLength(50);
            entity.Property(e => e.NoteL).HasMaxLength(50);
            entity.Property(e => e.NoteR).HasMaxLength(50);
            entity.Property(e => e.PrintfigureL).HasMaxLength(50);
            entity.Property(e => e.PrintfigureR).HasMaxLength(50);
            entity.Property(e => e.UplineL).HasMaxLength(50);
            entity.Property(e => e.UplineR).HasMaxLength(50);
        });

        modelBuilder.Entity<Bank>(entity =>
        {
            entity.HasKey(e => new { e.CompId, e.BankId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BankClearing>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("BankClearing");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BankClearingCheque>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BankClearing_Cheque");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.ChequeSlipno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_slipno");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Remarks)
                .IsUnicode(false)
                .HasColumnName("remarks");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");

            entity.HasOne(d => d.BankClearingMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .HasConstraintName("FK_BankClearing_Cheque_BankClearing_Main");
        });

        modelBuilder.Entity<BankClearingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BankClearing_Detail");

            entity.Property(e => e.ChequeSlipdate).HasColumnName("cheque_slipdate");
            entity.Property(e => e.ChequeSlipno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_slipno");
            entity.Property(e => e.Cleared).HasColumnName("cleared");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Credit).HasColumnName("credit");
            entity.Property(e => e.Debit).HasColumnName("debit");
            entity.Property(e => e.Dishonoured).HasColumnName("dishonoured");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("narration");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Vkey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vkey");
            entity.Property(e => e.Vno).HasColumnName("vno");
            entity.Property(e => e.VoucherSno).HasColumnName("Voucher_Sno");
            entity.Property(e => e.Vtype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vtype");

            entity.HasOne(d => d.BankClearingMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .HasConstraintName("FK_BankClearing_Detail_BankClearing_Main");
        });

        modelBuilder.Entity<BankClearingDetail1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BankClearingDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Narration)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vKEY");
            entity.Property(e => e.Vno).HasColumnName("VNo");

            entity.HasOne(d => d.BankClearing).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_BankClearingDetail_BankClearing");
        });

        modelBuilder.Entity<BankClearingMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FYear });

            entity.ToTable("BankClearing_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.AcNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ac_no");
            entity.Property(e => e.BankCharges).HasColumnName("bank_charges");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.SaveCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Save_creationDate");
            entity.Property(e => e.SaveUserid).HasColumnName("Save_userid");
            entity.Property(e => e.SaveUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_username");
            entity.Property(e => e.SaveWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_workstation");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.Wht).HasColumnName("wht");
        });

        modelBuilder.Entity<BankDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Bank_Details");

            entity.HasIndex(e => e.AccountNumber, "UBank_DetailsAccount_Number").IsUnique();

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Account_Number");
            entity.Property(e => e.AccountOpeningDate).HasColumnName("Account_Opening_Date");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("Bank_ID");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Branch_Code");
            entity.Property(e => e.BranchName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Branch_Name");
            entity.Property(e => e.CaBankChargers)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_BankChargers");
            entity.Property(e => e.CaBankClearing)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_BankClearing");
            entity.Property(e => e.CaCashAtBank)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_CashAtBank");
            entity.Property(e => e.CaWht)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_WHT");
            entity.Property(e => e.CellNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Cell_No");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Contact_Person");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TelephoneNo)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("Telephone_No");
        });

        modelBuilder.Entity<BankMaster>(entity =>
        {
            entity.HasKey(e => new { e.BankId, e.CompId });

            entity.ToTable("Bank_Master");

            entity.Property(e => e.BankId).HasColumnName("Bank_ID");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.RegisterAddress)
                .IsUnicode(false)
                .HasColumnName("Register_address");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.UserId).HasColumnName("User_id");
            entity.Property(e => e.WorkStation)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BankVdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Bank_Vdetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .HasColumnName("Account_No");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");

            entity.HasOne(d => d.VKeyNavigation).WithMany()
                .HasForeignKey(d => d.VKey)
                .HasConstraintName("FK_Bank_Vdetail_Bank_Vmain");
        });

        modelBuilder.Entity<BankVmain>(entity =>
        {
            entity.HasKey(e => e.VKey);

            entity.ToTable("Bank_Vmain");

            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.AgentCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ModifiedDate).HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VCancel).HasColumnName("vCancel");
            entity.Property(e => e.VCheqDate).HasColumnName("vCheqDate");
            entity.Property(e => e.VCheqNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("vCheqNo");
            entity.Property(e => e.VConfirmedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vConfirmedBy");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VSuperwisedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vSuperwisedBy");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<Blconfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("blconfig");

            entity.Property(e => e.Blineno).HasColumnName("blineno");
            entity.Property(e => e.Lbox).HasColumnName("lbox");
            entity.Property(e => e.Lcode1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode1");
            entity.Property(e => e.Lcode10)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode10");
            entity.Property(e => e.Lcode11)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode11");
            entity.Property(e => e.Lcode12)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode12");
            entity.Property(e => e.Lcode13)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode13");
            entity.Property(e => e.Lcode14)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode14");
            entity.Property(e => e.Lcode15)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode15");
            entity.Property(e => e.Lcode16)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode16");
            entity.Property(e => e.Lcode17)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode17");
            entity.Property(e => e.Lcode18)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode18");
            entity.Property(e => e.Lcode19)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode19");
            entity.Property(e => e.Lcode2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode2");
            entity.Property(e => e.Lcode20)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode20");
            entity.Property(e => e.Lcode21)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode21");
            entity.Property(e => e.Lcode22)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode22");
            entity.Property(e => e.Lcode23)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode23");
            entity.Property(e => e.Lcode24)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode24");
            entity.Property(e => e.Lcode25)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode25");
            entity.Property(e => e.Lcode3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode3");
            entity.Property(e => e.Lcode4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode4");
            entity.Property(e => e.Lcode5)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode5");
            entity.Property(e => e.Lcode6)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode6");
            entity.Property(e => e.Lcode7)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode7");
            entity.Property(e => e.Lcode8)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode8");
            entity.Property(e => e.Lcode9)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode9");
            entity.Property(e => e.Lcodestatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcodestatus");
            entity.Property(e => e.Ldline).HasColumnName("ldline");
            entity.Property(e => e.Lduline).HasColumnName("lduline");
            entity.Property(e => e.LfboLd).HasColumnName("lfboLd");
            entity.Property(e => e.Lfig).HasColumnName("lfig");
            entity.Property(e => e.Lhbold).HasColumnName("lhbold");
            entity.Property(e => e.Lhead)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("lhead");
            entity.Property(e => e.Lmain)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lmain");
            entity.Property(e => e.Lndc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lndc");
            entity.Property(e => e.Lnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lnote");
            entity.Property(e => e.Luline).HasColumnName("luline");
            entity.Property(e => e.Rbox).HasColumnName("rbox");
            entity.Property(e => e.Rcode1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode1");
            entity.Property(e => e.Rcode10)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode10");
            entity.Property(e => e.Rcode11)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode11");
            entity.Property(e => e.Rcode12)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode12");
            entity.Property(e => e.Rcode13)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode13");
            entity.Property(e => e.Rcode14)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode14");
            entity.Property(e => e.Rcode15)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode15");
            entity.Property(e => e.Rcode16)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode16");
            entity.Property(e => e.Rcode17)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode17");
            entity.Property(e => e.Rcode18)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode18");
            entity.Property(e => e.Rcode19)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode19");
            entity.Property(e => e.Rcode2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode2");
            entity.Property(e => e.Rcode20)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode20");
            entity.Property(e => e.Rcode21)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode21");
            entity.Property(e => e.Rcode22)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode22");
            entity.Property(e => e.Rcode23)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode23");
            entity.Property(e => e.Rcode24)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode24");
            entity.Property(e => e.Rcode25)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode25");
            entity.Property(e => e.Rcode3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode3");
            entity.Property(e => e.Rcode4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode4");
            entity.Property(e => e.Rcode5)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode5");
            entity.Property(e => e.Rcode6)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode6");
            entity.Property(e => e.Rcode7)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode7");
            entity.Property(e => e.Rcode8)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode8");
            entity.Property(e => e.Rcode9)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode9");
            entity.Property(e => e.Rcodestatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcodestatus");
            entity.Property(e => e.Rdline).HasColumnName("rdline");
            entity.Property(e => e.Rduline).HasColumnName("rduline");
            entity.Property(e => e.Rfbold).HasColumnName("rfbold");
            entity.Property(e => e.Rfig).HasColumnName("rfig");
            entity.Property(e => e.Rhbold).HasColumnName("rhbold");
            entity.Property(e => e.Rhead)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("rhead");
            entity.Property(e => e.Rmain)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rmain");
            entity.Property(e => e.Rndc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rndc");
            entity.Property(e => e.Rnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rnote");
            entity.Property(e => e.Ruline).HasColumnName("ruline");
        });

        modelBuilder.Entity<BlconfigMgmt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("blconfigMgmt");

            entity.Property(e => e.Blineno)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("blineno");
            entity.Property(e => e.Lbox).HasColumnName("lbox");
            entity.Property(e => e.Lcode1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode1");
            entity.Property(e => e.Lcode2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode2");
            entity.Property(e => e.Lcode3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode3");
            entity.Property(e => e.Lcode4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcode4");
            entity.Property(e => e.Lcodestatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lcodestatus");
            entity.Property(e => e.Ldline).HasColumnName("ldline");
            entity.Property(e => e.Lduline).HasColumnName("lduline");
            entity.Property(e => e.LfboLd).HasColumnName("lfboLd");
            entity.Property(e => e.Lfig).HasColumnName("lfig");
            entity.Property(e => e.Lhbold).HasColumnName("lhbold");
            entity.Property(e => e.Lhead)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("lhead");
            entity.Property(e => e.Lmain)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lmain");
            entity.Property(e => e.Lndc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lndc");
            entity.Property(e => e.Lnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lnote");
            entity.Property(e => e.Luline).HasColumnName("luline");
            entity.Property(e => e.Rbox).HasColumnName("rbox");
            entity.Property(e => e.Rcode1)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode1");
            entity.Property(e => e.Rcode2)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode2");
            entity.Property(e => e.Rcode3)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode3");
            entity.Property(e => e.Rcode4)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcode4");
            entity.Property(e => e.Rcodestatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rcodestatus");
            entity.Property(e => e.Rdline).HasColumnName("rdline");
            entity.Property(e => e.Rduline).HasColumnName("rduline");
            entity.Property(e => e.Rfbold).HasColumnName("rfbold");
            entity.Property(e => e.Rfig).HasColumnName("rfig");
            entity.Property(e => e.Rhbold).HasColumnName("rhbold");
            entity.Property(e => e.Rhead)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("rhead");
            entity.Property(e => e.Rmain)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rmain");
            entity.Property(e => e.Rndc)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rndc");
            entity.Property(e => e.Rnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rnote");
            entity.Property(e => e.Ruline).HasColumnName("ruline");
        });

        modelBuilder.Entity<BlocksDetail>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<BookingCategoryDetail>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Category)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<BookingConfirmationLetter>(entity =>
        {
            entity.HasKey(e => new { e.CompId, e.Srno });

            entity.ToTable("BookingConfirmationLetter");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectId)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.Comp).WithMany(p => p.BookingConfirmationLetters)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingConfirmationLetter_Companysetup");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.BookingConfirmationLetters)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingConfirmationLetter_SubSegment");
        });

        modelBuilder.Entity<BookingForm>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_BookingForm_1");

            entity.ToTable("BookingForm");

            entity.HasIndex(e => e.BookingFormNo, "UNBookingFormNo").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.Area)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BlockSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingCategory)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingFormDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceipts)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChequeInHandSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.Commission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CommissionType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Confirmation)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationPayment)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Customer)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CustomerBankId).HasColumnName("CustomerBankID");
            entity.Property(e => e.CustomerReceiptSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileReceiving)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentReceipt)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentReceiptDelivery)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Instrument)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ManagementRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.Msno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MSNo");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PartyPaymentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.QuotaParty)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReceiptClearingStatus)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptClearingUserId).HasColumnName("ReceiptClearingUserID");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReferringType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SocietyInstallment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SocietyInstallmentPayment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Submit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.BookingFormBusinessPartnersMains)
                .HasForeignKey(d => new { d.ReferringPerson, d.CompId })
                .HasConstraintName("FK_BookingForm_Business_Partners_Main");

            entity.HasOne(d => d.BusinessPartnersMainNavigation).WithMany(p => p.BookingFormBusinessPartnersMainNavigations)
                .HasForeignKey(d => new { d.VendorCode, d.CompId })
                .HasConstraintName("FK_BookingForm_Business_Partners_Main1");
        });

        modelBuilder.Entity<BookingFormDelivery>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("BookingFormDelivery");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<BookingFormDeliveryDebit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BookingFormDeliveryDebit");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.BookingFormDelivery).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BookingFormDeliveryDebit_BookingFormDelivery");
        });

        modelBuilder.Entity<BookingFormDeliveryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BookingFormDeliveryDetail");

            entity.HasIndex(e => e.BookingFormSrno, "UBookingFormSrno_BookingFormDeliveryDetail").IsUnique();

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno_BookingFormDeliveryDetail").IsUnique();

            entity.Property(e => e.BankAccountNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.BookingForm).WithMany()
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_BookingFormDeliveryDetail_BookingForm");

            entity.HasOne(d => d.BookingFormDelivery).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BookingFormDeliveryDetail_BookingFormDelivery");
        });

        modelBuilder.Entity<BookingFormDeliveryInstrument>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BookingFormDeliveryInstrument");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.BookingFormDelivery).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BookingFormDeliveryInstrument_BookingFormDelivery");
        });

        modelBuilder.Entity<BookingFormExtraChargesDetail>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ExtraChargesSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<BookingFormIssue>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("BookingFormIssue");

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno").IsUnique();

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno_BookingFormIssue").IsUnique();

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AllocatedTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Issue)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.IssueStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.BookingForm).WithMany(p => p.BookingFormIssues)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_BookingFormIssue_BookingForm");
        });

        modelBuilder.Entity<BookingFormReceiving>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("BookingFormReceiving");

            entity.HasIndex(e => e.BookingFormSrno, "IX_BookingFormReceiving").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Comp).WithMany(p => p.BookingFormReceivings)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingFormReceiving_Companysetup");

            entity.HasOne(d => d.User).WithMany(p => p.BookingFormReceivings)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_BookingFormReceiving_Users");

            entity.HasOne(d => d.BookingForm).WithMany(p => p.BookingFormReceivings)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_BookingFormReceiving_BookingForm");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.BookingFormReceivings)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_BookingFormReceiving_SubSegment");
        });

        modelBuilder.Entity<BookingReceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.HasIndex(e => e.BookingFormSrno, "UBookingFormSrno_BookingReceipts").IsUnique();

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno_BookingReceipts").IsUnique();

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BookingForm).WithMany(p => p.BookingReceiptsNavigation)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_BookingReceipts_BookingForm");
        });

        modelBuilder.Entity<BookingTypeDetail>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BookingformCredit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BookingformCredit");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<BookingformReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BookingformReceipt");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.CustomerReceipt).WithMany()
                .HasForeignKey(d => new { d.ReceiptSrno, d.CompId })
                .HasConstraintName("FK_BookingformReceipt_CustomerReceipt");

            entity.HasOne(d => d.BookingForm).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_BookingformReceipt_BookingForm");
        });

        modelBuilder.Entity<Bsleft>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BSLeft");

            entity.Property(e => e.Lbox)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LBox");
            entity.Property(e => e.Lcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LCode");
            entity.Property(e => e.LdoubleLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LDoubleLine");
            entity.Property(e => e.LdownLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LDownLine");
            entity.Property(e => e.LeftStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Lfigur)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LFigur");
            entity.Property(e => e.LfigurBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LFigurBold");
            entity.Property(e => e.Lhead)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("LHead");
            entity.Property(e => e.LheadingBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LHeadingBold");
            entity.Property(e => e.LlineNo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("LLineNo");
            entity.Property(e => e.LnetAmount).HasColumnName("LNetAmount");
            entity.Property(e => e.LnetDrCr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LNetDrCr");
            entity.Property(e => e.Lnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LNote");
            entity.Property(e => e.LupperLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LUpperLine");
        });

        modelBuilder.Entity<Bsnote>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BSNotes");

            entity.Property(e => e.GlCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.Heading)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Bsright>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BSRight");

            entity.Property(e => e.Rbox)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RBox");
            entity.Property(e => e.Rcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RCode");
            entity.Property(e => e.RdoubleLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RDoubleLine");
            entity.Property(e => e.RdownLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RDownLine");
            entity.Property(e => e.Rfigur)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RFigur");
            entity.Property(e => e.RfigurBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RFigurBold");
            entity.Property(e => e.Rhead)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("RHead");
            entity.Property(e => e.RheadingBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RHeadingBold");
            entity.Property(e => e.RightStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RlineNo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("RLineNo");
            entity.Property(e => e.RnetAmount).HasColumnName("RNetAmount");
            entity.Property(e => e.RnetDrCr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RNetDrCr");
            entity.Property(e => e.Rnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RNote");
            entity.Property(e => e.RupperLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RUpperLine");
        });

        modelBuilder.Entity<Budget>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Budget");

            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DId).HasColumnName("D_id");
            entity.Property(e => e.FinYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GlCode)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_code");
        });

        modelBuilder.Entity<BudgetDefinition>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("BudgetDefinition");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Levels)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Comp).WithMany(p => p.BudgetDefinitions)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BudgetDefinition_Companysetup");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.BudgetDefinitions)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_BudgetDefinition_SubSegment");
        });

        modelBuilder.Entity<BudgetDefinitionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("BudgetDefinitionDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.HeadCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.BudgetDefinition).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_BudgetDefinitionDetail_BudgetDefinition");
        });

        modelBuilder.Entity<BusinessPartnersDetailAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Business_Partners_Detail_Addresses");

            entity.Property(e => e.Address)
                .HasColumnType("text")
                .HasColumnName("address");
            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.CellNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cell_no");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("city");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contact_person");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .HasColumnName("country");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
            entity.Property(e => e.Province)
                .HasMaxLength(50)
                .HasColumnName("province");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("route_id");
            entity.Property(e => e.RouteName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.Sno).HasColumnName("sno");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.BusinessPartnersCode, d.CompId })
                .HasConstraintName("FK_Business_Partners_Detail_Addresses_Business_Partners_Main");
        });

        modelBuilder.Entity<BusinessPartnersDetailBank>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Business_Partners_Detail_Bank");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Account_number");
            entity.Property(e => e.BankCode)
                .HasMaxLength(50)
                .HasColumnName("Bank_Code");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Branch_Code");
            entity.Property(e => e.BranchName)
                .HasMaxLength(50)
                .HasColumnName("Branch_name");
            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.City).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Country).HasMaxLength(50);
            entity.Property(e => e.Sno).HasColumnName("sno");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.BusinessPartnersCode, d.CompId })
                .HasConstraintName("FK_Business_Partners_Detail_Bank_Business_Partners_Main");
        });

        modelBuilder.Entity<BusinessPartnersMain>(entity =>
        {
            entity.HasKey(e => new { e.BusinessPartnersCode, e.CompId }).HasName("PK_Business_Partners_Main_1");

            entity.ToTable("Business_Partners_Main");

            entity.HasIndex(e => e.Bpuserid, "U_BPUserID_Business_Partners_Main")
                .IsUnique()
                .HasFilter("([BPUSERID] IS NOT NULL)");

            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.Bppassword)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPPassword");
            entity.Property(e => e.Bpuserid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPUSERID");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CashDiscountDays).HasColumnName("Cash_Discount_Days");
            entity.Property(e => e.CashDiscountPercentage).HasColumnName("Cash_Discount_Percentage");
            entity.Property(e => e.Cellno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellno");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.ControlAccountApaccural)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_APAccural");
            entity.Property(e => e.ControlAccountCash)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Cash");
            entity.Property(e => e.ControlAccountCashDiscount)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Cash_Discount");
            entity.Property(e => e.ControlAccountFurtherTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_FurtherTax");
            entity.Property(e => e.ControlAccountIncomeTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_IncomeTax");
            entity.Property(e => e.ControlAccountInvoice)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Invoice");
            entity.Property(e => e.ControlAccountOther)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Other");
            entity.Property(e => e.ControlAccountPaymentInAdvance)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Payment_in_Advance");
            entity.Property(e => e.ControlAccountSalesTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_SalesTax");
            entity.Property(e => e.ControlAccountSecurity)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Security");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreditLimitAmount).HasColumnName("Credit_limit_Amount");
            entity.Property(e => e.CreditLimitAmountCondition)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Credit_limit_Amount_Condition");
            entity.Property(e => e.CreditLimitDays).HasColumnName("Credit_limit_Days");
            entity.Property(e => e.CreditLimitDaysCondition)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Credit_limit_Days_Condition");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GeneralOne)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentReceivable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceOpeningBalance).HasColumnName("Invoice_Opening_Balance");
            entity.Property(e => e.Lc).HasColumnName("LC");
            entity.Property(e => e.LegalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Legal_Status");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NTN");
            entity.Property(e => e.OldCustomerCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnedorRented)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Party_type");
            entity.Property(e => e.PaymentAfterDelivery).HasColumnName("Payment_after_delivery");
            entity.Property(e => e.PaymentInAdvance).HasColumnName("Payment_in_Advance");
            entity.Property(e => e.Province)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferedBy)
                .HasMaxLength(50)
                .HasColumnName("Refered_by");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegisteredOfficeAdress)
                .IsUnicode(false)
                .HasColumnName("Registered_Office_Adress");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.Sector)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecurityChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecurityOpeningBalance).HasColumnName("Security_Opening_Balance");
            entity.Property(e => e.Strn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STRN");
            entity.Property(e => e.TaxStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tel1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_1");
            entity.Property(e => e.Tel2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_2");
            entity.Property(e => e.Test1)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test1");
            entity.Property(e => e.Test2)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test2");
            entity.Property(e => e.Test3)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test3");
            entity.Property(e => e.Test4)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test4");
            entity.Property(e => e.TradeDiscount).HasColumnName("Trade_Discount");
            entity.Property(e => e.TradingReceivable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.Website)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Wht150).HasColumnName("WHT_150");
            entity.Property(e => e.WhtFurtherTax).HasColumnName("WHT_Further_tax");
            entity.Property(e => e.WhtSalesTax).HasColumnName("WHT_SalesTax");
        });

        modelBuilder.Entity<BusinessPartnersSubsegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Business_Partners_Subsegment");

            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Listindex).HasColumnName("listindex");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.BusinessPartnersCode, d.CompId })
                .HasConstraintName("FK_Business_Partners_Subsegment_Business_Partners_Main");
        });

        modelBuilder.Entity<BusniessPartnersDetailContactPerson>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Busniess_Partners_Detail_Contact_Persons");

            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.Cell)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cell");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Department)
                .HasMaxLength(50)
                .HasColumnName("department");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .HasColumnName("designation");
            entity.Property(e => e.Email1)
                .HasMaxLength(50)
                .HasColumnName("email_1");
            entity.Property(e => e.Email2)
                .HasMaxLength(50)
                .HasColumnName("email_2");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Tel)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("tel");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.BusinessPartnersCode, d.CompId })
                .HasConstraintName("FK_Busniess_Partners_Detail_Contact_Persons_Business_Partners_Main");
        });

        modelBuilder.Entity<BuyBack>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("BuyBack");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Reason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.ProjectSale).WithMany(p => p.BuyBacks)
                .HasForeignKey(d => new { d.ProjectSrno, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BuyBack_ProjectSale");
        });

        modelBuilder.Entity<CallLog>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Time).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<CallRecording>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.Property(e => e.LocalPath)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Time).HasColumnType("datetime");
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("URL");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<CampaignAllocation>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId }).HasName("PK_CompaignAllocation");

            entity.ToTable("CampaignAllocation");

            entity.HasIndex(e => e.FormNo, "UFormNo_CampaignAllocation").IsUnique();

            entity.HasIndex(e => e.FormNo, "UNFormID").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CampaignName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FormNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.QueueTeamId).HasColumnName("QueueTeamID");
            entity.Property(e => e.Source)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TeamId).HasColumnName("TeamID");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.CampaignAllocations)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_CampaignAllocation_ProjectRegistration");
        });

        modelBuilder.Entity<CampaignsAnalysis>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("CampaignsAnalysis");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CampaignName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Suser).WithMany(p => p.CampaignsAnalyses)
                .HasForeignKey(d => d.SuserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsAnalysis_Users");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.CampaignsAnalyses)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CampaignsAnalysis_ProjectRegistration");
        });

        modelBuilder.Entity<CampaignsAnalysisDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CampaignsAnalysisDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SourceName)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CampaignsAnalysis).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_CampaignsAnalysisDetail_CampaignsAnalysis");
        });

        modelBuilder.Entity<Cashflow>(entity =>
        {
            entity.HasKey(e => e.CfHead);

            entity.ToTable("Cashflow");

            entity.Property(e => e.CfHead)
                .HasMaxLength(50)
                .HasColumnName("Cf_head");
        });

        modelBuilder.Entity<Catagory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Catagory");

            entity.Property(e => e.CatagoryCode).HasColumnName("Catagory_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsFixedLength()
                .HasColumnName("f_year");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Cccode>(entity =>
        {
            entity.HasKey(e => e.CcCode1).HasName("PK_Cost_Center");

            entity.ToTable("CCCode");

            entity.Property(e => e.CcCode1)
                .HasMaxLength(5)
                .HasColumnName("CC_CODE");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CcNotes)
                .HasColumnType("ntext")
                .HasColumnName("cc_notes");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.OpDate)
                .HasColumnType("datetime")
                .HasColumnName("opDate");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .HasColumnName("sUser");
        });

        modelBuilder.Entity<CccodeLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CCCode_Log");

            entity.Property(e => e.CcActionTaken)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CC_Action_Taken");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcCode)
                .HasMaxLength(5)
                .HasColumnName("CC_CODE");
            entity.Property(e => e.CcDateModified)
                .HasColumnType("datetime")
                .HasColumnName("CC_Date_Modified");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CcNotes)
                .HasColumnType("ntext")
                .HasColumnName("cc_notes");
            entity.Property(e => e.CcUserid).HasColumnName("CC_Userid");
            entity.Property(e => e.CcWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CC_Workstation");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.LogSerial).HasColumnName("LOG_Serial");
            entity.Property(e => e.OpDate)
                .HasColumnType("datetime")
                .HasColumnName("opDate");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .HasColumnName("sUser");
        });

        modelBuilder.Entity<CfsCompressor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CFS_Compressor");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CompressorGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CompressorGroup_Code");
            entity.Property(e => e.CompressorItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CompressorItem_Code");
            entity.Property(e => e.CompressorQty).HasColumnName("Compressor_Qty");
            entity.Property(e => e.CompressorUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Compressor_UOM");
            entity.Property(e => e.CsfNo).HasColumnName("CSF_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CfsMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .HasConstraintName("FK_CFS_Compressor_CFS_Main");
        });

        modelBuilder.Entity<CfsLiquid>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CFS_Liquid");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CsfNo).HasColumnName("CSF_no");
            entity.Property(e => e.LiquidGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LiquidGroup_Code");
            entity.Property(e => e.LiquidItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LiquidItem_Code");
            entity.Property(e => e.LiquidQty).HasColumnName("Liquid_Qty");
            entity.Property(e => e.LiquidUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Liquid_UOM");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CfsMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .HasConstraintName("FK_CFS_Liquid_CFS_Main");
        });

        modelBuilder.Entity<CfsMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("CFS_Main");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("C_UOM");
            entity.Property(e => e.CompressorConversionCost).HasColumnName("Compressor_ConversionCost");
            entity.Property(e => e.CsfNo).HasColumnName("CSF_no");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.LUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("L_UOM");
            entity.Property(e => e.LiquidConversionCost).HasColumnName("Liquid_ConversionCost");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
        });

        modelBuilder.Entity<CfstmDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CFSTM_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CsfNo).HasColumnName("CSF_no");
            entity.Property(e => e.LiquidGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LiquidGroup_Code");
            entity.Property(e => e.LiquidItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LiquidItem_Code");
            entity.Property(e => e.LiquidQty).HasColumnName("Liquid_Qty");
            entity.Property(e => e.LiquidUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Liquid_UOM");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CfstmMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .HasConstraintName("FK_CFSTM_Detail_CFSTM_Main");
        });

        modelBuilder.Entity<CfstmMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("CFSTM_Main");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("C_UOM");
            entity.Property(e => e.CompressorConversionCost).HasColumnName("Compressor_ConversionCost");
            entity.Property(e => e.CsfNo).HasColumnName("CSF_no");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.LUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("L_UOM");
            entity.Property(e => e.LiquidConversionCost).HasColumnName("Liquid_ConversionCost");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
        });

        modelBuilder.Entity<Cg>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CGS");

            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.Qty).HasColumnType("decimal(28, 14)");
            entity.Property(e => e.Value).HasColumnType("decimal(28, 14)");
        });

        modelBuilder.Entity<Cgsr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CGSR");

            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.Qty).HasColumnType("decimal(28, 14)");
            entity.Property(e => e.Value).HasColumnType("decimal(28, 14)");
        });

        modelBuilder.Entity<ChartofAcct>(entity =>
        {
            entity.HasKey(e => new { e.GlCode, e.CompId });

            entity.ToTable("ChartofAcct");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.GlActivestatus).HasColumnName("gl_Activestatus");
            entity.Property(e => e.GlAmountcr).HasColumnName("gl_amountcr");
            entity.Property(e => e.GlAmountdr).HasColumnName("gl_amountdr");
            entity.Property(e => e.GlBlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_blcode");
            entity.Property(e => e.GlBlcodeMgmt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_BLCodeMgmt");
            entity.Property(e => e.GlCfcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_cfcode");
            entity.Property(e => e.GlCfcodeMgmt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_CFCodeMgmt");
            entity.Property(e => e.GlDate)
                .HasColumnType("datetime")
                .HasColumnName("gl_date");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.GlHidecode).HasColumnName("gl_hidecode");
            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
            entity.Property(e => e.GlPlcodeMgmt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_PLCodeMgmt");
            entity.Property(e => e.GlUserId).HasColumnName("gl_UserId");
            entity.Property(e => e.GlWorkStation)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("gl_WorkStation");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
            entity.Property(e => e.Uid)
                .HasMaxLength(50)
                .HasColumnName("uid");
        });

        modelBuilder.Entity<CheckForUpdate>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ChartOfAcct)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("chartOfAcct");
            entity.Property(e => e.UserRights)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VwItemUom)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("vw_Item_UOM");
        });

        modelBuilder.Entity<ChequeInHandManagementDetailPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ChequeInHandManagement_DetailPayment");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankIdentity).HasColumnName("BankIDEntity");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.PartyPaymentMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .HasConstraintName("FK_ChequeInHandManagement_DetailPayment_Party_Payment_Main");
        });

        modelBuilder.Entity<ChequeInHandManagementDetailReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ChequeInHandManagement_DetailReceipts");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankIdentity).HasColumnName("BankIDEntity");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.ChequeInHandManagementMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.Year, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ChequeInHandManagement_DetailReceipts_ChequeInHandManagement_Main");
        });

        modelBuilder.Entity<ChequeInHandManagementMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.Year, e.CompId }).HasName("PK_ChequesInHandManagement_Main");

            entity.ToTable("ChequeInHandManagement_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Date).HasColumnName("DATE");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.SUser).HasColumnName("sUser");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.TrUserid).HasColumnName("tr_userid");
            entity.Property(e => e.TrUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_username");
            entity.Property(e => e.TrWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_workstation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ChequebookRegistrationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Chequebook_Registration_Detail");

            entity.Property(e => e.ChequeFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_from");
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_to");
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("chequebook_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.TotalLeafs).HasColumnName("total_leafs");

            entity.HasOne(d => d.ChequebookRegistrationMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .HasConstraintName("FK_Chequebook_Registration_Detail_Chequebook_Registration_Main");
        });

        modelBuilder.Entity<ChequebookRegistrationMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FYear }).HasName("PK_Checkbook_Registration_Main");

            entity.ToTable("Chequebook_Registration_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.AcNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ac_no");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.SaveCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Save_creationDate");
            entity.Property(e => e.SaveUserid).HasColumnName("Save_userid");
            entity.Property(e => e.SaveUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_username");
            entity.Property(e => e.SaveWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_workstation");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
        });

        modelBuilder.Entity<ChequesClearing>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ChequesClearing");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<ChequesClearingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ChequesClearingDetail");

            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequesSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_ChequesClearingDetail_Business_Partners_Main");

            entity.HasOne(d => d.Bank).WithMany()
                .HasForeignKey(d => new { d.CompId, d.BankId })
                .HasConstraintName("FK_ChequesClearingDetail_Banks");

            entity.HasOne(d => d.ChequeInHandManagementMain).WithMany()
                .HasForeignKey(d => new { d.ChequesSrno, d.FinancialYear, d.CompId })
                .HasConstraintName("FK_ChequesClearingDetail_ChequeInHandManagement_Main");

            entity.HasOne(d => d.PartyPayment).WithMany()
                .HasForeignKey(d => new { d.PaymentSrno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_ChequesClearingDetail_PartyPayment");

            entity.HasOne(d => d.ChequesClearing).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChequesClearingDetail_ChequesClearing");
        });

        modelBuilder.Entity<CitiesList>(entity =>
        {
            entity.HasKey(e => e.City);

            entity.ToTable("CitiesList");

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Client>(entity =>
        {
            entity.HasKey(e => e.Cnic);

            entity.Property(e => e.Cnic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.ClientName).HasMaxLength(500);
            entity.Property(e => e.PlayerId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PlayerID");
            entity.Property(e => e.RoomId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("RoomID");
        });

        modelBuilder.Entity<CnfrmtionPyment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("CnfrmtionPyment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bank)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Cash).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<CnfrmtionPymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CnfrmtionPymentDetail");

            entity.HasIndex(e => e.BookingFormSrno, "UBookingFormSrno_CnfrmtionPymentDetail").IsUnique();

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno_CnfrmtionPymentDetail").IsUnique();

            entity.Property(e => e.BankAccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.BookingForm).WithMany()
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_CnfrmtionPymentDetail_BookingForm");

            entity.HasOne(d => d.CnfrmtionPyment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CnfrmtionPymentDetail_CnfrmtionPyment");
        });

        modelBuilder.Entity<CnfrmtionPymentInstrument>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CnfrmtionPymentInstrument");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.BookingForm).WithMany()
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_CnfrmtionPymentInstrument_BookingForm");

            entity.HasOne(d => d.CnfrmtionPyment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CnfrmtionPymentInstrument_CnfrmtionPyment");
        });

        modelBuilder.Entity<Commission>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("Commission");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
        });

        modelBuilder.Entity<CommissionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CommissionDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_CommissionDetail_Business_Partners_Main");

            entity.HasOne(d => d.Commission).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_CommissionDetail_Commission");
        });

        modelBuilder.Entity<CommissionPayment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("CommissionPayment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Suser).WithMany(p => p.CommissionPayments)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_CommissionPayment_Users");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.CommissionPayments)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_CommissionPayment_SubSegment");
        });

        modelBuilder.Entity<CommissionPaymentBooking>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CommissionPaymentBooking");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_CommissionPaymentBooking_Business_Partners_Main");

            entity.HasOne(d => d.CommissionPayment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CommissionPaymentBooking_CommissionPayment");
        });

        modelBuilder.Entity<CommissionPaymentOnAccount>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CommissionPaymentOnAccount");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_CommissionPaymentOnAccount_Business_Partners_Main");

            entity.HasOne(d => d.CommissionPayment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_CommissionPaymentOnAccount_CommissionPayment");
        });

        modelBuilder.Entity<CompInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CompInfo");

            entity.Property(e => e.Addres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addres");
            entity.Property(e => e.Addres1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addres1");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Compname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("compname");
            entity.Property(e => e.Fax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("fax");
            entity.Property(e => e.Telephone)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("telephone");
        });

        modelBuilder.Entity<CompanyInfo>(entity =>
        {
            entity.HasKey(e => e.CompanyName);

            entity.ToTable("CompanyInfo");

            entity.Property(e => e.CompanyName)
                .HasMaxLength(50)
                .HasColumnName("Company_name");
            entity.Property(e => e.AdjustmentType)
                .HasMaxLength(50)
                .HasColumnName("Adjustment_type");
            entity.Property(e => e.Budgeting).HasMaxLength(50);
            entity.Property(e => e.Derpreciation).HasMaxLength(50);
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.Fixedasset).HasMaxLength(50);
            entity.Property(e => e.Noofshares).HasMaxLength(50);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.Posting).HasMaxLength(50);
        });

        modelBuilder.Entity<Companysetup>(entity =>
        {
            entity.HasKey(e => e.CId);

            entity.ToTable("Companysetup");

            entity.Property(e => e.CId).HasColumnName("C_id");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.ImagePath)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
        });

        modelBuilder.Entity<ConfirmationPayment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ConfirmationPayment");

            entity.HasIndex(e => e.BookingFormSrno, "UBookingFormSrno_ConfirmationPayment").IsUnique();

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno_ConfirmationPayment").IsUnique();

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.Bank)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CashBankOnline)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealerCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Instrument)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SalesManCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.BookingForm).WithMany(p => p.ConfirmationPayments)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_ConfirmationPayment_BookingForm");
        });

        modelBuilder.Entity<ConfirmationPaymentCustomerReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ConfirmationPaymentCustomerReceipt");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CustomerReceipt).WithMany()
                .HasForeignKey(d => new { d.ReceiptSrno, d.CompId })
                .HasConstraintName("FK_ConfirmationPaymentCustomerReceipt_CustomerReceipt");

            entity.HasOne(d => d.ConfirmationPayment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ConfirmationPaymentCustomerReceipt_ConfirmationPayment");
        });

        modelBuilder.Entity<ConfirmationReceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ConfirmationReceipt");

            entity.HasIndex(e => e.BookingFormSrno, "UBookingFormSrno_ConfirmationReceipt").IsUnique();

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno_ConfirmationReceipt").IsUnique();

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BookingForm).WithMany(p => p.ConfirmationReceipts)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_ConfirmationReceipt_BookingForm");
        });

        modelBuilder.Entity<ConfirmationReceiptsDelivery>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ConfirmationReceiptsDelivery");

            entity.HasIndex(e => e.BookingFormSrno, "UBookingFormSrno_ConfirmationReceiptsDelivery").IsUnique();

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno_ConfirmationReceiptsDelivery").IsUnique();

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientRepresentativeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredFromLocation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.BookingForm).WithMany(p => p.ConfirmationReceiptsDeliveries)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_ConfirmationReceiptsDelivery_BookingForm");
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("Contract");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AllotmentLetterNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountA)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountB)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessApprovalBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.ChequeA)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ChequeB)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Circle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Cnicexpiry).HasColumnName("CNICExpiry");
            entity.Property(e => e.CompletePropertyAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContractType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DetailOfVehicles)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Division)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FamilyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gst).HasColumnName("GST");
            entity.Property(e => e.LandlordCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LandlordCNIC");
            entity.Property(e => e.LandlordName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.Members)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Nationality)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NatureOfBusiness)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nocto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOCTo");
            entity.Property(e => e.Occupation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Passport)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PermanentAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PoliceStation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Pra).HasColumnName("PRA");
            entity.Property(e => e.PresentAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PropertyID");
            entity.Property(e => e.Province)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PurchaserCNIC");
            entity.Property(e => e.PurchaserDob).HasColumnName("PurchaserDOB");
            entity.Property(e => e.PurchaserFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Road)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SellerAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SellerCNIC");
            entity.Property(e => e.SellerDob).HasColumnName("SellerDOB");
            entity.Property(e => e.SellerFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerNationality)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerPassport)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Share)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Strno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STRNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Subjects)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TenantCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TenantCNIC");
            entity.Property(e => e.TenantName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TypeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TypeID");
            entity.Property(e => e.Uom)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleRegNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WorkAddress)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Suser).WithMany(p => p.Contracts)
                .HasForeignKey(d => d.SuserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contract_Users");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.Contracts)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contract_Business_Partners_Main");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.Contracts)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contract_SubSegment");
        });

        modelBuilder.Entity<ContractInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ContractInventory");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.Contract).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_ContractInventory_Contract");
        });

        modelBuilder.Entity<ContractPayment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("ContractPayment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CpadmittedTax).HasColumnName("CPAdmittedTax");
            entity.Property(e => e.Cpgst).HasColumnName("CPGST");
            entity.Property(e => e.CpotherTax).HasColumnName("CPOtherTax");
            entity.Property(e => e.Cppra).HasColumnName("CPPRA");
            entity.Property(e => e.Cpprice).HasColumnName("CPPrice");
            entity.Property(e => e.CpstampDuty).HasColumnName("CPStampDuty");
            entity.Property(e => e.Cptax236C).HasColumnName("CPTax236C");
            entity.Property(e => e.Cptax236K).HasColumnName("CPTax236K");
            entity.Property(e => e.CptransferFee).HasColumnName("CPTransferFee");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.VoucherNo)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.Comp).WithMany(p => p.ContractPayments)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractPayment_Companysetup");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractPayments)
                .HasForeignKey(d => new { d.ContractSrno, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractPayment_Contract");
        });

        modelBuilder.Entity<Crcancellation>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("CRCancellation");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.ClientName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CrserialNo).HasColumnName("CRSerialNo");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Comp).WithMany(p => p.Crcancellations)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CRCancellation_Companysetup");

            entity.HasOne(d => d.Suser).WithMany(p => p.Crcancellations)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_CRCancellation_Users");

            entity.HasOne(d => d.CustomerReceipt).WithMany(p => p.Crcancellations)
                .HasForeignKey(d => new { d.CustomerReceiptSrno, d.CompId })
                .HasConstraintName("FK_CRCancellation_CustomerReceipt");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.Crcancellations)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_CRCancellation_SubSegment");
        });

        modelBuilder.Entity<CustomFollowUp>(entity =>
        {
            entity.HasKey(e => e.SerialNo).HasName("PK_CustomFollowUps_1");

            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Time).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerRateList>(entity =>
        {
            entity.HasKey(e => e.Bpcode);

            entity.ToTable("CustomerRateList", tb => tb.HasTrigger("trgCustomerRateListLogs"));

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.RateType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerRateListLog>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Mdate)
                .HasColumnType("datetime")
                .HasColumnName("MDate");
            entity.Property(e => e.RateType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerReceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_CustomerReceipt_1");

            entity.ToTable("CustomerReceipt");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.BankClearedById).HasColumnName("BankClearedByID");
            entity.Property(e => e.BankClearedDate).HasColumnType("datetime");
            entity.Property(e => e.BankClearingDate).HasColumnType("datetime");
            entity.Property(e => e.BankRemarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.BlocksDetails)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlocksDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingCategoryDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingTypeDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingTypeDetailsType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClearedByUserId).HasColumnName("ClearedByUserID");
            entity.Property(e => e.ClearingBankAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CommissionRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealerCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DepoistorName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileData).IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromBankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.JointOwner)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.Msno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MSNo");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PricelistId).HasColumnName("PricelistID");
            entity.Property(e => e.PropertyDetails)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReceiptClearingStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SonOf)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeaderCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ToBankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DealPurchase).WithMany(p => p.CustomerReceipts)
                .HasForeignKey(d => new { d.DealSrno, d.CompId })
                .HasConstraintName("FK_CustomerReceipt_DealPurchase");
        });

        modelBuilder.Entity<CustomerReceiptOnline>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("CustomerReceiptOnline", tb => tb.HasTrigger("Tr_CustomerReceiptOnline_Insert"));

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.BlockId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BlockID");
            entity.Property(e => e.BookingCategoryId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BookingCategoryID");
            entity.Property(e => e.BookingTypeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BookingTypeID");
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PropertyID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<CustomerReceiptPrint>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_CustomerReceiptPrint_1");

            entity.ToTable("CustomerReceiptPrint");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.BlocksDetails)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlocksDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingCategoryDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingTypeDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingTypeDetailsType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CommissionRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Crdate).HasColumnName("CRDate");
            entity.Property(e => e.CrserialNo).HasColumnName("CRSerialNo");
            entity.Property(e => e.Crsrno).HasColumnName("CRSrno");
            entity.Property(e => e.CrsubSegmentId).HasColumnName("CRSubSegmentID");
            entity.Property(e => e.CustomerType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealerCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileData).IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetails)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeaderCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ToBankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Suser).WithMany(p => p.CustomerReceiptPrints)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_CustomerReceiptPrint_Users");

            entity.HasOne(d => d.AreaDetail).WithMany(p => p.CustomerReceiptPrints)
                .HasForeignKey(d => new { d.AreaDetailsSerialNo, d.CompId })
                .HasConstraintName("FK_CustomerReceiptPrint_AreaDetails");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.CustomerReceiptPrints)
                .HasForeignKey(d => new { d.ProjectRegistrationSerialNo, d.CompId })
                .HasConstraintName("FK_CustomerReceiptPrint_ProjectRegistration");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.CustomerReceiptPrints)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_CustomerReceiptPrint_SubSegment");
        });

        modelBuilder.Entity<CustomerWiseRateList>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("CustomerWiseRateList");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RateType)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CustomerWiseRateListDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CustomerWiseRateListDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.CustomerWiseRateList).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomerWiseRateListDetail_CustomerWiseRateList");
        });

        modelBuilder.Entity<CylinderFillingSessionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CylinderFillingSession_Detail");

            entity.Property(e => e.Batch).HasMaxLength(50);
            entity.Property(e => e.CfsessionNo).HasColumnName("CFSession_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.EndTime).HasMaxLength(50);
            entity.Property(e => e.Pressure).HasMaxLength(50);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime).HasMaxLength(50);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Temp).HasMaxLength(50);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CylinderFillingSessionMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .HasConstraintName("FK_CylinderFillingSession_Detail_CylinderFillingSession_Main");
        });

        modelBuilder.Entity<CylinderFillingSessionMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("CylinderFillingSession_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CfsessionDate).HasColumnName("CFSession_Date");
            entity.Property(e => e.CfsessionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CFSession_no");
            entity.Property(e => e.Checkedby).HasMaxLength(50);
            entity.Property(e => e.Fillerman).HasMaxLength(50);
            entity.Property(e => e.GrnKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRN_Key");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Platform).HasMaxLength(50);
            entity.Property(e => e.Product).HasMaxLength(50);
            entity.Property(e => e.ProductType)
                .HasMaxLength(50)
                .HasColumnName("Product_Type");
            entity.Property(e => e.Purity).HasMaxLength(50);
            entity.Property(e => e.Shift).HasMaxLength(1);
            entity.Property(e => e.SinKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SIN_Key");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .HasColumnName("Tank_no");
            entity.Property(e => e.Tf085).HasColumnName("TF085");
            entity.Property(e => e.Tf085cp).HasColumnName("TF085CP");
            entity.Property(e => e.Tf085mcl).HasColumnName("TF085MCL");
            entity.Property(e => e.Tf170).HasColumnName("TF170");
            entity.Property(e => e.Tf170cp).HasColumnName("TF170CP");
            entity.Property(e => e.Tf170mcl).HasColumnName("TF170MCL");
            entity.Property(e => e.Tf340).HasColumnName("TF340");
            entity.Property(e => e.Tf340cp).HasColumnName("TF340CP");
            entity.Property(e => e.Tf340mcl).HasColumnName("TF340MCL");
            entity.Property(e => e.Tf500).HasColumnName("TF500");
            entity.Property(e => e.Tf500cp).HasColumnName("TF500CP");
            entity.Property(e => e.Tf500mcl).HasColumnName("TF500MCL");
            entity.Property(e => e.Tf590).HasColumnName("TF590");
            entity.Property(e => e.Tf590cp).HasColumnName("TF590CP");
            entity.Property(e => e.Tf590mcl).HasColumnName("TF590MCL");
            entity.Property(e => e.Tf680).HasColumnName("TF680");
            entity.Property(e => e.Tf680cp).HasColumnName("TF680CP");
            entity.Property(e => e.Tf680mcl).HasColumnName("TF680MCL");
            entity.Property(e => e.Tf790).HasColumnName("TF790");
            entity.Property(e => e.Tf790cp).HasColumnName("TF790CP");
            entity.Property(e => e.Tf790mcl).HasColumnName("TF790MCL");
            entity.Property(e => e.Tf990).HasColumnName("TF990");
            entity.Property(e => e.Tf990cp).HasColumnName("TF990CP");
            entity.Property(e => e.Tf990mcl).HasColumnName("TF990MCL");
            entity.Property(e => e.VoucherKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Voucher_Key");
        });

        modelBuilder.Entity<CylinderFillingSessionTmDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CylinderFillingSessionTM_Detail");

            entity.Property(e => e.AcetoneFilledKg).HasColumnName("AcetoneFilled_Kg");
            entity.Property(e => e.CfsessionTmNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CFSessionTM_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cylinder_no");
            entity.Property(e => e.CylinderWeightWithacetone).HasColumnName("CylinderWeight_withacetone");
            entity.Property(e => e.GasFilledKg).HasColumnName("GasFilled_Kg");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.WeightAfterFilling).HasColumnName("WeightAfter_filling");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.CylinderFillingSessionTmMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .HasConstraintName("FK_CylinderFillingSessionTM_Detail_CylinderFillingSessionTM_Main");
        });

        modelBuilder.Entity<CylinderFillingSessionTmMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("CylinderFillingSessionTM_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CfsessionTmDate).HasColumnName("CFSessionTM_Date");
            entity.Property(e => e.CfsessionTmNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CFSessionTM_no");
            entity.Property(e => e.Checkedby).HasMaxLength(50);
            entity.Property(e => e.Fillerman).HasMaxLength(50);
            entity.Property(e => e.GrnKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRN_Key");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Platform).HasMaxLength(50);
            entity.Property(e => e.Product).HasMaxLength(50);
            entity.Property(e => e.Purity).HasMaxLength(50);
            entity.Property(e => e.Shift).HasMaxLength(1);
            entity.Property(e => e.SinKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SIN_Key");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VoucherKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Voucher_Key");
        });

        modelBuilder.Entity<CylinderReconciliation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Cylinder_Reconciliation");

            entity.Property(e => e.AtcSendTo).HasColumnName("ATC_SendTo");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.Capacity)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CfsOk).HasColumnName("CFS_Ok");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.EcrOk).HasColumnName("ECR_Ok");
            entity.Property(e => e.EcrSendTo).HasColumnName("ECR_SendTo");
            entity.Property(e => e.Ownership)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ownership");
            entity.Property(e => e.Product)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Serial_No");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<CylinderRegistration>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("cylinder_registration");

            entity.Property(e => e.Srno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("srno");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ActualVolume)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("actual_volume");
            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("capacity");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("color");
            entity.Property(e => e.CylinderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cylinder_no");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.FillingCapacity)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("filling_capacity");
            entity.Property(e => e.Gasfilledin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gasfilledin");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("manufacturer");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ownership");
            entity.Property(e => e.Pdate).HasColumnName("pdate");
            entity.Property(e => e.Pfrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pfrom");
            entity.Property(e => e.Pprice).HasColumnName("pprice");
            entity.Property(e => e.Security).HasColumnName("security");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TestPressure)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("test_pressure");
            entity.Property(e => e.TestSchedule)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("test_schedule");
            entity.Property(e => e.ValveSize)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("valve_size");
            entity.Property(e => e.ValveType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Valve_Type");
            entity.Property(e => e.VolumePunched)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("volume_punched");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.WorkingPressure)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("working_pressure");
        });

        modelBuilder.Entity<DailyTankStatusDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Daily_Tank_Status_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CurrentLevel).HasColumnName("current_level");
            entity.Property(e => e.CurrentPressure).HasColumnName("current_pressure");
            entity.Property(e => e.CurrentQtyKg).HasColumnName("current_qty_kg");
            entity.Property(e => e.CurrentQtyM3).HasColumnName("current_qty_m3");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DifferenceKg).HasColumnName("difference_kg");
            entity.Property(e => e.DifferenceM3).HasColumnName("difference_m3");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.FilledQtyasperplfKg).HasColumnName("filled_qtyasperplf_kg");
            entity.Property(e => e.FilledQtyasperplfM3).HasColumnName("filled_qtyasperplf_m3");
            entity.Property(e => e.FilledQtyaspertankKg).HasColumnName("filled_qtyaspertank_kg");
            entity.Property(e => e.FilledQtyaspertankM3).HasColumnName("filled_qtyaspertank_m3");
            entity.Property(e => e.PreviousLevel).HasColumnName("previous_level");
            entity.Property(e => e.PreviousPressure).HasColumnName("previous_pressure");
            entity.Property(e => e.QtyAvailableforfillingKg).HasColumnName("qty_availableforfilling_kg");
            entity.Property(e => e.QtyAvailableforfillingM3).HasColumnName("qty_availableforfilling_m3");
            entity.Property(e => e.QtyDecantedKg).HasColumnName("qty_decanted_kg");
            entity.Property(e => e.QtyDecantedM3).HasColumnName("qty_decanted_m3");
            entity.Property(e => e.QtyPreviousKg).HasColumnName("qty_previous_kg");
            entity.Property(e => e.QtyPreviousM3).HasColumnName("qty_previous_m3");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SerialNo).HasColumnName("serial_no");
            entity.Property(e => e.TankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("tank_name");
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tank_no");

            entity.HasOne(d => d.DailyTankStatusMaster).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId, d.FYear })
                .HasConstraintName("FK_Daily_Tank_Status_Detail_Daily_Tank_Status_Master");
        });

        modelBuilder.Entity<DailyTankStatusMaster>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId, e.FYear }).HasName("PK_Daily_Tank_Status_Master_1");

            entity.ToTable("Daily_Tank_Status_Master");

            entity.Property(e => e.SerialNo).HasColumnName("serial_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.SrNo).HasColumnName("sr_no");
            entity.Property(e => e.Subsegment).HasColumnName("subsegment");
        });

        modelBuilder.Entity<DealPurchase>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_DealPurchase_1");

            entity.ToTable("DealPurchase");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.DealPurchases)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_DealPurchase_Business_Partners_Main");
        });

        modelBuilder.Entity<DealPurchaseDetail>(entity =>
        {
            entity.HasKey(e => e.FileNo);

            entity.ToTable("DealPurchaseDetail");

            entity.HasIndex(e => e.FileNo, "FileNoUnique_DealPurchaseDetail").IsUnique();

            entity.Property(e => e.FileNo).ValueGeneratedNever();
            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.DealPurchase).WithMany(p => p.DealPurchaseDetails)
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_DealPurchaseDetail_DealPurchase");
        });

        modelBuilder.Entity<DealPurchaseDetailActual>(entity =>
        {
            entity.HasKey(e => e.FileNo);

            entity.ToTable("DealPurchaseDetailActual");

            entity.HasIndex(e => e.FileNo, "FileNoUnique_DealPurchaseDetailActual").IsUnique();

            entity.Property(e => e.FileNo).ValueGeneratedNever();
            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.DealPurchase).WithMany(p => p.DealPurchaseDetailActuals)
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_DealPurchaseDetailActual_DealPurchase");
        });

        modelBuilder.Entity<DealPurchaseInstrument>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DealPurchaseInstrument");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.DealPurchase).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_DealPurchaseInstrument_DealPurchase");
        });

        modelBuilder.Entity<DealPurchaseModified>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("DealPurchaseModified");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DpserialNo).HasColumnName("DPSerialNo");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.DealPurchaseModifieds)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_DealPurchaseModified_Business_Partners_Main");

            entity.HasOne(d => d.DealPurchase).WithMany(p => p.DealPurchaseModifieds)
                .HasForeignKey(d => new { d.DealPurchaseSrno, d.CompId })
                .HasConstraintName("FK_DealPurchaseModified_DealPurchase");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.DealPurchaseModifieds)
                .HasForeignKey(d => new { d.Project, d.CompId })
                .HasConstraintName("FK_DealPurchaseModified_ProjectRegistration");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.DealPurchaseModifieds)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_DealPurchaseModified_SubSegment");
        });

        modelBuilder.Entity<DealPurchaseModifiedDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DealPurchaseModifiedDetail");

            entity.HasIndex(e => new { e.Srno, e.CompId, e.FileNo }, "UFileNo_DealPurchaseModifiedDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.DealPurchaseModified).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_DealPurchaseModifiedDetail_DealPurchaseModified");
        });

        modelBuilder.Entity<DealerQuotaDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DealerQuotaDetail");

            entity.HasIndex(e => e.Pid, "uPID_DealerQuotaDetail").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Pid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.DealerQuotum).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_DealerQuotaDetail_DealerQuota");
        });

        modelBuilder.Entity<DealerQuotum>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Pify)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PIFY");
            entity.Property(e => e.Pisrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PISrno");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Comp).WithMany(p => p.DealerQuota)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DealerQuota_Companysetup");

            entity.HasOne(d => d.Suser).WithMany(p => p.DealerQuota)
                .HasForeignKey(d => d.SuserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DealerQuota_Users");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.DealerQuota)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DealerQuota_Business_Partners_Main");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.DealerQuota)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DealerQuota_SubSegment");

            entity.HasOne(d => d.ProjectInventory).WithMany(p => p.DealerQuota)
                .HasForeignKey(d => new { d.Pisrno, d.CompId, d.Pify })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DealerQuota_ProjectInventory");
        });

        modelBuilder.Entity<DecantingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Decanting_Detail");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Dcdate).HasColumnName("dcdate");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.DecantingNo).HasColumnName("Decanting_no");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.Igpdate).HasColumnName("igpdate");
            entity.Property(e => e.Igpno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("igpno");
            entity.Property(e => e.IssueQty).HasColumnName("Issue_Qty");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.Podate).HasColumnName("podate");
            entity.Property(e => e.Pono)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pono");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdIgp).HasColumnName("SubSegment_ID_IGP");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value).HasColumnName("VALUE");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DecantingMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .HasConstraintName("FK_Decanting_Detail_Decanting_Main");
        });

        modelBuilder.Entity<DecantingMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("Decanting_Main");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AfterKg).HasColumnName("After_kg");
            entity.Property(e => e.AfterKgTankTwo).HasColumnName("After_kg_Tank_two");
            entity.Property(e => e.AfterLevel).HasColumnName("After_level");
            entity.Property(e => e.AfterLevelTankTwo).HasColumnName("After_level_Tank_two");
            entity.Property(e => e.AfterLtr).HasColumnName("After_Ltr");
            entity.Property(e => e.AfterLtrTankTwo).HasColumnName("After_Ltr_Tank_two");
            entity.Property(e => e.AfterM3).HasColumnName("After_m3");
            entity.Property(e => e.AfterM3TankTwo).HasColumnName("After_m3_Tank_two");
            entity.Property(e => e.AfterPressure).HasColumnName("After_pressure");
            entity.Property(e => e.AfterPressureTankTwo).HasColumnName("After_pressure_Tank_two");
            entity.Property(e => e.BeforeKg).HasColumnName("Before_kg");
            entity.Property(e => e.BeforeKgTankTwo).HasColumnName("Before_kg_Tank_two");
            entity.Property(e => e.BeforeLevel).HasColumnName("Before_level");
            entity.Property(e => e.BeforeLevelTankTwo).HasColumnName("Before_level_Tank_two");
            entity.Property(e => e.BeforeLtr).HasColumnName("Before_Ltr");
            entity.Property(e => e.BeforeLtrTankTwo).HasColumnName("Before_Ltr_Tank_two");
            entity.Property(e => e.BeforeM3).HasColumnName("Before_m3");
            entity.Property(e => e.BeforeM3TankTwo).HasColumnName("Before_m3_Tank_two");
            entity.Property(e => e.BeforePressure).HasColumnName("Before_pressure");
            entity.Property(e => e.BeforePressureTankTwo).HasColumnName("Before_pressure_Tank_two");
            entity.Property(e => e.ChartKg).HasColumnName("Chart_kg");
            entity.Property(e => e.ChartKgTankTwo).HasColumnName("Chart_kg_Tank_two");
            entity.Property(e => e.ChartLtr).HasColumnName("Chart_Ltr");
            entity.Property(e => e.ChartLtrTankTwo).HasColumnName("Chart_Ltr_Tank_two");
            entity.Property(e => e.ChartM3).HasColumnName("Chart_m3");
            entity.Property(e => e.ChartM3TankTwo).HasColumnName("Chart_m3_Tank_two");
            entity.Property(e => e.DecantingDate).HasColumnName("Decanting_date");
            entity.Property(e => e.DecantingKg).HasColumnName("Decanting_kg");
            entity.Property(e => e.DecantingLtr).HasColumnName("Decanting_Ltr");
            entity.Property(e => e.DecantingM3).HasColumnName("Decanting_m3");
            entity.Property(e => e.DecantingNo).HasColumnName("Decanting_no");
            entity.Property(e => e.IgpKg).HasColumnName("IGP_kg");
            entity.Property(e => e.IgpLtr).HasColumnName("IGP_Ltr");
            entity.Property(e => e.IgpM3).HasColumnName("IGP_m3");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .HasColumnName("Tank_no");
            entity.Property(e => e.TankTwo)
                .HasMaxLength(50)
                .HasColumnName("Tank_two");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DeliveryDispatchMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("DeliveryDispatchMaster");

            entity.HasIndex(e => e.Dokey, "UNDeliveryOrder").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CreditNoteStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Dodate).HasColumnName("DODate");
            entity.Property(e => e.Dokey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOKey");
            entity.Property(e => e.Dono).HasColumnName("DONo");
            entity.Property(e => e.FreightType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesManId).HasColumnName("SalesManID");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TransportType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TransporterId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TransporterID");
            entity.Property(e => e.TransporterName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.DeliveryDispatchMasters)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_DeliveryDispatchMaster_Business_Partners_Main");

            entity.HasOne(d => d.EmployeeRegistrationMain).WithMany(p => p.DeliveryDispatchMasters)
                .HasForeignKey(d => new { d.CompId, d.SalesManId })
                .HasConstraintName("FK_EmployeeID_DeliveryDispatchMaster");

            entity.HasOne(d => d.RegionNavigation).WithMany(p => p.DeliveryDispatchMasters)
                .HasForeignKey(d => new { d.Region, d.CompId })
                .HasConstraintName("FK_RegionIDDeliveryDispatchMaster");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.DeliveryDispatchMasters)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_SubSegmentID_DeliveryDispatchMaster");
        });

        modelBuilder.Entity<DeliveryOrderCashSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DeliveryOrder_CashSales");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeliveryOrderMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .HasConstraintName("FK_DeliveryOrder_CashSales_DeliveryOrder_Master");
        });

        modelBuilder.Entity<DeliveryOrderDriverLoader>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DeliveryOrder_DriverLoader");

            entity.Property(e => e.Code)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Contact_no");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JobNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<DeliveryOrderMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FYear }).HasName("PK_DeliveryOrder_Master_1");

            entity.ToTable("DeliveryOrder_Master");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_CODE");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommissionAgent)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Commission_Agent");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryArrangement)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DiscountStatus)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("Hold");
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Particulars)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Workstation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DeliveryOrderMasterReturn>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FYear });

            entity.ToTable("DeliveryOrder_Master_Return");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_CODE");
            entity.Property(e => e.CommissionAgent)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Commission_Agent");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.DoReturnNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_Return_No");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Workstation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DeliveryOrderParty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DeliveryOrder_Party");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CgsValue).HasColumnName("CGS_Value");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DeliveryAddress).IsUnicode(false);
            entity.Property(e => e.DeliveryAddress2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.Dv).HasColumnName("DV");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.JoDate).HasColumnName("JO_Date");
            entity.Property(e => e.JoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JO_No");
            entity.Property(e => e.QytCp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qyt_CP");
            entity.Property(e => e.QytCylinder).HasColumnName("Qyt_Cylinder");
            entity.Property(e => e.QytKg).HasColumnName("Qyt_Kg");
            entity.Property(e => e.QytLiter).HasColumnName("Qyt_liter");
            entity.Property(e => e.QytM3).HasColumnName("Qyt_m3");
            entity.Property(e => e.QytMcl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qyt_MCL");
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.SNo).HasColumnName("S_No");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegmentID_Detail");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");

            entity.HasOne(d => d.DeliveryOrderMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DeliveryOrder_Party_DeliveryOrder_Master");
        });

        modelBuilder.Entity<DeliveryOrderPartyReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DeliveryOrder_Party_Return");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CgsValue).HasColumnName("CGS_Value");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.JoDate).HasColumnName("JO_Date");
            entity.Property(e => e.JoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JO_No");
            entity.Property(e => e.QytCp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qyt_CP");
            entity.Property(e => e.QytCylinder).HasColumnName("Qyt_Cylinder");
            entity.Property(e => e.QytKg).HasColumnName("Qyt_Kg");
            entity.Property(e => e.QytLiter).HasColumnName("Qyt_liter");
            entity.Property(e => e.QytM3).HasColumnName("Qyt_m3");
            entity.Property(e => e.QytMcl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qyt_MCL");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.SNo).HasColumnName("S_No");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegmentID_Detail");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");

            entity.HasOne(d => d.DeliveryOrderMasterReturn).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_DeliveryOrder_Party_Return_DeliveryOrder_Master_Return");
        });

        modelBuilder.Entity<DeliveryOrderWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DeliveryOrder_Warehouse");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.CylindersQty).HasColumnName("Cylinders_Qty");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.FWarehouseCode).HasColumnName("F_WarehouseCode");
            entity.Property(e => e.FWarehouseSubSegmentCode).HasColumnName("F_WarehouseSubSegmentCode");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.JoDate).HasColumnName("JO_Date");
            entity.Property(e => e.JoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JO_No");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TWarehouseCode).HasColumnName("T_WarehouseCode");
            entity.Property(e => e.TWarehouseSubSegmentCode).HasColumnName("T_WarehouseSubSegmentCode");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DeliveryOrderMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .HasConstraintName("FK_DeliveryOrder_Warehouse_DeliveryOrder_Master");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.DId);

            entity.ToTable("Department");

            entity.Property(e => e.DId)
                .ValueGeneratedNever()
                .HasColumnName("D_id");
            entity.Property(e => e.DName).HasColumnName("D_name");
        });

        modelBuilder.Entity<Deposit>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("Deposit");

            entity.Property(e => e.SerialNo).ValueGeneratedNever();
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<DepositedDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Deposited_Detail");

            entity.Property(e => e.AmountReceived).HasColumnName("Amount_Received");
            entity.Property(e => e.AmountTobeReceived).HasColumnName("Amount_Tobe_Received");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CreditMemoAmount).HasColumnName("Credit_Memo_Amount");
            entity.Property(e => e.CreditMemoDate).HasColumnName("Credit_Memo_Date");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Credit_Memo_No");
            entity.Property(e => e.CylinderQty).HasColumnName("Cylinder_Qty");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FuthurTax).HasColumnName("Futhur_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IncomeTax).HasColumnName("Income_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.KgQty).HasColumnName("KG_Qty");
            entity.Property(e => e.ReceiptDate).HasColumnName("Receipt_Date");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Receipt_no");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxPayable).HasColumnName("Sales_Tax_payable");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalNetValue).HasColumnName("Total_Net_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WhTax).HasColumnName("WH_Tax");

            entity.HasOne(d => d.DepositedMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .HasConstraintName("FK_Deposited_Detail_Deposited_Main");
        });

        modelBuilder.Entity<DepositedMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FYear });

            entity.ToTable("Deposited_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ChequeAmount).HasColumnName("Cheque_Amount");
            entity.Property(e => e.ChequeDate).HasColumnName("Cheque_Date");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cheque_No");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DepositedDate).HasColumnName("Deposited_Date");
            entity.Property(e => e.DepositedIn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Deposited_IN");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.SaveCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Save_creationDate");
            entity.Property(e => e.SaveUserid).HasColumnName("Save_userid");
            entity.Property(e => e.SaveUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_username");
            entity.Property(e => e.SaveWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_workstation");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vKey");
        });

        modelBuilder.Entity<Depreciation>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_Depreciation_1");

            entity.ToTable("Depreciation");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TypeId).HasColumnName("TypeID");

            entity.HasOne(d => d.Comp).WithMany(p => p.Depreciations)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Depreciation_Companysetup");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.Depreciations)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_Depreciation_SubSegment");

            entity.HasOne(d => d.AssetType).WithMany(p => p.Depreciations)
                .HasForeignKey(d => new { d.TypeId, d.CompId })
                .HasConstraintName("FK_Depreciation_AssetType");
        });

        modelBuilder.Entity<DepreciationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DepreciationDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LocationId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.Depreciation).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_DepreciationDetail_Depreciation");
        });

        modelBuilder.Entity<Detail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Dcdate).HasColumnName("dcdate");
            entity.Property(e => e.Dcno).HasColumnName("dcno");
            entity.Property(e => e.Igpdate).HasColumnName("igpdate");
            entity.Property(e => e.Igpno).HasColumnName("igpno");
            entity.Property(e => e.KeyField).HasMaxLength(20);
            entity.Property(e => e.Misc).HasColumnType("money");
            entity.Property(e => e.Podate).HasColumnName("podate");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.Reqdate).HasColumnName("reqdate");
            entity.Property(e => e.Reqno).HasColumnName("reqno");
            entity.Property(e => e.StCode)
                .HasMaxLength(10)
                .HasColumnName("st_code");
            entity.Property(e => e.Supliercode)
                .HasMaxLength(50)
                .HasColumnName("supliercode");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("TR_Accept");
            entity.Property(e => e.TrCartrage)
                .HasColumnType("money")
                .HasColumnName("tr_cartrage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("TR_FR");
            entity.Property(e => e.TrGrnno)
                .HasMaxLength(5)
                .HasColumnName("tr_Grnno");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrMode)
                .HasMaxLength(1)
                .HasColumnName("tr_Mode");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("TR_OTHER");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPino)
                .HasMaxLength(5)
                .HasColumnName("tr_Pino");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrPretGrnno)
                .HasMaxLength(5)
                .HasColumnName("tr_PretGRNno");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("TR_QTY");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrType)
                .HasMaxLength(2)
                .HasColumnName("tr_Type");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("TR_VALUE");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
            entity.Property(e => e.Uom)
                .HasMaxLength(25)
                .HasColumnName("uom");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<DiscountDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Discount_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DiNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DI_no");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.NormalDiscount).HasColumnName("Normal_Discount");
            entity.Property(e => e.ProceduralDiscount).HasColumnName("Procedural_Discount");
            entity.Property(e => e.PromotionalDiscount).HasColumnName("Promotional_Discount");
            entity.Property(e => e.SeasonalDiscount).HasColumnName("Seasonal_Discount");
            entity.Property(e => e.SpecialDiscount).HasColumnName("Special_Discount");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.DiscountsMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_Discount_Detail_Discounts_Main");
        });

        modelBuilder.Entity<DiscountPolicyBusinessPartnerDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DiscountPolicyBusinessPartnerDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_DiscountPolicyBusinessPartnerDetail_Business_Partners_Main");

            entity.HasOne(d => d.DiscountPolicyRegistration).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_DiscountPolicyBusinessPartnerDetail_DiscountPolicyRegistration");
        });

        modelBuilder.Entity<DiscountPolicyRegistration>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("DiscountPolicyRegistration");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Criteria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PolicyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<DiscountPolicyRegistrationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DiscountPolicyRegistrationDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DiscountCriteria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountTypeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParentGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.SalesType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DiscountTypeRegistration).WithMany()
                .HasForeignKey(d => new { d.DiscountTypeCode, d.CompId })
                .HasConstraintName("FK_DiscountPolicyRegistrationDetail_DiscountTypeRegistration");

            entity.HasOne(d => d.DiscountPolicyRegistration).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_DiscountPolicyRegistrationDetail_DiscountPolicyRegistration");
        });

        modelBuilder.Entity<DiscountPolicyRegistrationSlab>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DiscountTypeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParentGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DiscountPolicyRegistration).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DiscountPolicyRegistrationSlabs_DiscountPolicyRegistration");
        });

        modelBuilder.Entity<DiscountPosting>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("DiscountPosting");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Criteria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountTypeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PolicySrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.DiscountPostings)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_DiscountPosting_Business_Partners_Main");

            entity.HasOne(d => d.DiscountPolicyRegistration).WithMany(p => p.DiscountPostings)
                .HasForeignKey(d => new { d.PolicySrno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_DiscountPosting_DiscountPolicyRegistration");
        });

        modelBuilder.Entity<DiscountPostingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DiscountPostingDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DiscountType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Grnsrno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("GRNSrno");
            entity.Property(e => e.ParentGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DiscountPosting).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_DiscountPostingDetail_DiscountPosting");
        });

        modelBuilder.Entity<DiscountTypeRegistration>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId }).HasName("PK_DiscountTypeRegistration_1");

            entity.ToTable("DiscountTypeRegistration");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DiscountTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DiscountsMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("Discounts_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
        });

        modelBuilder.Entity<DispatchDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Dispatch_Detail");

            entity.Property(e => e.AmountReceived).HasColumnName("Amount_Received");
            entity.Property(e => e.AmountTobeReceived).HasColumnName("Amount_tobe_Received");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.CreditMemoAmount).HasColumnName("Credit_Memo_Amount");
            entity.Property(e => e.CreditMemoDate).HasColumnName("Credit_Memo_Date");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Credit_Memo_No");
            entity.Property(e => e.CylinderQty).HasColumnName("Cylinder_Qty");
            entity.Property(e => e.DocDate).HasColumnName("DOC_Date");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOC_No");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOC_Type");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FuthurTax).HasColumnName("Futhur_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IncomeTax).HasColumnName("Income_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.IpDate).HasColumnName("IP_Date");
            entity.Property(e => e.IpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IP_no");
            entity.Property(e => e.IpSrno).HasColumnName("IP_Srno");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.KgQty).HasColumnName("KG_Qty");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxPayable).HasColumnName("Sales_Tax_payable");
            entity.Property(e => e.SelectIpNo).HasColumnName("Select_IP_No");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_No");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TcsNo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TCS_NO");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalNetValue).HasColumnName("Total_Net_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WhTax).HasColumnName("WH_Tax");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.DispatchMaster).WithMany()
                .HasForeignKey(d => new { d.SrNo, d.CompId, d.Year })
                .HasConstraintName("FK_Dispatch_Detail_Dispatch_Master");
        });

        modelBuilder.Entity<DispatchMaster>(entity =>
        {
            entity.HasKey(e => new { e.SrNo, e.CompId, e.Year });

            entity.ToTable("Dispatch_Master");

            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_No");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreationDate).HasColumnName("Creation_date");
            entity.Property(e => e.DispatchNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Dispatch_No");
            entity.Property(e => e.ModifiedDate).HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_UserName");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.UserId).HasColumnName("User_ID");
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WorkStation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DoDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DO_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DoBill)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_Bill");
            entity.Property(e => e.DoGrnno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_Grnno");
            entity.Property(e => e.DoItdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DO_ITDesc");
            entity.Property(e => e.DoItem)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("DO_Item");
            entity.Property(e => e.DoParty)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_Party");
            entity.Property(e => e.DoPi)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_PI");
            entity.Property(e => e.DoPo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_PO");
            entity.Property(e => e.DoQty).HasColumnName("DO_Qty");
            entity.Property(e => e.DoSrno).HasColumnName("DO_Srno");
            entity.Property(e => e.DoType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DO_Type");
            entity.Property(e => e.DoUnit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DO_Unit");
            entity.Property(e => e.DoValue).HasColumnName("DO_Value");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Gl_Year");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("keyfield");
        });

        modelBuilder.Entity<DoDetail1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DoDetail");

            entity.Property(e => e.CompId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("comp_id");
            entity.Property(e => e.SAvgRate).HasColumnName("s_AvgRate");
            entity.Property(e => e.SAvgValue).HasColumnName("s_AvgValue");
            entity.Property(e => e.SCount)
                .HasMaxLength(50)
                .HasColumnName("s_count");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SIncValue).HasColumnName("s_IncValue");
            entity.Property(e => e.SMainkey)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_mainkey");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SPipes).HasColumnName("s_Pipes");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SSaleRate)
                .HasMaxLength(53)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SSalesTaxValue).HasColumnName("s_SalesTaxValue");
            entity.Property(e => e.SSerial).HasColumnName("s_serial");
            entity.Property(e => e.SSfed).HasColumnName("s_SFED");
            entity.Property(e => e.SUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Unit");
        });

        modelBuilder.Entity<DoMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DO_MAIN");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DoDate)
                .HasColumnType("datetime")
                .HasColumnName("DO_Date");
            entity.Property(e => e.DoDelby)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DO_Delby");
            entity.Property(e => e.DoNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.DoRemarks)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DO_Remarks");
            entity.Property(e => e.DoType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DO_Type");
            entity.Property(e => e.DoVehicle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DO_vehicle");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Gl_Year");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("keyfield");
        });

        modelBuilder.Entity<Domain1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DOMain");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Ogpdate).HasColumnName("ogpdate");
            entity.Property(e => e.Ogpno)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ogpno");
            entity.Property(e => e.SAccountskey)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_accountskey");
            entity.Property(e => e.SBilty)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Bilty");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(50)
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SDriver)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_driver");
            entity.Property(e => e.SInvdate)
                .HasColumnType("datetime")
                .HasColumnName("s_invdate");
            entity.Property(e => e.SInvno).HasColumnName("s_invno");
            entity.Property(e => e.SMainKey)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_MainKey");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(50)
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SOwgpDate)
                .HasColumnType("datetime")
                .HasColumnName("s_OwgpDate");
            entity.Property(e => e.SOwgpNo).HasColumnName("s_OwgpNo");
            entity.Property(e => e.SRefDate)
                .HasColumnType("datetime")
                .HasColumnName("s_refDate");
            entity.Property(e => e.SRefNo)
                .HasMaxLength(50)
                .HasColumnName("s_refNo");
            entity.Property(e => e.SStper).HasColumnName("s_stper");
            entity.Property(e => e.SSupplier)
                .HasMaxLength(50)
                .HasColumnName("s_Supplier");
            entity.Property(e => e.SType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_type");
            entity.Property(e => e.SVehicle)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_vehicle");
            entity.Property(e => e.SYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_year");
        });

        modelBuilder.Entity<DriverRegistration>(entity =>
        {
            entity.HasKey(e => new { e.DriverId, e.CompId });

            entity.ToTable("Driver_Registration");

            entity.Property(e => e.DriverId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Driver_Id");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.DailyExpense)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Daily_expense");
            entity.Property(e => e.DailyPayable)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Daily_payable");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.JoiningDate).HasColumnName("Joining_date");
            entity.Property(e => e.LicenceExpiryDate).HasColumnName("LicenceExpiry_date");
            entity.Property(e => e.LicenceNo)
                .IsUnicode(false)
                .HasColumnName("Licence_no");
            entity.Property(e => e.LicenceType)
                .IsUnicode(false)
                .HasColumnName("Licence_type");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Phone_no");
            entity.Property(e => e.Province)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnName("Registration_date");
            entity.Property(e => e.Remarks).IsUnicode(false);
        });

        modelBuilder.Entity<DuplicatePendingLead>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable(tb => tb.HasTrigger("Tr_DuplicatePendingLeads_Update"));

            entity.Property(e => e.City)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerName).HasMaxLength(4000);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.FormId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormID");
            entity.Property(e => e.LeadType)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Occupation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrganicStatus)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.QueueTeamId).HasColumnName("QueueTeamID");
            entity.Property(e => e.Reference)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("reference");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TeamId).HasColumnName("TeamID");
            entity.Property(e => e.UncontactNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNContactNo");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Whatsapp)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Ecr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ECR");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.EcrNo)
                .HasMaxLength(255)
                .HasColumnName("ECR_no");
            entity.Property(e => e.Ownership).HasMaxLength(255);
            entity.Property(e => e.PartyCode)
                .HasMaxLength(255)
                .HasColumnName("Party_code");
            entity.Property(e => e.Product).HasMaxLength(255);
            entity.Property(e => e.Srno).HasMaxLength(255);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year).HasMaxLength(255);
        });

        modelBuilder.Entity<EcrDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ECR_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cylinder_no");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.KeysNavigation).WithMany()
                .HasForeignKey(d => d.Keys)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ECR_Detail_ECR_Main");
        });

        modelBuilder.Entity<EcrDetailNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ECR_Detail_New");

            entity.Property(e => e.Capacity)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.EcrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ECR_no");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.Product)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.EcrMainNew).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ECR_Detail_New_ECR_Main_New");
        });

        modelBuilder.Entity<EcrMain>(entity =>
        {
            entity.HasKey(e => e.Keys);

            entity.ToTable("ECR_Main");

            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo).HasColumnName("ECR_no");
            entity.Property(e => e.IgpDate).HasColumnName("IGP_date");
            entity.Property(e => e.IgpNo).HasColumnName("IGP_no");
            entity.Property(e => e.RouteReturn).IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<EcrMainNew>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("ECR_Main_New");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ECR_no");
            entity.Property(e => e.IgpDate).HasColumnName("IGP_date");
            entity.Property(e => e.IgpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IGP_no");
            entity.Property(e => e.RouteReturn).IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalCylinder).HasColumnName("Total_Cylinder");
            entity.Property(e => e.TotalOk).HasColumnName("Total_OK");
            entity.Property(e => e.TotalSendtoTestShop).HasColumnName("Total_SendtoTestShop");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
        });

        modelBuilder.Entity<EcrProductName>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ECR_Product_Name");

            entity.Property(e => e.ProductName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Product_Name");
        });

        modelBuilder.Entity<EdataBookingForm>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_EDataBookingForm_1");

            entity.ToTable("EDataBookingForm");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileData).IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TransactionFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmailCompaign>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("EmailCompaign");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CustomerType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Msg)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Subject).HasMaxLength(500);
            entity.Property(e => e.TypeId).HasColumnName("TypeID");

            entity.HasOne(d => d.Comp).WithMany(p => p.EmailCompaigns)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmailCompaign_Companysetup");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.EmailCompaigns)
                .HasForeignKey(d => new { d.Project, d.CompId })
                .HasConstraintName("FK_EmailCompaign_ProjectRegistration");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.EmailCompaigns)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_EmailCompaign_SubSegment");

            entity.HasOne(d => d.BookingTypeDetail).WithMany(p => p.EmailCompaigns)
                .HasForeignKey(d => new { d.TypeId, d.CompId })
                .HasConstraintName("FK_EmailCompaign_BookingTypeDetails");
        });

        modelBuilder.Entity<EmailCompaignDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmailCompaignDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.EmailCompaign).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_EmailCompaignDetail_EmailCompaign");
        });

        modelBuilder.Entity<EmployeeBenifit>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("EmployeeBenifit");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Criteria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RuleLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeBenifitDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmployeeBenifitDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Provision)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProvisionFrequency)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.EmployeeBenifit).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmployeeBenifitDetail_EmployeeBenifit");
        });

        modelBuilder.Entity<EmployeeFingerPrintRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmployeeFingerPrintRegistration");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Data).HasColumnType("text");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<EmployeeOfMonth>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("EmployeeOfMonth");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ImagePath)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Month)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnType("image");
        });

        modelBuilder.Entity<EmployeeRegistrationAssignmentPortable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Registration_AssignmentPortables");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Description");
            entity.Property(e => e.PackageDetail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Package_Detail");
            entity.Property(e => e.Remarks)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");

            entity.HasOne(d => d.EmployeeRegistrationMain).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SrNo })
                .HasConstraintName("FK_Employee_Registration_AssignmentPortables_Employee_Registration_Main");
        });

        modelBuilder.Entity<EmployeeRegistrationAssignmentTadum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Registration_AssignmentTADA");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");

            entity.HasOne(d => d.EmployeeRegistrationMain).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SrNo })
                .HasConstraintName("FK_Employee_Registration_AssignmentTADA_Employee_Registration_Main");
        });

        modelBuilder.Entity<EmployeeRegistrationAssignmentVehicle>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Registration_AssignmentVehicles");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FuelAllowedLtr).HasColumnName("Fuel_Allowed_Ltr");
            entity.Property(e => e.MeterReading).HasColumnName("Meter_Reading");
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.UseType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Vehicle)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.EmployeeRegistrationMain).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SrNo })
                .HasConstraintName("FK_Employee_Registration_AssignmentVehicles_Employee_Registration_Main");
        });

        modelBuilder.Entity<EmployeeRegistrationBasicInformation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Registration_BasicInformation");

            entity.Property(e => e.Address)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.BloodGroup)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Dob)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DOB");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Email_Address");
            entity.Property(e => e.FatherName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Marital_Status");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Nationality)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinContactNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Next_To_Kin_ContactNo");
            entity.Property(e => e.NextToKinName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Next_To_Kin_Name");
            entity.Property(e => e.PostalAddress)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Postal_Address");
            entity.Property(e => e.Referedby)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Religion)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");

            entity.HasOne(d => d.EmployeeRegistrationMain).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SrNo })
                .HasConstraintName("FK_Employee_Registration_BasicInformation_Employee_Registration_Main");
        });

        modelBuilder.Entity<EmployeeRegistrationDesignation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Registration_Designation");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.Segment)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.Type)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.EmployeeRegistrationMain).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SrNo })
                .HasConstraintName("FK_Employee_Registration_Designation_Employee_Registration_Main");
        });

        modelBuilder.Entity<EmployeeRegistrationJobDescription>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Registration_JobDescription");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.JobDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Job_Description");
            entity.Property(e => e.Remarks)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReportTo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Report_to");
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.Type)
                .HasMaxLength(30)
                .IsUnicode(false);

            entity.HasOne(d => d.EmployeeRegistrationMain).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SrNo })
                .HasConstraintName("FK_Employee_Registration_JobDescription_Employee_Registration_Main");
        });

        modelBuilder.Entity<EmployeeRegistrationLeaveManagement>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Registration_LeaveManagement");

            entity.Property(e => e.AllowedLeave)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Allowed_Leave");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.LeaveEncashment).HasColumnName("Leave_Encashment");
            entity.Property(e => e.LeaveType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Leave_Type");
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.StandardLeave)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Standard_leave");

            entity.HasOne(d => d.EmployeeRegistrationMain).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SrNo })
                .HasConstraintName("FK_Employee_Registration_LeaveManagement_Employee_Registration_Main");
        });

        modelBuilder.Entity<EmployeeRegistrationMain>(entity =>
        {
            entity.HasKey(e => new { e.CompId, e.SrNo });

            entity.ToTable("Employee_Registration_Main");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.AppointLetterNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Appoint_Letter_No");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BloodGroup)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DepttCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Deptt_Code");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Email_Address");
            entity.Property(e => e.EmployeeAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EmploymentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FatherName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JobPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Job_position");
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Marital_Status");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Nationality)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinContactNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Next_To_Kin_ContactNo");
            entity.Property(e => e.NextToKinName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Next_To_Kin_Name");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PostalAddress)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Postal_Address");
            entity.Property(e => e.Referedby)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Religion)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Scale)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_no");
            entity.Property(e => e.Signature).HasColumnType("image");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserIds).HasColumnName("UserIDs");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WorkStation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Zkid).HasColumnName("ZKID");
        });

        modelBuilder.Entity<EmployeeRegistrationSalaryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Registration_SalaryDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.PayrollExpense)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Per)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PerquisitesCode)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SalaryPayable)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.TaxPayableCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.EmployeeRegistrationMain).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SrNo })
                .HasConstraintName("FK_Employee_Registration_SalaryDetail_Employee_Registration_Main");
        });

        modelBuilder.Entity<EmployeeVoucherDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Voucher_Detail");

            entity.Property(e => e.BpCode)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BudgetCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Budget_Code");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.LoanAdvanceCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Site).HasMaxLength(4000);
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentId1).HasColumnName("SubSegment_ID_");
            entity.Property(e => e.SubSegmentL1Id).HasColumnName("SubSegment_L_1_ID");
            entity.Property(e => e.SubSegmentL2Id).HasColumnName("SubSegment_L_2_ID");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .HasColumnName("vType");

            entity.HasOne(d => d.VKeyNavigation).WithMany()
                .HasForeignKey(d => d.VKey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employee_Voucher_Detail_Employee_Voucher_Main");
        });

        modelBuilder.Entity<EmployeeVoucherMain>(entity =>
        {
            entity.HasKey(e => e.VKey);

            entity.ToTable("Employee_Voucher_Main");

            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VCancel).HasColumnName("vCancel");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<EquipmentCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EQUIPMENT_CATEGORY");

            entity.Property(e => e.CategoryCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("category_code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EquipmentGroup>(entity =>
        {
            entity.HasKey(e => new { e.ItCode, e.CompId }).HasName("PK_EQUIPMENT_GROUP_1");

            entity.ToTable("EQUIPMENT_GROUP");

            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ItAvgval).HasColumnName("IT_AVGVAL");
            entity.Property(e => e.ItCRate).HasColumnName("it_cRate");
            entity.Property(e => e.ItCapCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("it_capCode");
            entity.Property(e => e.ItCbal).HasColumnName("IT_CBAL");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CGL");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItExpcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_EXPCODE");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval).HasColumnName("IT_OPAGVAL");
            entity.Property(e => e.ItOpbal).HasColumnName("IT_OPBAL");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_PGL");
            entity.Property(e => e.ItPreturnscode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_PRETURNSCODE");
            entity.Property(e => e.ItReturnscode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_RETURNSCODE");
            entity.Property(e => e.ItRoqty).HasColumnName("it_roqty");
            entity.Property(e => e.ItSalecode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_SALECODE");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.ItUserid).HasColumnName("it_userid");
            entity.Property(e => e.ItWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("it_workstation");
            entity.Property(e => e.Opdate)
                .HasColumnType("datetime")
                .HasColumnName("opdate");
            entity.Property(e => e.OpeningYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sUser");
        });

        modelBuilder.Entity<EquipmentRegistrationDetailAttachment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equipment_Registration_Detail_Attachments");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_GROUP_CODE");
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REMARKS");
            entity.Property(e => e.UploadFile).HasColumnName("Upload_File");

            entity.HasOne(d => d.EquipmentRegistrationMaster).WithMany()
                .HasForeignKey(d => new { d.ItemGroupCode, d.ItemCode, d.CompId })
                .HasConstraintName("FK_Equipment_Registration_Detail_Attachments_Equipment_Registration_Master");
        });

        modelBuilder.Entity<EquipmentRegistrationDetailPart>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equipment_Registration_Detail_Parts");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_GROUP_CODE");
            entity.Property(e => e.MakeSupplier)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MAKE_SUPPLIER");
            entity.Property(e => e.Qty).HasColumnName("QTY");
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("REMARKS");

            entity.HasOne(d => d.EquipmentRegistrationMaster).WithMany()
                .HasForeignKey(d => new { d.ItemGroupCode, d.ItemCode, d.CompId })
                .HasConstraintName("FK_Equipment_Registration_Detail_Parts_Equipment_Registration_Master");
        });

        modelBuilder.Entity<EquipmentRegistrationDetailRoutine>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Equipment_Registration_Detail_Routine");

            entity.Property(e => e.AssignedUser)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ASSIGNED_USER");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DESCRIPTION");
            entity.Property(e => e.Interval)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("INTERVAL");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_GROUP_CODE");
            entity.Property(e => e.Priority)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PRIORITY");
            entity.Property(e => e.Remarks)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("REMARKS");
            entity.Property(e => e.TaskCode).HasColumnName("TASK_CODE");
            entity.Property(e => e.TolerenceLevel)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TOLERENCE_LEVEL");
            entity.Property(e => e.Value).HasColumnName("VALUE");

            entity.HasOne(d => d.EquipmentRegistrationMaster).WithMany()
                .HasForeignKey(d => new { d.ItemGroupCode, d.ItemCode, d.CompId })
                .HasConstraintName("FK_Equipment_Registration_Detail_Routine_Equipment_Registration_Master");
        });

        modelBuilder.Entity<EquipmentRegistrationMaster>(entity =>
        {
            entity.HasKey(e => new { e.ItemGroupCode, e.ItemCode, e.CompId }).HasName("PK_Equipment_Registration_Master_1");

            entity.ToTable("Equipment_Registration_Master");

            entity.Property(e => e.ItemGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_GROUP_CODE");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Barcode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BARCODE");
            entity.Property(e => e.Code).HasColumnName("CODE");
            entity.Property(e => e.ItemConsumption)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ITEM_CONSUMPTION");
            entity.Property(e => e.ItemName)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("ITEM_NAME");
            entity.Property(e => e.Make)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MAKE");
            entity.Property(e => e.Model)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MODEL");
            entity.Property(e => e.OperationDate).HasColumnName("OPERATION_DATE");
            entity.Property(e => e.OtherCosts).HasColumnName("OTHER_COSTS");
            entity.Property(e => e.OutsourceServicesCost)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OUTSOURCE_SERVICES_COST");
            entity.Property(e => e.StatusOfEquipment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("STATUS_OF_EQUIPMENT");
            entity.Property(e => e.Subsegment).HasColumnName("SUBSEGMENT");
            entity.Property(e => e.TechLabourCharges)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TECH_LABOUR_CHARGES");

            entity.HasOne(d => d.EquipmentGroup).WithMany(p => p.EquipmentRegistrationMasters)
                .HasForeignKey(d => new { d.ItemGroupCode, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Equipment_Registration_Master_EQUIPMENT_GROUP");
        });

        modelBuilder.Entity<Exm>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("exm");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("issuev");
            entity.Property(e => e.ItCode)
                .HasMaxLength(13)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(50)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
            entity.Property(e => e.Receipt)
                .HasColumnType("money")
                .HasColumnName("receipt");
            entity.Property(e => e.Receiptv).HasColumnType("money");
            entity.Property(e => e.Sale)
                .HasColumnType("money")
                .HasColumnName("sale");
            entity.Property(e => e.Salev)
                .HasColumnType("money")
                .HasColumnName("salev");
        });

        modelBuilder.Entity<ExtraChargesDetail>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ExtraChargesTitle).HasMaxLength(100);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<FacebookLead>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable(tb => tb.HasTrigger("Tr_FaceBookleads_Insert"));

            entity.Property(e => e.AddFromId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("AddFromID");
            entity.Property(e => e.City)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactNumber)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Name).HasMaxLength(1000);
            entity.Property(e => e.Occupation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrganicStatus)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectRegistrationSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamId).HasColumnName("TeamID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WhatsappNumber)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.Suser).WithMany(p => p.FacebookLeads)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_FacebookLeads_ProjectRegistration");
        });

        modelBuilder.Entity<Faq>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("FAQ");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Answer)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Question)
                .HasMaxLength(5000)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.Faqs)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_FAQ_ProjectRegistration");
        });

        modelBuilder.Entity<Fbform>(entity =>
        {
            entity.ToTable("FBForms");

            entity.Property(e => e.FbformId).HasColumnName("FBFormID");
            entity.Property(e => e.AccessToken)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.FormId)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("FormID");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Response).IsUnicode(false);
        });

        modelBuilder.Entity<Fbpage>(entity =>
        {
            entity.HasKey(e => e.FbpagesId);

            entity.ToTable("FBPages");

            entity.Property(e => e.FbpagesId).HasColumnName("FBPagesID");
            entity.Property(e => e.AccessToken)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PageId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PageID");
            entity.Property(e => e.Response).IsUnicode(false);
        });

        modelBuilder.Entity<Fbprofile>(entity =>
        {
            entity.ToTable("FBProfiles");

            entity.Property(e => e.FbprofileId).HasColumnName("FBProfileID");
            entity.Property(e => e.AccessToken)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ProfileId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ProfileID");
            entity.Property(e => e.Response).IsUnicode(false);
        });

        modelBuilder.Entity<Fbwebhook>(entity =>
        {
            entity.ToTable("FBWebhooks");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AddedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Response).IsUnicode(false);
        });

        modelBuilder.Entity<Feedback>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("Feedback");

            entity.Property(e => e.Cnic)
                .HasMaxLength(13)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNIC");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Priority)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FileDeliveryConfirmation>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("FileDeliveryConfirmation");

            entity.HasIndex(e => e.BookingFormSrno, "UBookingFormSrno_FileDeliveryConfirmation").IsUnique();

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno_FileDeliveryConfirmation").IsUnique();

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Dealer)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DeliveredFromLocation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceiverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BookingForm).WithMany(p => p.FileDeliveryConfirmations)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_FileDeliveryConfirmation_BookingForm");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.FileDeliveryConfirmations)
                .HasForeignKey(d => new { d.Dealer, d.CompId })
                .HasConstraintName("FK_FileDeliveryConfirmation_Business_Partners_Main");
        });

        modelBuilder.Entity<FileInventory>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("FileInventory");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Project)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.FileInventories)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_FileInventory_Business_Partners_Main");
        });

        modelBuilder.Entity<FileInventoryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FileInventoryDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.FileInventory).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FileInventoryDetail_FileInventory");
        });

        modelBuilder.Entity<FilePurchasing>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("FilePurchasing");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ReferingPersonCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RemarksMain)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sp2code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP2Code");
            entity.Property(e => e.Sp3code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP3Code");
            entity.Property(e => e.Sp4code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP4Code");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.FilePurchasings)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_FilePurchasing_Business_Partners_Main");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.FilePurchasings)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_FilePurchasing_ProjectRegistration");
        });

        modelBuilder.Entity<FilePurchasingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FilePurchasingDetail");

            entity.HasIndex(e => e.FileNo, "UniqueFileNo_FilePurchasingDetail").IsUnique();

            entity.Property(e => e.Area)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BlockTypeId).HasColumnName("BlockTypeID");
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gpafee).HasColumnName("GPAFee");
            entity.Property(e => e.PlotDetail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Spafee).HasColumnName("SPAFee");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.FilePurchasing).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FilePurchasingDetail_FilePurchasing");
        });

        modelBuilder.Entity<FileReceiving>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("FileReceiving");

            entity.HasIndex(e => e.BookingFormSrno, "UniqueBookingFormSrno_FileReceiving");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PlotNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BookingForm).WithMany(p => p.FileReceivings)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_FileReceiving_BookingForm");
        });

        modelBuilder.Entity<FileSale>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ReferingPersonCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RemarksMain)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sp2code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP2Code");
            entity.Property(e => e.Sp3code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP3Code");
            entity.Property(e => e.Sp4code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP4Code");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.FileSales)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_FileSales_Business_Partners_Main");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.FileSales)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_FileSales_ProjectRegistration");
        });

        modelBuilder.Entity<FileSalesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FileSalesDetail");

            entity.HasIndex(e => e.FileNo, "UniqueFileNo_FileSalesDetail").IsUnique();

            entity.HasIndex(e => e.FileNo, "Unique_FileSalesDetailFileNo").IsUnique();

            entity.Property(e => e.Area)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BlockTypeId).HasColumnName("BlockTypeID");
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FilePurchasingSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FileStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Type)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.FileSale).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FileSalesDetail_FileSales");
        });

        modelBuilder.Entity<FinancialYear>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Financial_Year");

            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
        });

        modelBuilder.Entity<FollowupDetail>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("FollowupDetail", tb =>
                {
                    tb.HasTrigger("TR_InsertUpdate_FollowupDetail");
                    tb.HasTrigger("Tr_Followup_Insert");
                });

            entity.Property(e => e.City)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Followuptime).HasColumnType("datetime");
            entity.Property(e => e.Latitude).HasColumnName("latitude");
            entity.Property(e => e.Longitude).HasColumnName("longitude");
            entity.Property(e => e.NextActivity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NextFollowuptime).HasColumnType("datetime");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.SizeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SizeID");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.FollowupDetails)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_FollowupDetail_ProjectRegistration");
        });

        modelBuilder.Entity<ForecastDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ForecastDetail");

            entity.Property(e => e.Month)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<ForecastMaster>(entity =>
        {
            entity.HasKey(e => e.ProjectId);

            entity.ToTable("ForecastMaster");

            entity.Property(e => e.ProjectId)
                .ValueGeneratedNever()
                .HasColumnName("ProjectID");
        });

        modelBuilder.Entity<FormState>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("form_state");

            entity.Property(e => e.ChildName)
                .HasMaxLength(50)
                .HasColumnName("child_name");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .HasColumnName("state");
            entity.Property(e => e.Users).HasColumnName("users");
        });

        modelBuilder.Entity<FormsIssuance>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("FormsIssuance");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.FormsIssuances)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_FormsIssuance_Users");

            entity.HasOne(d => d.FormsReceiving).WithMany(p => p.FormsIssuances)
                .HasForeignKey(d => new { d.DealNameSrno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_FormsIssuance_FormsReceiving");
        });

        modelBuilder.Entity<FormsIssuanceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FormsIssuanceDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.AreaDetail).WithMany()
                .HasForeignKey(d => new { d.AreaId, d.CompId })
                .HasConstraintName("FK_FormsIssuanceDetail_AreaDetails");

            entity.HasOne(d => d.PropertyDetail).WithMany()
                .HasForeignKey(d => new { d.CategoryId, d.CompId })
                .HasConstraintName("FK_FormsIssuanceDetail_PropertyDetails");
        });

        modelBuilder.Entity<FormsReceiving>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("FormsReceiving");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.FormsReceivings)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_FormsReceiving_Users");
        });

        modelBuilder.Entity<FormsReceivingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FormsReceivingDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.AreaDetail).WithMany()
                .HasForeignKey(d => new { d.AreaId, d.CompId })
                .HasConstraintName("FK_FormsReceivingDetail_AreaDetails");

            entity.HasOne(d => d.PropertyDetail).WithMany()
                .HasForeignKey(d => new { d.CategoryId, d.CompId })
                .HasConstraintName("FK_FormsReceivingDetail_PropertyDetails");

            entity.HasOne(d => d.FormsReceiving).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FormsReceivingDetail_FormsReceiving");
        });

        modelBuilder.Entity<FormsReturn>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("FormsReturn");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.FormsReturns)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_FormsReturn_Users");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.FormsReturns)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_FormsReturn_Business_Partners_Main");
        });

        modelBuilder.Entity<FormsReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FormsReturnDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.AreaDetail).WithMany()
                .HasForeignKey(d => new { d.AreaId, d.CompId })
                .HasConstraintName("FK_FormsReturnDetail_AreaDetails");

            entity.HasOne(d => d.PropertyDetail).WithMany()
                .HasForeignKey(d => new { d.CategoryId, d.CompId })
                .HasConstraintName("FK_FormsReturnDetail_PropertyDetails");

            entity.HasOne(d => d.FormsReturn).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_FormsReturnDetail_FormsReturn");
        });

        modelBuilder.Entity<GeneralFingerPrintRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GeneralFingerPrintRegistration");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Data).HasColumnType("text");
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Glreceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("GLReceipts");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.BankAccountB)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountC)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.Branch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchB)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchC)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNIC");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.ModeOfPayment)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.OnAccountOf)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phase)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Sector)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.VoucherNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VoucherType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Comp).WithMany(p => p.Glreceipts)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLReceipts_Companysetup");

            entity.HasOne(d => d.Suser).WithMany(p => p.Glreceipts)
                .HasForeignKey(d => d.SuserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLReceipts_Users");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.Glreceipts)
                .HasForeignKey(d => new { d.ClientCode, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLReceipts_Business_Partners_Main");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.Glreceipts)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLReceipts_ProjectRegistration");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.Glreceipts)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GLReceipts_SubSegment");
        });

        modelBuilder.Entity<GoogleDrive>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("GoogleDrive");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ApplicationName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.DriveFolderId)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DriveFolderID");
            entity.Property(e => e.JsonPath)
                .HasMaxLength(1000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Grn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GRN");

            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.Qty).HasColumnType("decimal(28, 14)");
            entity.Property(e => e.Value).HasColumnType("decimal(28, 14)");
        });

        modelBuilder.Entity<GrnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GrnDetail");

            entity.Property(e => e.Foc)
                .HasMaxLength(50)
                .HasColumnName("FOC");
            entity.Property(e => e.GrnNo).HasColumnName("grn_no");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("item_desc");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Srno).HasColumnName("srno");
            entity.Property(e => e.Stax).HasColumnName("STax");

            entity.HasOne(d => d.GrnNoNavigation).WithMany()
                .HasForeignKey(d => d.GrnNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GrnDetail_GrnMaster");
        });

        modelBuilder.Entity<GrnMaster>(entity =>
        {
            entity.HasKey(e => e.GrnNo).HasName("PK_GrnMaster_1");

            entity.ToTable("GrnMaster");

            entity.Property(e => e.GrnNo)
                .ValueGeneratedNever()
                .HasColumnName("grn_no");
            entity.Property(e => e.BillDate).HasColumnName("bill_date");
            entity.Property(e => e.BillNo).HasColumnName("bill_no");
            entity.Property(e => e.GatePassno).HasColumnName("gate_passno");
            entity.Property(e => e.GlCode)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("gl_code");
            entity.Property(e => e.GpDate).HasColumnName("gp_date");
            entity.Property(e => e.GrnDate).HasColumnName("grn_date");
            entity.Property(e => e.VoucherDate).HasColumnName("voucher_date");
        });

        modelBuilder.Entity<GrnWithPoDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GRN_With_PO_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.KeyField).HasMaxLength(17);
            entity.Property(e => e.StCode)
                .HasMaxLength(10)
                .HasColumnName("st_code");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("TR_Accept");
            entity.Property(e => e.TrCartage)
                .HasColumnType("money")
                .HasColumnName("tr_cartage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("TR_FR");
            entity.Property(e => e.TrGrnno)
                .HasMaxLength(5)
                .HasColumnName("tr_Grnno");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(4)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrMode)
                .HasMaxLength(1)
                .HasColumnName("tr_Mode");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("TR_OTHER");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPino)
                .HasMaxLength(5)
                .HasColumnName("tr_Pino");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrPretGrnno)
                .HasMaxLength(5)
                .HasColumnName("tr_PretGRNno");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("TR_QTY");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrType)
                .HasMaxLength(5)
                .HasColumnName("tr_Type");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("TR_VALUE");
            entity.Property(e => e.TrWo)
                .HasMaxLength(5)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
            entity.Property(e => e.Year)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<GrnWithPoMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GRN_With_PO_Master");

            entity.Property(e => e.AccountsKey)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Billdate).HasColumnName("billdate");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.DoNo)
                .HasMaxLength(50)
                .HasColumnName("do_no");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.GrnNo).HasColumnName("grn_no");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.IsLocal).HasColumnName("is_local");
            entity.Property(e => e.KeyField).HasMaxLength(17);
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MDesc)
                .HasMaxLength(100)
                .HasColumnName("m_desc");
            entity.Property(e => e.MPono)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.Party)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("PARTY");
            entity.Property(e => e.Posted).HasMaxLength(1);
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .HasColumnName("sUser");
            entity.Property(e => e.Staxcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("staxcode");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TrCreationDate).HasColumnName("tr_creationDate");
            entity.Property(e => e.TrUserid).HasColumnName("tr_userid");
            entity.Property(e => e.TrUsername)
                .HasMaxLength(50)
                .HasColumnName("tr_username");
            entity.Property(e => e.TrWorkstation)
                .HasMaxLength(50)
                .HasColumnName("tr_workstation");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.Year).HasMaxLength(9);
        });

        modelBuilder.Entity<GrnreturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("GRNReturnDetail");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Grnkeys)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRNKeys");
            entity.Property(e => e.Grnsno).HasColumnName("GRNSNo");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Whno).HasColumnName("WHNo");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_GRNReturnDetail_GRNReturnMaster");

            entity.HasOne(d => d.GrnreturnMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_GRNReturnDetail_GRNReturnMaster1");
        });

        modelBuilder.Entity<GrnreturnMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("GRNReturnMaster");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Grndate).HasColumnName("GRNDate");
            entity.Property(e => e.Grnno).HasColumnName("GRNNo");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReturnType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<IgpDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IGP_Detail");

            entity.Property(e => e.ActualQty).HasColumnName("Actual_Qty");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CellNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Cell_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DiscountValue).HasColumnName("Discount_Value");
            entity.Property(e => e.DlCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DL_code");
            entity.Property(e => e.DlDate).HasColumnName("DL_date");
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Driver_name");
            entity.Property(e => e.ExciseDuty).HasColumnName("Excise_Duty");
            entity.Property(e => e.ExciseDutyValue).HasColumnName("Excise_Duty_Value");
            entity.Property(e => e.ExtraDiscount).HasColumnName("Extra_Discount");
            entity.Property(e => e.ExtraDiscountValue).HasColumnName("Extra_Discount_Value");
            entity.Property(e => e.GinDate).HasColumnName("GIN_date");
            entity.Property(e => e.GinNo).HasColumnName("GIN_no");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.PoDate).HasColumnName("PO_date");
            entity.Property(e => e.PoKey)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PO_key");
            entity.Property(e => e.PoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PO_NO");
            entity.Property(e => e.PoSno).HasColumnName("PO_Sno");
            entity.Property(e => e.QtyConsumed).HasColumnName("Qty_Consumed");
            entity.Property(e => e.ReceiveQty).HasColumnName("Receive_qty");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxValue).HasColumnName("Sales_Tax_Value");
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TotalValue)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Total_Value");
            entity.Property(e => e.Type)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TypePo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Type_PO");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Value).HasColumnType("decimal(28, 7)");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Vehicle_No");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");

            entity.HasOne(d => d.KeysNavigation).WithMany()
                .HasForeignKey(d => d.Keys)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_IGP_Detail_IGP_Master");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.BpCode, d.CompId })
                .HasConstraintName("FK_IGP_Detail_Business_Partners_Main");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_IGP_Detail_ITEM_Master");
        });

        modelBuilder.Entity<IgpMaster>(entity =>
        {
            entity.HasKey(e => e.Keys);

            entity.ToTable("IGP_Master");

            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.IgpDate).HasColumnName("Igp_date");
            entity.Property(e => e.IgpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Igp_no");
            entity.Property(e => e.MacAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MAC_Address");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.UserId).HasColumnName("User_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.SubSegment).WithMany(p => p.IgpMasters)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_IGP_Master_SubSegment");
        });

        modelBuilder.Entity<Igpdetail1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IGPDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeliveryChallanNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GateInNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Posno).HasColumnName("POSno");
            entity.Property(e => e.Ppqty).HasColumnName("PPQty");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.TotalValue).HasColumnType("decimal(28, 7)");
            entity.Property(e => e.Type)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TypePo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TypePO");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Value).HasColumnType("decimal(28, 7)");

            entity.HasOne(d => d.KeysNavigation).WithMany()
                .HasForeignKey(d => d.Keys)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_IGPDetail_IGPMaster");
        });

        modelBuilder.Entity<Igpmaster1>(entity =>
        {
            entity.HasKey(e => e.Keys).HasName("PK_IGP_Master1");

            entity.ToTable("IGPMaster");

            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarriageType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DriverCellNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Podate).HasColumnName("PODate");
            entity.Property(e => e.Pokey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POKey");
            entity.Property(e => e.Pono).HasColumnName("PONo");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.SubSegment).WithMany(p => p.Igpmaster1s)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_IGP_Master1_SubSegment");
        });

        modelBuilder.Entity<InBoundInventory>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("InBoundInventory");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Suser).WithMany(p => p.InBoundInventories)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_InBoundInventory_Users");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.InBoundInventories)
                .HasForeignKey(d => new { d.InvestorCode, d.CompId })
                .HasConstraintName("FK_InBoundInventory_Business_Partners_Main");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.InBoundInventories)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_InBoundInventory_SubSegment");
        });

        modelBuilder.Entity<InBoundInventoryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InBoundInventoryDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ExpectedReturn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Qty)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SizeId).HasColumnName("SizeID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.ProjectRegistration).WithMany()
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_InBoundInventoryDetail_ProjectRegistration");

            entity.HasOne(d => d.AreaDetail).WithMany()
                .HasForeignKey(d => new { d.SizeId, d.CompId })
                .HasConstraintName("FK_InBoundInventoryDetail_AreaDetails");
        });

        modelBuilder.Entity<IncentiveManagementInvoice>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("IncentiveManagementInvoice");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.SalesMan)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<IncentiveManagementInvoiceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IncentiveManagementInvoiceDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.Ipsrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPSrno");
            entity.Property(e => e.IpsubSegment).HasColumnName("IPSubSegment");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.IncentiveManagementInvoice).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_IncentiveManagementInvoiceDetail_IncentiveManagementInvoice");
        });

        modelBuilder.Entity<InstallmentPlan>(entity =>
        {
            entity.HasKey(e => new { e.CompId, e.SerialNo }).HasName("PK_InstallmentPlan_1");

            entity.ToTable("InstallmentPlan");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Advance)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmountOrPercentage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Confirmation)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DevelopmentCharges)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DevelopmentChargesSchedule)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Due)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DuePlan)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Excavation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExcavationDab).HasColumnName("ExcavationDAB");
            entity.Property(e => e.Installment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentPlans)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LateChargesPerDay)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.OnPossession)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PlanName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.InstallmentPlans)
                .HasForeignKey(d => new { d.ProjectSerialNo, d.CompId })
                .HasConstraintName("FK_InstallmentPlan_ProjectRegistration");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.InstallmentPlans)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_InstallmentPlan_SubSegment");
        });

        modelBuilder.Entity<InstallmentPlanDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InstallmentPlanDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ExtraChargesTitle).HasMaxLength(100);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.InstallmentPlan).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SerialNo })
                .HasConstraintName("FK_InstallmentPlanDetail_InstallmentPlan");
        });

        modelBuilder.Entity<InstallmentPlanDetailNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InstallmentPlanDetailNew");

            entity.Property(e => e.Amount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealerCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Spcommission)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SPCommission");
            entity.Property(e => e.StatusInstallment)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Tlcommission)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TLCommission");

            entity.HasOne(d => d.InstallmentPlanNew).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_InstallmentPlanDetailNew_InstallmentPlanNew");
        });

        modelBuilder.Entity<InstallmentPlanNew>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("InstallmentPlanNew");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PlanName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<InstallmentReceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("InstallmentReceipt");

            entity.HasIndex(e => e.BookingFormSrno, "UBookingFormSrno_InstallmentReceipt").IsUnique();

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno_InstallmentReceipt").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Suser).WithMany(p => p.InstallmentReceipts)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_InstallmentReceipt_Users");

            entity.HasOne(d => d.BookingForm).WithMany(p => p.InstallmentReceipts)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_InstallmentReceipt_BookingForm");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.InstallmentReceipts)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_InstallmentReceipt_SubSegment");
        });

        modelBuilder.Entity<InstallmentReceiptDelivery>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("InstallmentReceiptDelivery");

            entity.HasIndex(e => e.BookingFormSrno, "UBookingFormSrno_InstallmentReceiptDelivery").IsUnique();

            entity.HasIndex(e => e.BookingFormSrno, "UNBookingFormSrno_InstallmentReceiptDelivery").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientRepresentativeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredFromLocation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Suser).WithMany(p => p.InstallmentReceiptDeliveries)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_InstallmentReceiptDelivery_Users");

            entity.HasOne(d => d.BookingForm).WithMany(p => p.InstallmentReceiptDeliveries)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_InstallmentReceiptDelivery_BookingForm");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.InstallmentReceiptDeliveries)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_InstallmentReceiptDelivery_SubSegment");
        });

        modelBuilder.Entity<Instrument>(entity =>
        {
            entity.HasKey(e => e.Keys);

            entity.ToTable("Instrument");

            entity.Property(e => e.Keys)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<InstrumentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InstrumentDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.KeysNavigation).WithMany()
                .HasForeignKey(d => d.Keys)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_InstrumentDetail_Instrument");
        });

        modelBuilder.Entity<InstrumentInOut>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("InstrumentInOut");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvestorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SocietyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.DealPurchase).WithMany(p => p.InstrumentInOuts)
                .HasForeignKey(d => new { d.DealNo, d.CompId })
                .HasConstraintName("FK_InstrumentInOut_DealPurchase");
        });

        modelBuilder.Entity<InstrumentInOutDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InstrumentInOutDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.InstrumentInOut).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_InstrumentInOutDetail_InstrumentInOut");
        });

        modelBuilder.Entity<InterBankTransferDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("InterBankTransfer_Detail");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.ChequeDate).HasColumnName("cheque_date");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_no");
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("chequebook_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.FromAcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("from_acno");
            entity.Property(e => e.FromBankid).HasColumnName("from_bankid");
            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("narration");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.ToAcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("to_acno");
            entity.Property(e => e.ToBankid).HasColumnName("to_bankid");

            entity.HasOne(d => d.InterBankTransferMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InterBankTransfer_Detail_InterBankTransfer_Main");
        });

        modelBuilder.Entity<InterBankTransferMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FYear });

            entity.ToTable("InterBankTransfer_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.SaveCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Save_creationDate");
            entity.Property(e => e.SaveUserid).HasColumnName("Save_userid");
            entity.Property(e => e.SaveUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_username");
            entity.Property(e => e.SaveWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_workstation");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vKey");
        });

        modelBuilder.Entity<InventoryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Inventory_Detail");

            entity.Property(e => e.ActualRate).HasColumnType("decimal(28, 14)");
            entity.Property(e => e.ActualUom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ActualUOM");
            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Dcdate).HasColumnName("dcdate");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.DemandQty).HasColumnName("Demand_Qty");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dept_Code");
            entity.Property(e => e.DetailSno).HasColumnName("Detail_Sno");
            entity.Property(e => e.DetailSrno).HasColumnName("Detail_Srno");
            entity.Property(e => e.DrRequisition)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DR_Requisition");
            entity.Property(e => e.DrRequisitionDate).HasColumnName("DR_Requisition_Date");
            entity.Property(e => e.DrRequistionKeys)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DR_Requistion_Keys");
            entity.Property(e => e.ExciseValue).HasColumnName("Excise_Value");
            entity.Property(e => e.GrnDate).HasColumnName("GRN_Date");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IgpKeys)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IGP_keys");
            entity.Property(e => e.Igpdate).HasColumnName("igpdate");
            entity.Property(e => e.Igpno).HasColumnName("igpno");
            entity.Property(e => e.Igpsno).HasColumnName("IGPSNo");
            entity.Property(e => e.IssueQty).HasColumnName("Issue_Qty");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NetPurchaseRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Net_Purchase_Rate");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.OtherOverheads).HasColumnName("Other_Overheads");
            entity.Property(e => e.Podate).HasColumnName("podate");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase_Qty");
            entity.Property(e => e.QtyInStock).HasColumnName("Qty_In_Stock");
            entity.Property(e => e.Rate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("rate");
            entity.Property(e => e.RemainingQty).HasColumnName("Remaining_Qty");
            entity.Property(e => e.RemainingRate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Rate");
            entity.Property(e => e.RemainingValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Value");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.ToWareHouseNo).HasColumnName("To_WareHouse_No");
            entity.Property(e => e.ToWareHouseSubSegmentId).HasColumnName("To_WareHouse_SubSegment_ID");
            entity.Property(e => e.TotalValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_Value");
            entity.Property(e => e.TotalValueSin)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_Value_SIN");
            entity.Property(e => e.TransportationCharges).HasColumnName("Transportation_Charges");
            entity.Property(e => e.Type)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("VALUE");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.VehicleRegistration)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_registration");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.WarehouseSubsegmentId).HasColumnName("warehouse_Subsegment_ID");
            entity.Property(e => e.Whtkey)
                .IsUnicode(false)
                .HasColumnName("WHTKey");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Warehouse).WithMany()
                .HasForeignKey(d => new { d.WarehouseNo, d.CompId })
                .HasConstraintName("FK_Inventory_Detail_Warehouse");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_Inventory_Detail_Inventory_Master");
        });

        modelBuilder.Entity<InventoryList>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("InventoryList");

            entity.HasIndex(e => e.SerialNo, "uName_InventoryList").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<InventoryLogisticsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Inventory_Logistics_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DriverId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Driver_Id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IssueQty).HasColumnName("Issue_Qty");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.RemainingQy).HasColumnName("Remaining_Qy");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.TransportationCharges).HasColumnName("Transportation_Charges");
            entity.Property(e => e.Type)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value).HasColumnName("VALUE");
            entity.Property(e => e.VehicleRegistration)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_registration");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.WarehouseSubsegmentId).HasColumnName("warehouse_Subsegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<InventoryMaster>(entity =>
        {
            entity.HasKey(e => e.Keys).HasName("PK_Inventory_Master_1");

            entity.ToTable("Inventory_Master");

            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Builty_No");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.FreightAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FreightType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrnReturnNo).HasColumnName("GRN_Return_No");
            entity.Property(e => e.GrnVoucherKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRN_Voucher_Key");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.Igpdate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IGPDate");
            entity.Property(e => e.Igpkeys)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IGPKeys");
            entity.Property(e => e.Igpno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IGPNo");
            entity.Property(e => e.Igptype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IGPType");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Recievername)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.SUser).HasColumnName("sUser");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.TrUserid).HasColumnName("tr_userid");
            entity.Property(e => e.TrUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_username");
            entity.Property(e => e.TrWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_workstation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<InventorySinWarehouseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Inventory_SIN_Warehouse_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FromWarehouseNo).HasColumnName("From_Warehouse_No");
            entity.Property(e => e.FromWarehouseSubsegmentId).HasColumnName("From_Warehouse_Subsegment_ID");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.QtyInStock).HasColumnName("Qty_in_Stock");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.ToWareHouseNo).HasColumnName("To_WareHouse_No");
            entity.Property(e => e.ToWareHouseSubSegmentId).HasColumnName("To_WareHouse_SubSegment_ID");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.TransferedQty).HasColumnName("Transfered_Qty");
            entity.Property(e => e.TransportationCharges).HasColumnName("Transportation_Charges");
            entity.Property(e => e.Type)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value).HasColumnName("VALUE");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<InvestmentReturn>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("InvestmentReturn");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Investor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.InvestmentReturns)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_InvestmentReturn_SubSegment");
        });

        modelBuilder.Entity<InvestorDetail>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_InvestorDetail_1");

            entity.ToTable("InvestorDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBankAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileData).IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferredCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SecurityChequeBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecurityChequeNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Comp).WithMany(p => p.InvestorDetails)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvestorDetail_Companysetup");

            entity.HasOne(d => d.Suser).WithMany(p => p.InvestorDetails)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_InvestorDetail_Users");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.InvestorDetailBusinessPartnersMains)
                .HasForeignKey(d => new { d.PartyCode, d.CompId })
                .HasConstraintName("FK_InvestorDetail_Business_Partners_Main");

            entity.HasOne(d => d.BusinessPartnersMainNavigation).WithMany(p => p.InvestorDetailBusinessPartnersMainNavigations)
                .HasForeignKey(d => new { d.ReferredCode, d.CompId })
                .HasConstraintName("FK_InvestorDetail_Business_Partners_Main1");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.InvestorDetails)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_InvestorDetail_SubSegment");
        });

        modelBuilder.Entity<InvestorRegistration>(entity =>
        {
            entity.HasKey(e => new { e.CompId, e.SerialNo });

            entity.ToTable("InvestorRegistration");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReturnType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReturnValue)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Comp).WithMany(p => p.InvestorRegistrations)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvestorRegistration_Companysetup");

            entity.HasOne(d => d.Suser).WithMany(p => p.InvestorRegistrations)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_InvestorRegistration_Users");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.InvestorRegistrations)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_InvestorRegistration_Business_Partners_Main");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.InvestorRegistrations)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_InvestorRegistration_SubSegment");
        });

        modelBuilder.Entity<IpDetailPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IP_DetailPurchase");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DebitMemoAmount).HasColumnName("DebitMemo_Amount");
            entity.Property(e => e.DebitMemoDate).HasColumnName("DebitMemo_date");
            entity.Property(e => e.DebitMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DebitMemo_no");
            entity.Property(e => e.DocDate).HasColumnName("Doc_Date");
            entity.Property(e => e.DocKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Doc_No");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Doc_Type");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IP_no");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaidBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemainingAmount).HasColumnName("Remaining_Amount");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalNetValue).HasColumnName("Total_NetValue");
            entity.Property(e => e.Uom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Vid).HasColumnName("vid");
            entity.Property(e => e.Vin)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vin");
            entity.Property(e => e.Whno).HasColumnName("WHNo");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_IP_DetailPurchase_ITEM_Master");

            entity.HasOne(d => d.IpMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .HasConstraintName("FK_IP_DetailPurchase_IP_Main");
        });

        modelBuilder.Entity<IpDetailSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("IP_DetailSales");

            entity.Property(e => e.BatchId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BatchID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CgsValue).HasColumnName("CGS_Value");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeliveryAddress).HasMaxLength(4000);
            entity.Property(e => e.DocKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DocSno).HasColumnName("DocSNo");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PolicyId).HasColumnName("PolicyID");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks).HasMaxLength(400);
            entity.Property(e => e.RouteId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RouteID");
            entity.Property(e => e.SalesManId).HasColumnName("SalesManID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentIddetail).HasColumnName("SubSegmentIDDetail");
            entity.Property(e => e.TotalNetValue).HasColumnName("Total_NetValue");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.Whno).HasColumnName("WHNo");

            entity.HasOne(d => d.Warehouse).WithMany()
                .HasForeignKey(d => new { d.Whno, d.CompId })
                .HasConstraintName("FK_IP_DetailSales_Warehouse");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_IP_DetailSales_ITEM_Master");

            entity.HasOne(d => d.IpMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_IP_DetailSales_IP_Main");
        });

        modelBuilder.Entity<IpMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("IP_Main");

            entity.HasIndex(e => e.DocumentKeys, "UQDispatch").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AdvanceBal).HasColumnName("Advance_Bal");
            entity.Property(e => e.ApaccuralBal)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("APAccural_Bal");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.ChargedTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentKeys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceBal).HasColumnName("Invoice_Bal");
            entity.Property(e => e.IpDate).HasColumnName("IP_Date");
            entity.Property(e => e.IpNo).HasColumnName("IP_no");
            entity.Property(e => e.Keys)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.Ogp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OGP");
            entity.Property(e => e.PaidBy).HasMaxLength(50);
            entity.Property(e => e.PartyType).HasMaxLength(50);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pod");
            entity.Property(e => e.PodParty)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("podParty");
            entity.Property(e => e.PodPartyAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("podPartyAddress");
            entity.Property(e => e.Policy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RateStatus)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SecurityBal)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Security_Bal");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Username).HasMaxLength(50);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Workstation).HasMaxLength(50);

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.IpMains)
                .HasForeignKey(d => new { d.BpCode, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IP_Main_Business_Partners_Main");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.IpMains)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubSegmentID_IP_main");
        });

        modelBuilder.Entity<IssuedCheque>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ItemBom>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ITEM_BOM");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCodeRaw)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code_Raw");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemCodeRaw)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code_Raw");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.ItemGroup, d.CompId })
                .HasConstraintName("FK_ITEM_BOM_ITEM_Master");
        });

        modelBuilder.Entity<ItemBoqplan>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("ItemBOQPlan");

            entity.HasIndex(e => e.SubletId, "USubletID_ItemBOQPlan").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Comp).WithMany(p => p.ItemBoqplans)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemBOQPlan_Companysetup");

            entity.HasOne(d => d.Suser).WithMany(p => p.ItemBoqplans)
                .HasForeignKey(d => d.SuserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemBOQPlan_Users");

            entity.HasOne(d => d.BlocksDetail).WithMany(p => p.ItemBoqplans)
                .HasForeignKey(d => new { d.BlockId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemBOQPlan_BlocksDetails");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.ItemBoqplans)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemBOQPlan_ProjectRegistration");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.ItemBoqplans)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemBOQPlan_SubSegment");
        });

        modelBuilder.Entity<ItemBoqplanDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ItemBOQPlanDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemBoqplan).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_ItemBOQPlanDetail_ItemBOQPlan");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemBOQPlanDetail_ITEM_Master");
        });

        modelBuilder.Entity<ItemMaster>(entity =>
        {
            entity.HasKey(e => new { e.ItemCode, e.ItemGroup, e.CompId }).HasName("PK_ITEM_Master_1");

            entity.ToTable("ITEM_Master");

            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.BarCodeTwo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BarCode_Two");
            entity.Property(e => e.BomUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BOM_UOM");
            entity.Property(e => e.CaCash)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_CASH");
            entity.Property(e => e.CaConsumption)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Consumption");
            entity.Property(e => e.CaConsumptionReturn)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Consumption_Return");
            entity.Property(e => e.CaConsumptionReturnWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Consumption_Return_WS");
            entity.Property(e => e.CaConsumptionWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Consumption_WS");
            entity.Property(e => e.CaDiscountAllowed)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Discount_Allowed");
            entity.Property(e => e.CaDiscountAllowedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Discount_Allowed_WS");
            entity.Property(e => e.CaDn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_DN");
            entity.Property(e => e.CaProduction)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Production");
            entity.Property(e => e.CaProductionReturn)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Production_Return");
            entity.Property(e => e.CaPurchase)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Purchase");
            entity.Property(e => e.CaPurchaseDiscounts)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Purchase_Discounts");
            entity.Property(e => e.CaPurchaseReturn)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Purchase_Return");
            entity.Property(e => e.CaSales)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Sales");
            entity.Property(e => e.CaSalesReturn)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Sales_Return");
            entity.Property(e => e.CaSalesReturnWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Sales_Return_WS");
            entity.Property(e => e.CaSalesWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Sales_WS");
            entity.Property(e => e.CaWci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_WCI");
            entity.Property(e => e.CalabourCharges)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CALabourCharges");
            entity.Property(e => e.CalabourChargesPayable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CALabourChargesPayable");
            entity.Property(e => e.ConversionCost).HasColumnName("Conversion_Cost");
            entity.Property(e => e.DrugLicense)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FixedAssets).HasColumnName("Fixed_Assets");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Description");
            entity.Property(e => e.ItemInventory).HasColumnName("ITEM_Inventory");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.ItemPurchase).HasColumnName("ITEM_Purchase");
            entity.Property(e => e.ItemSales).HasColumnName("ITEM_Sales");
            entity.Property(e => e.ItemStatus)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ITEM_Status");
            entity.Property(e => e.LeadTime)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Lead_Time");
            entity.Property(e => e.LeadTimePer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Lead_Time_Per");
            entity.Property(e => e.MinOrder1).HasColumnName("Min_Order");
            entity.Property(e => e.OrderInterval)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Order_Interval");
            entity.Property(e => e.OrderIntervalPer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Order_Interval_Per");
            entity.Property(e => e.ProcurmentMethod)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Procurment_Method");
            entity.Property(e => e.ReOrder).HasColumnName("Re_Order");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.ValutionMethods)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Valution_Methods");
            entity.Property(e => e.ValutionSystem)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Valution_System");
        });

        modelBuilder.Entity<ItemMasterUom>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ItemMasterUOM");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<ItemSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ITEM_SubSegment");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.Listindex).HasColumnName("listindex");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");

            entity.HasOne(d => d.SubSegment).WithMany()
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_ITEM_SubSegment_SubSegment");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.ItemGroup, d.CompId })
                .HasConstraintName("FK_ITEM_SubSegment_ITEM_Master");
        });

        modelBuilder.Entity<ItemUom>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ITEM_UOM");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.IsPrimary).HasColumnName("isPrimary");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("item_Group");
            entity.Property(e => e.Listindex).HasColumnName("listindex");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Uomdescription)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("UOMDescription");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.ItemGroup, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ITEM_UOM_ITEM_Master");
        });

        modelBuilder.Entity<ItemWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ITEM_Warehouse");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Whno).HasColumnName("WHNo");

            entity.HasOne(d => d.SubSegment).WithMany()
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_ITEM_Warehouse_SubSegment");

            entity.HasOne(d => d.Warehouse).WithMany()
                .HasForeignKey(d => new { d.Whno, d.CompId })
                .HasConstraintName("FK_ITEM_Warehouse_Warehouse");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.ItemGroup, d.CompId })
                .HasConstraintName("FK_ITEM_Warehouse_ITEM_Master");
        });

        modelBuilder.Entity<Itemcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ITEMCODE");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ItAvgval).HasColumnName("IT_AVGVAL");
            entity.Property(e => e.ItCRate).HasColumnName("it_cRate");
            entity.Property(e => e.ItCapCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("it_capCode");
            entity.Property(e => e.ItCbal).HasColumnName("IT_CBAL");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CGL");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItExpcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_EXPCODE");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval).HasColumnName("IT_OPAGVAL");
            entity.Property(e => e.ItOpbal).HasColumnName("IT_OPBAL");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_PGL");
            entity.Property(e => e.ItPreturnscode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_PRETURNSCODE");
            entity.Property(e => e.ItReturnscode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_RETURNSCODE");
            entity.Property(e => e.ItRoqty).HasColumnName("it_roqty");
            entity.Property(e => e.ItSalecode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_SALECODE");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.ItUserid).HasColumnName("it_userid");
            entity.Property(e => e.ItWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("it_workstation");
            entity.Property(e => e.Opdate)
                .HasColumnType("datetime")
                .HasColumnName("opdate");
            entity.Property(e => e.OpeningYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sUser");
        });

        modelBuilder.Entity<JobOrderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JobOrder_Detail");

            entity.Property(e => e.Against)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.DeliveryAddress).HasColumnName("Delivery_Address");
            entity.Property(e => e.DetailBpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Detail_BP_Code");
            entity.Property(e => e.DetailSubSegmentId).HasColumnName("Detail_SubSegment_ID");
            entity.Property(e => e.Freight).HasMaxLength(50);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.SaleDate).HasColumnName("Sale_Date");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.SaleTax).HasColumnName("Sale_Tax");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.JobOrderMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobOrder_Detail_JobOrder_Master");
        });

        modelBuilder.Entity<JobOrderDriverLoader>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JobOrder_DriverLoader");

            entity.Property(e => e.Code)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Contact_no");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<JobOrderMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year }).HasName("PK_Joborder_Master");

            entity.ToTable("JobOrder_Master");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnName("Delivery_Date");
            entity.Property(e => e.DriverDailyCharges).HasColumnName("Driver_DailyCharges");
            entity.Property(e => e.JobOrderDate).HasColumnName("JobOrder_Date");
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.LoaderDailyCharges).HasColumnName("Loader_DailyCharges");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Route_id");
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalCharges).HasColumnName("Total_Charges");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_no");
            entity.Property(e => e.Workstation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<JobOrderTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JobOrder_Transfer");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.FrmSubsegment).HasColumnName("frm_subsegment");
            entity.Property(e => e.FrmWh).HasColumnName("frm_wh");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("group_code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.QtyCylinder).HasColumnName("qty_cylinder");
            entity.Property(e => e.QtyKg).HasColumnName("qty_kg");
            entity.Property(e => e.QtyLtr).HasColumnName("qty_ltr");
            entity.Property(e => e.QtyM3).HasColumnName("qty_m3");
            entity.Property(e => e.SrNo).HasColumnName("sr_no");
            entity.Property(e => e.ToSubsegment).HasColumnName("to_subsegment");
            entity.Property(e => e.ToWh).HasColumnName("to_wh");
        });

        modelBuilder.Entity<JobOrderWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JobOrder_Warehouse");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.CylindersQty).HasColumnName("Cylinders_Qty");
            entity.Property(e => e.FWarehouseCode).HasColumnName("F_WarehouseCode");
            entity.Property(e => e.FWarehouseSubSegmentCode).HasColumnName("F_WarehouseSubSegmentCode");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TWarehouseCode).HasColumnName("T_WarehouseCode");
            entity.Property(e => e.TWarehouseSubSegmentCode).HasColumnName("T_WarehouseSubSegmentCode");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.JobOrderMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_JobOrder_Warehouse_JobOrder_Master");
        });

        modelBuilder.Entity<LatePaymentCharge>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.ProjectSale).WithMany(p => p.LatePaymentCharges)
                .HasForeignKey(d => new { d.ProjectSaleSrno, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LatePaymentCharges_ProjectSale");
        });

        modelBuilder.Entity<LatePaymentChargesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LatePaymentChargesDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.LatePaymentCharge).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_LatePaymentChargesDetail_LatePaymentCharges");
        });

        modelBuilder.Entity<LcForeignSupplier>(entity =>
        {
            entity.HasKey(e => e.CompId);

            entity.ToTable("LC_ForeignSupplier");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.IncomeTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Income_tax");
            entity.Property(e => e.LcMargin)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("LC_margin");
            entity.Property(e => e.SalesTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Sales_tax");
        });

        modelBuilder.Entity<LcLandedCost>(entity =>
        {
            entity.HasKey(e => new { e.Lcc, e.CompId });

            entity.ToTable("LC_LandedCost");

            entity.Property(e => e.Lcc).HasColumnName("LCC");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ControlAccount)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.LcName)
                .IsUnicode(false)
                .HasColumnName("LC_Name");
        });

        modelBuilder.Entity<LcfacilityDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LCFacility_Detail");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Account_Number");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ExpiryDate).HasColumnName("Expiry_date");
            entity.Property(e => e.FacilityAmount).HasColumnName("Facility_amount");
            entity.Property(e => e.FacilityName)
                .IsUnicode(false)
                .HasColumnName("Facility_name");
            entity.Property(e => e.FacilityNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Facility_no");
            entity.Property(e => e.InterestRate).HasColumnName("Interest_rate");
            entity.Property(e => e.SrNo1).HasColumnName("Sr_no");

            entity.HasOne(d => d.LcfacilityMain).WithMany()
                .HasForeignKey(d => new { d.AccountNumber, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LCFacility_Detail_LCFacility_Main");
        });

        modelBuilder.Entity<LcfacilityMain>(entity =>
        {
            entity.HasKey(e => new { e.AccountNumber, e.CompId });

            entity.ToTable("LCFacility_Main");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Account_Number");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
        });

        modelBuilder.Entity<LcmanagementMain>(entity =>
        {
            entity.HasKey(e => e.Keys).HasName("PK_LCManagement_Main_1");

            entity.ToTable("LCManagement_Main");

            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.AaValue).HasColumnName("AA_value");
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Account_Number");
            entity.Property(e => e.ClearingAgentcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Clearing_agentcode");
            entity.Property(e => e.ClearingAgentname)
                .IsUnicode(false)
                .HasColumnName("Clearing_agentname");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylCustomerpropertyqty).HasColumnName("Cyl_customerpropertyqty");
            entity.Property(e => e.CylDesc)
                .IsUnicode(false)
                .HasColumnName("Cyl_desc");
            entity.Property(e => e.CylMclpropertyqty).HasColumnName("Cyl_MCLPropertyqty");
            entity.Property(e => e.CylTotalqty).HasColumnName("Cyl_totalqty");
            entity.Property(e => e.FacilityNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Facility_no");
            entity.Property(e => e.FedralExcisedyty).HasColumnName("Fedral_excisedyty");
            entity.Property(e => e.ForwardingContractdate).HasColumnName("Forwarding_contractdate");
            entity.Property(e => e.ForwardingContractno)
                .IsUnicode(false)
                .HasColumnName("Forwarding_contractno");
            entity.Property(e => e.GasStorecontainer)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Gas_storecontainer");
            entity.Property(e => e.GdDate).HasColumnName("GD_date");
            entity.Property(e => e.GdNo).HasColumnName("GD_no");
            entity.Property(e => e.HsCode).HasColumnName("HS_code");
            entity.Property(e => e.ImportVia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Import_via");
            entity.Property(e => e.LcAmount).HasColumnName("LC_amount");
            entity.Property(e => e.LcDate).HasColumnName("LC_date");
            entity.Property(e => e.LcMargin).HasColumnName("LC_margin");
            entity.Property(e => e.LcName)
                .IsUnicode(false)
                .HasColumnName("LC_name");
            entity.Property(e => e.LcNo).HasColumnName("LC_no");
            entity.Property(e => e.LcOc).HasColumnName("LC_OC");
            entity.Property(e => e.LcdocNo)
                .IsUnicode(false)
                .HasColumnName("LCDOC_no");
            entity.Property(e => e.LcrCivalueFc).HasColumnName("LCR_CIvalue_FC");
            entity.Property(e => e.LcrDate).HasColumnName("LCR_date");
            entity.Property(e => e.LcrDesc)
                .IsUnicode(false)
                .HasColumnName("LCR_desc");
            entity.Property(e => e.LcrExchangerate).HasColumnName("LCR_Exchangerate");
            entity.Property(e => e.LcrSupplierCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LCR_SupplierCode");
            entity.Property(e => e.LcrSupplierName)
                .IsUnicode(false)
                .HasColumnName("LCR_SupplierName");
            entity.Property(e => e.MiscCharges).HasColumnName("Misc_charges");
            entity.Property(e => e.PaValue).HasColumnName("PA_value");
            entity.Property(e => e.ShippingDate).HasColumnName("Shipping_date");
            entity.Property(e => e.ShippingFrom)
                .IsUnicode(false)
                .HasColumnName("Shipping_from");
            entity.Property(e => e.ShippingTerms)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Shipping_terms");
            entity.Property(e => e.ShippingTo)
                .IsUnicode(false)
                .HasColumnName("Shipping_to");
            entity.Property(e => e.ShippingVia)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Shipping_via");
            entity.Property(e => e.SpotRate).HasColumnName("Spot_rate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SwiftCharges).HasColumnName("Swift_charges");
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .HasColumnName("Tank_no");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LcmanagementWithCf>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LCManagement_withCF");

            entity.Property(e => e.ActualPayable).HasColumnName("Actual_Payable");
            entity.Property(e => e.CfDate).HasColumnName("CF_date");
            entity.Property(e => e.CfDesc)
                .IsUnicode(false)
                .HasColumnName("CF_desc");
            entity.Property(e => e.CfLccode).HasColumnName("CF_LCCode");
            entity.Property(e => e.CfPartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CF_PartyCode");
            entity.Property(e => e.CfsrNo).HasColumnName("CFSr_no");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProvisionalPayable).HasColumnName("Provisional_Payable");

            entity.HasOne(d => d.KeysNavigation).WithMany()
                .HasForeignKey(d => d.Keys)
                .HasConstraintName("FK_LCManagement_withCF_LCManagement_Main");
        });

        modelBuilder.Entity<LcmanagementWithLcc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LCManagement_withLCC");

            entity.Property(e => e.AmountPayable).HasColumnName("Amount_payable");
            entity.Property(e => e.Description)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LcCode).HasColumnName("LC_Code");
            entity.Property(e => e.LccsrNo).HasColumnName("LCCSr_no");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_Code");

            entity.HasOne(d => d.KeysNavigation).WithMany()
                .HasForeignKey(d => d.Keys)
                .HasConstraintName("FK_LCManagement_withLCC_LCManagement_Main");
        });

        modelBuilder.Entity<LcmanagementWithPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LCManagement_withPO");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderedQty).HasColumnName("Ordered_Qty");
            entity.Property(e => e.PoDate).HasColumnName("PO_DATE");
            entity.Property(e => e.PoExchangerate).HasColumnName("PO_exchangerate");
            entity.Property(e => e.PoNo).HasColumnName("PO_NO");
            entity.Property(e => e.PoQty).HasColumnName("PO_QTY");
            entity.Property(e => e.PoRate).HasColumnName("PO_RATE");
            entity.Property(e => e.PoSrno1).HasColumnName("PO_Srno");
            entity.Property(e => e.Popivusd).HasColumnName("POPIVusd");
            entity.Property(e => e.PosrNo).HasColumnName("POSr_no");
            entity.Property(e => e.PosubSegmentId).HasColumnName("POSubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.KeysNavigation).WithMany()
                .HasForeignKey(d => d.Keys)
                .HasConstraintName("FK_LCManagement_withPO_LCManagement_Main");
        });

        modelBuilder.Entity<Lead>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Tr_Leads_Insert");
                    tb.HasTrigger("Tr_Leads_Update");
                });

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ActivityType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AssignUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AssignUserID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Company)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.Customer)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DropComment).HasMaxLength(500);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ManualSize)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NextActivity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NotificationId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NotificationID");
            entity.Property(e => e.Occupation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PlserialNo).HasColumnName("PLSerialNo");
            entity.Property(e => e.Reason)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Size)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SourceOfReference)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WhatsAppNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.Leads)
                .HasForeignKey(d => new { d.Project, d.CompId })
                .HasConstraintName("FK_Leads_ProjectRegistration");
        });

        modelBuilder.Entity<LeadAssignmentSetup>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("LeadAssignmentSetup");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.LeadAssignmentSetups)
                .HasForeignKey(d => new { d.Project, d.CompId })
                .HasConstraintName("FK_LeadAssignmentSetup_LeadAssignmentSetup");
        });

        modelBuilder.Entity<LeadAssignmentSetupDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LeadAssignmentSetupDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.LeadAssignmentSetup).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_LeadAssignmentSetupDetail_LeadAssignmentSetup");
        });

        modelBuilder.Entity<LeadType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LeadType");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.TypeName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LeadsHistory>(entity =>
        {
            entity.HasKey(e => e.AutoSerialNo);

            entity.ToTable("LeadsHistory");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<LeaveApplication>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("LeaveApplication");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<LeaveApplicationApprovedDate>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.LeaveApplication).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LeaveApplicationApprovedDates_LeaveApplication");
        });

        modelBuilder.Entity<LeaveApplicationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LeaveApplicationDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeaveTypeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<LeaveRulesDefinition>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("LeaveRulesDefinition");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LeaveRulesSubSegmentsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LeaveRulesSubSegmentsDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.LeaveRulesDefinition).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_LeaveRulesSubSegmentsDetail_LeaveRulesDefinition");
        });

        modelBuilder.Entity<LiveChat>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LiveChat");

            entity.Property(e => e.Chat)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Chatdate).HasColumnType("datetime");
            entity.Property(e => e.Cnic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PlayerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PlayerID");
            entity.Property(e => e.RoomId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RoomID");
            entity.Property(e => e.UserPlayerId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UserPlayerID");
            entity.Property(e => e.UserType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LoaderRegistration>(entity =>
        {
            entity.HasKey(e => new { e.LoaderId, e.CompId });

            entity.ToTable("Loader_Registration");

            entity.Property(e => e.LoaderId)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Loader_Id");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNIC");
            entity.Property(e => e.DailyExpense)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Daily_expense");
            entity.Property(e => e.DailyPayable)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Daily_payable");
            entity.Property(e => e.JoiningDate).HasColumnName("Joining_date");
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Phone_no");
            entity.Property(e => e.RegistrationDate).HasColumnName("Registration_date");
        });

        modelBuilder.Entity<LoanAndAdvance>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeSlipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LoanAndAdvanceSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.LoanAndAdvanceSetup).WithMany(p => p.LoanAndAdvances)
                .HasForeignKey(d => new { d.LoanAndAdvanceSerialNo, d.CompId })
                .HasConstraintName("FK_LoanAndAdvances_LoanAndAdvanceSetup");
        });

        modelBuilder.Entity<LoanAndAdvanceSetup>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("LoanAndAdvanceSetup");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Glcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLCode");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LoanAndAdvancesDeductionRule>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.LatypeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LATypeCode");
            entity.Property(e => e.RuleLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<LoanAndAdvancesDeductionRulesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LoanAndAdvancesDeductionRulesDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeductionFrequency)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.LoanAndAdvancesDeductionRule).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_LoanAndAdvancesDeductionRulesDetail_LoanAndAdvancesDeductionRules");
        });

        modelBuilder.Entity<LoanAndAdvancesDeductionSetup>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("LoanAndAdvancesDeductionSetup");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
        });

        modelBuilder.Entity<LoanAndAdvancesDeductionSetupDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LoanAndAdvancesDeductionSetupDetail");

            entity.Property(e => e.AdjustmentParameterCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AdjustmentRule)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.LoanAndAdvancesDeductionSetup).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_LoanAndAdvancesSetupDetail_LoanAndAdvanceSetup");
        });

        modelBuilder.Entity<LoanAndAdvancesDeductionSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LoanAndAdvancesDeductionSubSegment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.LoanAndAdvancesDeductionSetup).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_LoanAndAdvancesDeductionSubSegment_LoanAndAdvancesDeductionSetup");
        });

        modelBuilder.Entity<LoansAndAdvanceSetup>(entity =>
        {
            entity.HasKey(e => new { e.CompId, e.SrNo }).HasName("PK_LoansAndAdvanceSetups_1");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.GlCode)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("gl_code");
            entity.Property(e => e.Title)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Message).IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo).ValueGeneratedOnAdd();
            entity.Property(e => e.Time).HasColumnType("datetime");
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MachineCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Machine_Code");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.MchCode)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("MCH_CODE");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.MchNotes)
                .HasMaxLength(300)
                .HasColumnName("MCH_NOTES");
            entity.Property(e => e.Opdate)
                .HasColumnType("datetime")
                .HasColumnName("opdate");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sUser");
        });

        modelBuilder.Entity<MainStoreDet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MainStoreDet");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Gpdate)
                .HasColumnType("datetime")
                .HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate)
                .HasColumnType("datetime")
                .HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("GRNNO");
            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("it_avgval");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(10)
                .HasColumnName("it_cgl");
            entity.Property(e => e.ItCode)
                .HasMaxLength(13)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(50)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasColumnType("ntext")
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval)
                .HasColumnType("money")
                .HasColumnName("it_opagval");
            entity.Property(e => e.ItOpbal)
                .HasColumnType("money")
                .HasColumnName("it_opbal");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(10)
                .HasColumnName("it_pgl");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(17)
                .HasColumnName("keyfield");
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MPono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.Party)
                .HasMaxLength(10)
                .HasColumnName("PARTY");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("PRTY_NAME");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrCartrage)
                .HasColumnType("money")
                .HasColumnName("tr_cartrage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("tr_fr");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(13)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("tr_other");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_Qty");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("WO_DESC");
        });

        modelBuilder.Entity<Master>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Master");

            entity.Property(e => e.AccountsKey)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AfterLevel).HasColumnName("After_level");
            entity.Property(e => e.AfterLevelkg).HasColumnName("After_levelkg");
            entity.Property(e => e.AfterLevelm3).HasColumnName("After_levelm3");
            entity.Property(e => e.BeforeLevekg).HasColumnName("Before_levekg");
            entity.Property(e => e.BeforeLevel).HasColumnName("Before_level");
            entity.Property(e => e.BeforeLevelm3).HasColumnName("Before_levelm3");
            entity.Property(e => e.Billdate)
                .HasColumnType("datetime")
                .HasColumnName("billdate");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.ChartKg).HasColumnName("Chart_kg");
            entity.Property(e => e.ChartM3).HasColumnName("Chart_m3");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.DecantinggainlossKg).HasColumnName("Decantinggainloss_kg");
            entity.Property(e => e.DecantinggainlossM3).HasColumnName("Decantinggainloss_m3");
            entity.Property(e => e.DoNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("do_no");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.IgprqtyLevelkg).HasColumnName("IGPRQty_levelkg");
            entity.Property(e => e.IgprqtyLevelm3).HasColumnName("IGPRQty_levelm3");
            entity.Property(e => e.IsLocal).HasColumnName("is_local");
            entity.Property(e => e.KeyField).HasMaxLength(20);
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("m_desc");
            entity.Property(e => e.MPono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("PARTY");
            entity.Property(e => e.Posted).HasMaxLength(1);
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .HasColumnName("sUser");
            entity.Property(e => e.Staxcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("staxcode");
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .HasColumnName("Tank_no");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.TrUserid).HasColumnName("tr_userid");
            entity.Property(e => e.TrUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_username");
            entity.Property(e => e.TrWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_workstation");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.Vdate).HasColumnType("datetime");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Mch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MCH");

            entity.Property(e => e.CompId).HasColumnName("Comp_ID");
            entity.Property(e => e.MchCode)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("MCH_CODE");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.MchNotes)
                .HasMaxLength(300)
                .HasColumnName("MCH_NOTES");
            entity.Property(e => e.Opdate)
                .HasColumnType("datetime")
                .HasColumnName("opdate");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sUser");
        });

        modelBuilder.Entity<MchLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MCH_Log");

            entity.Property(e => e.CompId).HasColumnName("Comp_ID");
            entity.Property(e => e.LogSerial).HasColumnName("LOG_Serial");
            entity.Property(e => e.MchActionTaken)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MCH_Action_Taken");
            entity.Property(e => e.MchCode)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("MCH_CODE");
            entity.Property(e => e.MchDateModified)
                .HasColumnType("datetime")
                .HasColumnName("MCH_Date_Modified");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.MchNotes)
                .HasMaxLength(300)
                .HasColumnName("MCH_NOTES");
            entity.Property(e => e.MchUserid).HasColumnName("MCH_Userid");
            entity.Property(e => e.MchWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MCH_Workstation");
            entity.Property(e => e.Opdate)
                .HasColumnType("datetime")
                .HasColumnName("opdate");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sUser");
        });

        modelBuilder.Entity<MegaAccountConfiguration>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("MegaAccountConfiguration");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Message1)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Message");
            entity.Property(e => e.Messageno).ValueGeneratedOnAdd();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Sender)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Subject)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
        });

        modelBuilder.Entity<MiscFarmula>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Fgoodsitcode)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("FGOODSITCODE");
            entity.Property(e => e.Fid)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("FID");
            entity.Property(e => e.Fname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FNAME");
            entity.Property(e => e.Opdate)
                .HasColumnType("datetime")
                .HasColumnName("opdate");
            entity.Property(e => e.Party)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PARTY");
            entity.Property(e => e.Qty1).HasColumnName("QTY1");
            entity.Property(e => e.Qty2).HasColumnName("QTY2");
            entity.Property(e => e.Rate)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("RATE");
            entity.Property(e => e.Rawgoodsitcode)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("RAWGOODSITCODE");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sUser");
            entity.Property(e => e.Wastage).HasColumnName("WASTAGE");
        });

        modelBuilder.Entity<NewUserRight>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("New_User_Rights");

            entity.Property(e => e.AddRecord).HasColumnName("Add_Record");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DeleteRecord).HasColumnName("Delete_Record");
            entity.Property(e => e.EditRecord).HasColumnName("Edit_Record");
            entity.Property(e => e.Userid).HasColumnName("userid");
        });

        modelBuilder.Entity<NewUserRightsSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("New_User_Rights_SubSegment");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ListIndex).HasColumnName("List_index");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(200)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Userid).HasColumnName("userid");
        });

        modelBuilder.Entity<NewUserRightsVtype>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("New_User_Rights_Vtype");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ListIndex).HasColumnName("List_index");
            entity.Property(e => e.Userid).HasColumnName("userid");
            entity.Property(e => e.VId).HasColumnName("V_ID");
            entity.Property(e => e.Vtype).HasMaxLength(5);
        });

        modelBuilder.Entity<NewUserRightsWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("New_User_Rights_Warehouse");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ListIndex).HasColumnName("List_index");
            entity.Property(e => e.Userid).HasColumnName("userid");
            entity.Property(e => e.WarehouseId).HasColumnName("Warehouse_ID");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Warehouse_Name");
        });

        modelBuilder.Entity<OfferForSale>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Address)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.BlockId).HasColumnName("BlockID");
            entity.Property(e => e.BookingTypeId).HasColumnName("BookingTypeID");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.Imgurl)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("imgurl");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyDetailId).HasColumnName("PropertyDetailID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo).ValueGeneratedOnAdd();
            entity.Property(e => e.SizeId).HasColumnName("SizeID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Ogp>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("OGP");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CylinderQyt).HasColumnName("Cylinder_Qyt");
            entity.Property(e => e.DoDate).HasColumnName("DO_date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.MeterOut).HasColumnName("Meter_Out");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OgpDate).HasColumnName("OGP_date");
            entity.Property(e => e.OgpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OGP_no");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");
        });

        modelBuilder.Entity<OnlineBooking>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OnlineBooking");

            entity.Property(e => e.BlockId).HasColumnName("BlockID");
            entity.Property(e => e.BookingCategoryId).HasColumnName("BookingCategoryID");
            entity.Property(e => e.BookingTypeId).HasColumnName("BookingTypeID");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Imgurl)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("imgurl");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyId).HasColumnName("PropertyID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo).ValueGeneratedOnAdd();
            entity.Property(e => e.SizeId).HasColumnName("SizeID");
        });

        modelBuilder.Entity<OpYear>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OP_YEAR");

            entity.Property(e => e.CurrentYear)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EndDate)
                .HasColumnType("datetime")
                .HasColumnName("END_DATE");
            entity.Property(e => e.StDate)
                .HasColumnType("datetime")
                .HasColumnName("ST_DATE");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("YEAR");
        });

        modelBuilder.Entity<OpenTrading>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("OpenTrading");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractFy)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ContractFY");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Otsrno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OTSrno");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PurchaserAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PurchaserCNIC");
            entity.Property(e => e.PurchaserDob).HasColumnName("PurchaserDOB");
            entity.Property(e => e.PurchaserFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonThree)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonTwo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SellerAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SellerCNIC");
            entity.Property(e => e.SellerDob).HasColumnName("SellerDOB");
            entity.Property(e => e.SellerFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Share)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Strno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STRNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Types)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.OpenTradingBusinessPartnersMains)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_OpenTrading_Business_Partners_Main");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.OpenTradings)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_OpenTrading_ProjectRegistration");

            entity.HasOne(d => d.BusinessPartnersMainNavigation).WithMany(p => p.OpenTradingBusinessPartnersMainNavigations)
                .HasForeignKey(d => new { d.SalesPersonThree, d.CompId })
                .HasConstraintName("FK_OpenTrading_Business_Partners_Main2");

            entity.HasOne(d => d.BusinessPartnersMain1).WithMany(p => p.OpenTradingBusinessPartnersMain1s)
                .HasForeignKey(d => new { d.SalesPersonTwo, d.CompId })
                .HasConstraintName("FK_OpenTrading_Business_Partners_Main1");
        });

        modelBuilder.Entity<OpenTradingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OpenTradingDetail");

            entity.HasIndex(e => e.FileNo, "UFileNo_OpenTradingDetail").IsUnique();

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FilePurchasingSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Type)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.AreaDetail).WithMany()
                .HasForeignKey(d => new { d.Area, d.CompId })
                .HasConstraintName("FK_OpenTradingDetail_AreaDetails");

            entity.HasOne(d => d.BookingCategoryDetail).WithMany()
                .HasForeignKey(d => new { d.Category, d.CompId })
                .HasConstraintName("FK_OpenTradingDetail_BookingCategoryDetails");

            entity.HasOne(d => d.ProjectRegistration).WithMany()
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_OpenTradingDetail_ProjectRegistration");

            entity.HasOne(d => d.PropertyDetailNavigation).WithMany()
                .HasForeignKey(d => new { d.PropertyDetail, d.CompId })
                .HasConstraintName("FK_OpenTradingDetail_PropertyDetails");

            entity.HasOne(d => d.OpenTrading).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_OpenTradingDetail_FileSales");
        });

        modelBuilder.Entity<Organagram>(entity =>
        {
            entity.HasKey(e => new { e.GlCode, e.CompId }).HasName("PK_Organogram");

            entity.ToTable("Organagram");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.GlActivestatus).HasColumnName("gl_Activestatus");
            entity.Property(e => e.GlAmountcr).HasColumnName("gl_amountcr");
            entity.Property(e => e.GlAmountdr).HasColumnName("gl_amountdr");
            entity.Property(e => e.GlBlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_blcode");
            entity.Property(e => e.GlBlcodeMgmt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_BLCodeMgmt");
            entity.Property(e => e.GlCfcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_cfcode");
            entity.Property(e => e.GlCfcodeMgmt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_CFCodeMgmt");
            entity.Property(e => e.GlDate)
                .HasColumnType("datetime")
                .HasColumnName("gl_date");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.GlHidecode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gl_hidecode");
            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
            entity.Property(e => e.GlPlcodeMgmt)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_PLCodeMgmt");
            entity.Property(e => e.GlUserId).HasColumnName("gl_UserId");
            entity.Property(e => e.GlWorkStation)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("gl_WorkStation");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
            entity.Property(e => e.Uid)
                .HasMaxLength(50)
                .HasColumnName("uid");
        });

        modelBuilder.Entity<PartialAdjustment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("PartialAdjustment");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.PartialAdjustments)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_PartialAdjustment_Business_Partners_Main");
        });

        modelBuilder.Entity<PartialAdjustmentPaymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartialAdjustmentPaymentDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AdjustmentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequesSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClearingSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DishonouredChequeBankId).HasColumnName("DishonouredChequeBankID");
            entity.Property(e => e.DishonouredChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Narration)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_PartialAdjustmentDetail_Business_Partners_Main");

            entity.HasOne(d => d.Bank).WithMany()
                .HasForeignKey(d => new { d.CompId, d.DishonouredChequeBankId })
                .HasConstraintName("FK_PartialAdjustmentPaymentDetail_Banks");

            entity.HasOne(d => d.ChequesClearing).WithMany()
                .HasForeignKey(d => new { d.ClearingSrno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_PartialAdjustmentDetail_ChequesClearing");

            entity.HasOne(d => d.PartialAdjustment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_PartialAdjustmentDetail_PartialAdjustment");
        });

        modelBuilder.Entity<PartialAdjustmentReceiptDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartialAdjustmentReceiptDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AdjustmentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequesNewSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChequesSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClearingSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DishonouredChequeBankId).HasColumnName("DishonouredChequeBankID");
            entity.Property(e => e.DishonouredChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_PartialAdjustmentReceiptDetail_Business_Partners_Main");

            entity.HasOne(d => d.Bank).WithMany()
                .HasForeignKey(d => new { d.CompId, d.DishonouredChequeBankId })
                .HasConstraintName("FK_PartialAdjustmentReceiptDetail_Banks");

            entity.HasOne(d => d.ChequesClearing).WithMany()
                .HasForeignKey(d => new { d.ClearingSrno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_PartialAdjustmentReceiptDetail_ChequesClearing");

            entity.HasOne(d => d.PartialAdjustment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_PartialAdjustmentReceiptDetail_PartialAdjustment");
        });

        modelBuilder.Entity<PartialReceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DocumentNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PaymentTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesManId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SalesManID");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.PartialReceipts)
                .HasForeignKey(d => new { d.SalesManId, d.CompId })
                .HasConstraintName("FK_PartialReceipts_Business_Partners_Main");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.PartialReceipts)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_PartialReceipts_SubSegment");
        });

        modelBuilder.Entity<Party>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.AdAddress1)
                .HasMaxLength(255)
                .HasColumnName("Ad_address1");
            entity.Property(e => e.AdAddress2)
                .HasMaxLength(255)
                .HasColumnName("Ad_address2");
            entity.Property(e => e.AdCity)
                .HasMaxLength(50)
                .HasColumnName("ad_city");
            entity.Property(e => e.AdContactperson)
                .HasMaxLength(30)
                .HasColumnName("ad_contactperson");
            entity.Property(e => e.AdCountry)
                .HasMaxLength(50)
                .HasColumnName("ad_country");
            entity.Property(e => e.AdCpemail)
                .HasMaxLength(100)
                .HasColumnName("ad_CPemail");
            entity.Property(e => e.AdCpphone)
                .HasMaxLength(50)
                .HasColumnName("ad_CPphone");
            entity.Property(e => e.AdEmail)
                .HasMaxLength(100)
                .HasColumnName("ad_Email");
            entity.Property(e => e.AdFax)
                .HasMaxLength(50)
                .HasColumnName("ad_fax");
            entity.Property(e => e.AdNtn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ad_NTN");
            entity.Property(e => e.AdPaymentTerms)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ad_PaymentTerms");
            entity.Property(e => e.AdPhone)
                .HasMaxLength(50)
                .HasColumnName("ad_phone");
            entity.Property(e => e.AdStreg)
                .HasMaxLength(17)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ad_STReg");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Credit).HasColumnName("credit");
            entity.Property(e => e.Debit).HasColumnName("debit");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("IT_CGL");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("IT_PGL");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Party1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PARTY");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Glcode)
                .HasMaxLength(10)
                .HasColumnName("glcode");
            entity.Property(e => e.OpDate)
                .HasColumnType("datetime")
                .HasColumnName("opDate");
            entity.Property(e => e.PrtyAdl1)
                .HasMaxLength(50)
                .HasColumnName("PRTY_ADL1");
            entity.Property(e => e.PrtyAdl2)
                .HasMaxLength(50)
                .HasColumnName("PRTY_ADL2");
            entity.Property(e => e.PrtyAdl3)
                .HasMaxLength(50)
                .HasColumnName("PRTY_ADL3");
            entity.Property(e => e.PrtyCode)
                .HasMaxLength(31)
                .HasColumnName("PRTY_CODE");
            entity.Property(e => e.PrtyDesc)
                .HasColumnType("ntext")
                .HasColumnName("prty_desc");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("PRTY_NAME");
            entity.Property(e => e.PrtyOpbalance)
                .HasColumnType("money")
                .HasColumnName("prty_opbalance");
            entity.Property(e => e.PrtyPhone)
                .HasMaxLength(14)
                .HasColumnName("PRTY_PHONE");
            entity.Property(e => e.PrtyTlx)
                .HasMaxLength(14)
                .HasColumnName("PRTY_TLX");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .HasColumnName("sUser");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .HasColumnName("year");
        });

        modelBuilder.Entity<PartyAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Party_Addresses");

            entity.Property(e => e.AdAddress1)
                .HasMaxLength(100)
                .HasColumnName("Ad_address1");
            entity.Property(e => e.AdAddress2)
                .HasMaxLength(100)
                .HasColumnName("Ad_address2");
            entity.Property(e => e.AdCity)
                .HasMaxLength(50)
                .HasColumnName("ad_city");
            entity.Property(e => e.AdContactperson)
                .HasMaxLength(30)
                .HasColumnName("ad_contactperson");
            entity.Property(e => e.AdCountry)
                .HasMaxLength(50)
                .HasColumnName("ad_country");
            entity.Property(e => e.AdCpemail)
                .HasMaxLength(100)
                .HasColumnName("ad_CPemail");
            entity.Property(e => e.AdCpphone)
                .HasMaxLength(50)
                .HasColumnName("ad_CPphone");
            entity.Property(e => e.AdEmail)
                .HasMaxLength(100)
                .HasColumnName("ad_Email");
            entity.Property(e => e.AdFax)
                .HasMaxLength(50)
                .HasColumnName("ad_fax");
            entity.Property(e => e.AdNtn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ad_NTN");
            entity.Property(e => e.AdPaymentTerms)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ad_PaymentTerms");
            entity.Property(e => e.AdPhone)
                .HasMaxLength(50)
                .HasColumnName("ad_phone");
            entity.Property(e => e.AdStreg)
                .HasMaxLength(17)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ad_STReg");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
        });

        modelBuilder.Entity<PartyCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("party_category");

            entity.Property(e => e.CatagoryCode)
                .HasMaxLength(50)
                .HasColumnName("Catagory_Code");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsFixedLength()
                .HasColumnName("f_year");
        });

        modelBuilder.Entity<PartyChartofAcct>(entity =>
        {
            entity.HasKey(e => e.GlCode);

            entity.ToTable("Party_ChartofAcct");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.AdAddress1)
                .HasMaxLength(255)
                .HasColumnName("Ad_address1");
            entity.Property(e => e.AdAddress2)
                .HasMaxLength(255)
                .HasColumnName("Ad_address2");
            entity.Property(e => e.AdCity)
                .HasMaxLength(50)
                .HasColumnName("ad_city");
            entity.Property(e => e.AdContactperson)
                .HasMaxLength(30)
                .HasColumnName("ad_contactperson");
            entity.Property(e => e.AdCountry)
                .HasMaxLength(50)
                .HasColumnName("ad_country");
            entity.Property(e => e.AdCpemail)
                .HasMaxLength(100)
                .HasColumnName("ad_CPemail");
            entity.Property(e => e.AdCpphone)
                .HasMaxLength(50)
                .HasColumnName("ad_CPphone");
            entity.Property(e => e.AdEmail)
                .HasMaxLength(100)
                .HasColumnName("ad_Email");
            entity.Property(e => e.AdFax)
                .HasMaxLength(50)
                .HasColumnName("ad_fax");
            entity.Property(e => e.AdNtn)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ad_NTN");
            entity.Property(e => e.AdPaymentTerms)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ad_PaymentTerms");
            entity.Property(e => e.AdPhone)
                .HasMaxLength(50)
                .HasColumnName("ad_phone");
            entity.Property(e => e.AdStreg)
                .HasMaxLength(17)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ad_STReg");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Credit).HasColumnName("credit");
            entity.Property(e => e.Debit).HasColumnName("debit");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("IT_CGL");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("IT_PGL");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
        });

        modelBuilder.Entity<PartyCreditLimit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartyCreditLimit");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.RecoveryDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PartyLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PARTY_LOG");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Glcode)
                .HasMaxLength(10)
                .HasColumnName("glcode");
            entity.Property(e => e.LogSerial).HasColumnName("LOG_Serial");
            entity.Property(e => e.OpDate)
                .HasColumnType("datetime")
                .HasColumnName("opDate");
            entity.Property(e => e.PrtyActionTaken)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PRTY_ACTION_TAKEN");
            entity.Property(e => e.PrtyAdl1)
                .HasMaxLength(50)
                .HasColumnName("PRTY_ADL1");
            entity.Property(e => e.PrtyAdl2)
                .HasMaxLength(50)
                .HasColumnName("PRTY_ADL2");
            entity.Property(e => e.PrtyAdl3)
                .HasMaxLength(50)
                .HasColumnName("PRTY_ADL3");
            entity.Property(e => e.PrtyCode)
                .HasMaxLength(10)
                .HasColumnName("PRTY_CODE");
            entity.Property(e => e.PrtyDateModified)
                .HasColumnType("datetime")
                .HasColumnName("PRTY_DATE_MODIFIED");
            entity.Property(e => e.PrtyDesc)
                .HasColumnType("ntext")
                .HasColumnName("prty_desc");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("PRTY_NAME");
            entity.Property(e => e.PrtyOpbalance)
                .HasColumnType("money")
                .HasColumnName("prty_opbalance");
            entity.Property(e => e.PrtyPhone)
                .HasMaxLength(14)
                .HasColumnName("PRTY_PHONE");
            entity.Property(e => e.PrtyTlx)
                .HasMaxLength(14)
                .HasColumnName("PRTY_TLX");
            entity.Property(e => e.PrtyUserid).HasColumnName("PRTY_USERID");
            entity.Property(e => e.PrtyWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRTY_WORKSTATION");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .HasColumnName("sUser");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .HasColumnName("year");
        });

        modelBuilder.Entity<PartyPayment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("PartyPayment");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApaccrualBalance).HasColumnName("APAccrualBalance");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bptype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPType");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentAgainst)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SlipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<PartyPaymentCheque>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.ChequeNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Docno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOCNo");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaidVia)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.PartyPayment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_PartyPaymentCheques_PartyPayment");
        });

        modelBuilder.Entity<PartyPaymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Party_Payment_Detail");

            entity.Property(e => e.AdvanceIncomeTax).HasColumnName("advance_income_tax");
            entity.Property(e => e.AmountPaid).HasColumnName("amount_paid");
            entity.Property(e => e.AmountPayable).HasColumnName("amount_payable");
            entity.Property(e => e.AmountToBePaid).HasColumnName("Amount_To_Be_Paid");
            entity.Property(e => e.CashDiscount).HasColumnName("cash_discount");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DocDate).HasColumnName("doc_date");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("doc_no");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("doc_type");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.InvoiceValue).HasColumnName("invoice_value");
            entity.Property(e => e.IpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IP_No");
            entity.Property(e => e.PostingDate).HasColumnName("posting_date");
            entity.Property(e => e.SalesTax).HasColumnName("sales_tax");
            entity.Property(e => e.Select).HasColumnName("select_");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.TotalPayment).HasColumnName("total_payment");
            entity.Property(e => e.Vin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VIN");
            entity.Property(e => e.Vindate).HasColumnName("VINDATE");

            entity.HasOne(d => d.PartyPaymentMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FYear })
                .HasConstraintName("FK_Party_Payment_Detail_Party_Payment_Main");
        });

        modelBuilder.Entity<PartyPaymentDetail1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartyPaymentDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Ipdate).HasColumnName("IPDate");
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.Ipsno).HasColumnName("IPSNo");
            entity.Property(e => e.Ipsrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPSrno");
            entity.Property(e => e.IpsubSegment).HasColumnName("IPSubSegment");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Vin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VIN");
            entity.Property(e => e.Vindate).HasColumnName("VINDATE");

            entity.HasOne(d => d.PartyPayment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_PartyPaymentDetail_PartyPayment");
        });

        modelBuilder.Entity<PartyPaymentMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FYear });

            entity.ToTable("Party_Payment_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.AcNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ac_no");
            entity.Property(e => e.AdvanceBal).HasColumnName("advance_bal");
            entity.Property(e => e.ApAccuralBal).HasColumnName("ap_accural_bal");
            entity.Property(e => e.BpType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bp_type");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bpcode");
            entity.Property(e => e.CheqAmount).HasColumnName("cheq_amount");
            entity.Property(e => e.CheqSlipDate).HasColumnName("cheq_slip_date");
            entity.Property(e => e.CheqSlipNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheq_slip_no");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.InvoiceBal).HasColumnName("invoice_bal");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.NetBal).HasColumnName("net_bal");
            entity.Property(e => e.PaymentAgainst)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("payment_against");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("payment_mode");
            entity.Property(e => e.PaymentOnAccount).HasColumnName("payment_on_account");
            entity.Property(e => e.SaveCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Save_creationDate");
            entity.Property(e => e.SaveUserid).HasColumnName("Save_userid");
            entity.Property(e => e.SaveUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_username");
            entity.Property(e => e.SaveWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_workstation");
            entity.Property(e => e.SecurityBal).HasColumnName("security_bal");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
        });

        modelBuilder.Entity<PartyPaymentSecurity>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Party_Payment_Security");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.Spc).HasColumnName("SPC");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<PartyPaymentSecurity1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PartyPaymentSecurity");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Spc).HasColumnName("SPC");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<PartyVoucherDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Party_Voucher_Detail");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .HasColumnName("vType");

            entity.HasOne(d => d.VKeyNavigation).WithMany()
                .HasForeignKey(d => d.VKey)
                .HasConstraintName("FK_Party_Voucher_Detail_Party_Voucher_Main");
        });

        modelBuilder.Entity<PartyVoucherMain>(entity =>
        {
            entity.HasKey(e => e.VKey);

            entity.ToTable("Party_Voucher_Main");

            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VCancel).HasColumnName("vCancel");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<PaymentPlan>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("PaymentPlan");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.Bank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CDueAmount).HasColumnName("cDueAmount");
            entity.Property(e => e.CDueDate).HasColumnName("cDueDate");
            entity.Property(e => e.CPaidAmount).HasColumnName("cPaidAmount");
            entity.Property(e => e.CPaidDate).HasColumnName("cPaidDate");
            entity.Property(e => e.CPaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cPaymentMode");
            entity.Property(e => e.CReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cReferenceNo");
            entity.Property(e => e.CRemarks)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cRemarks");
            entity.Property(e => e.CType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cType");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Psdsuk)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("psdsuk");
            entity.Property(e => e.ReceiptFrom)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.PaymentPlans)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_PaymentPlan_Business_Partners_Main");
        });

        modelBuilder.Entity<PendingFollowup>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("PendingFollowup");

            entity.Property(e => e.City)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Followuptime).HasColumnType("datetime");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.SizeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SizeID");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.PendingFollowups)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_PendingFollowup_ProjectRegistration");
        });

        modelBuilder.Entity<PendingLead>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.Project)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SourceOfReference)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UpdationTime).HasColumnType("datetime");
            entity.Property(e => e.WhatsAppNo)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.FromUser).WithMany(p => p.PendingLeads)
                .HasForeignKey(d => d.FromUserId)
                .HasConstraintName("FK_PendingLeads_Users");
        });

        modelBuilder.Entity<PendingLeadsNew>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("PendingLeadsNew");

            entity.HasIndex(e => new { e.ProjectId, e.UncontactNo }, "UN_ContactNo").IsUnique();

            entity.Property(e => e.City)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerName).HasMaxLength(500);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.FormId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormID");
            entity.Property(e => e.LeadType)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Occupation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrganicStatus)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.QueueTeamId).HasColumnName("QueueTeamID");
            entity.Property(e => e.Reason)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Reference)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("reference");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RespondedRemarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.ResponseTime).HasColumnType("datetime");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamId).HasColumnName("TeamID");
            entity.Property(e => e.UncontactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("UNContactNo");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.WebNotification).HasDefaultValue(true);
            entity.Property(e => e.Whatsapp)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.CampaignAllocation).WithMany(p => p.PendingLeadsNews)
                .HasForeignKey(d => new { d.CampaignSerialNo, d.CompId })
                .HasConstraintName("FK_PendingLeadsNew_CampaignAllocation");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.PendingLeadsNews)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_PendingLeadsNew_ProjectRegistration");

            entity.HasOne(d => d.TeamMaster).WithMany(p => p.PendingLeadsNews)
                .HasForeignKey(d => new { d.TeamId, d.CompId })
                .HasConstraintName("FK_PendingLeadsNew_TeamMaster");
        });

        modelBuilder.Entity<Pid>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PID");

            entity.Property(e => e.BalanceQty).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.KeyField)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("keyField");
            entity.Property(e => e.Make)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("make");
            entity.Property(e => e.PiItemno)
                .HasMaxLength(13)
                .IsFixedLength()
                .HasColumnName("PI_ITEMNO");
            entity.Property(e => e.PiNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("pi_no");
            entity.Property(e => e.PiPono)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("pi_pono");
            entity.Property(e => e.PiQty)
                .HasColumnType("money")
                .HasColumnName("PI_QTY");
            entity.Property(e => e.PiRate)
                .HasColumnType("money")
                .HasColumnName("PI_RATE");
            entity.Property(e => e.PiReqdate)
                .HasColumnType("datetime")
                .HasColumnName("PI_REQDATE");
            entity.Property(e => e.PiValue)
                .HasColumnType("money")
                .HasColumnName("PI_Value");
            entity.Property(e => e.PidRemarks)
                .HasMaxLength(200)
                .HasColumnName("pid_remarks");
            entity.Property(e => e.Posted).HasColumnName("posted");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PidLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PID_LOG");

            entity.Property(e => e.BalanceQty).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.KeyField)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("keyField");
            entity.Property(e => e.LogSerial).HasColumnName("LOG_Serial");
            entity.Property(e => e.Make)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("make");
            entity.Property(e => e.PiItemno)
                .HasMaxLength(13)
                .IsFixedLength()
                .HasColumnName("PI_ITEMNO");
            entity.Property(e => e.PiNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("pi_no");
            entity.Property(e => e.PiPono)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("pi_pono");
            entity.Property(e => e.PiQty)
                .HasColumnType("money")
                .HasColumnName("PI_QTY");
            entity.Property(e => e.PiRate)
                .HasColumnType("money")
                .HasColumnName("PI_RATE");
            entity.Property(e => e.PiReqdate)
                .HasColumnType("datetime")
                .HasColumnName("PI_REQDATE");
            entity.Property(e => e.PiValue)
                .HasColumnType("money")
                .HasColumnName("PI_Value");
            entity.Property(e => e.PidRemarks)
                .HasMaxLength(200)
                .HasColumnName("pid_remarks");
            entity.Property(e => e.Posted).HasColumnName("posted");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Pim>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PIM");

            entity.Property(e => e.CcCode)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("cc_code");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.KeyField)
                .HasMaxLength(15)
                .IsFixedLength();
            entity.Property(e => e.MillRef)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("Mill_Ref");
            entity.Property(e => e.PiDate)
                .HasColumnType("datetime")
                .HasColumnName("PI_DATE");
            entity.Property(e => e.PiLocalHo)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("PI_LocalHo");
            entity.Property(e => e.PiNature)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("PI_NATURE");
            entity.Property(e => e.PiNo)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("PI_NO");
            entity.Property(e => e.PiType)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("PI_TYPE");
            entity.Property(e => e.Posted).HasColumnName("posted");
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .HasColumnName("remarks");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sUser");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PimLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PIM_LOG");

            entity.Property(e => e.CcCode)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("cc_code");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.KeyField)
                .HasMaxLength(15)
                .IsFixedLength();
            entity.Property(e => e.LogSerial).HasColumnName("LOG_Serial");
            entity.Property(e => e.MillRef)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("Mill_Ref");
            entity.Property(e => e.PiActionTaken)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PI_Action_Taken");
            entity.Property(e => e.PiDate)
                .HasColumnType("datetime")
                .HasColumnName("PI_DATE");
            entity.Property(e => e.PiDateModified)
                .HasColumnType("datetime")
                .HasColumnName("PI_Date_Modified");
            entity.Property(e => e.PiLocalHo)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("pi_LocalHo");
            entity.Property(e => e.PiNature)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("PI_NATURE");
            entity.Property(e => e.PiNo)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("PI_NO");
            entity.Property(e => e.PiType)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("PI_TYPE");
            entity.Property(e => e.PiWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PI_Workstation");
            entity.Property(e => e.Posted).HasColumnName("posted");
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .HasColumnName("remarks");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sUser");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PipePurchaseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PipePurchaseDetail");

            entity.Property(e => e.CompId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("comp_id");
            entity.Property(e => e.SAvgRate).HasColumnName("s_AvgRate");
            entity.Property(e => e.SAvgValue).HasColumnName("s_AvgValue");
            entity.Property(e => e.SCount)
                .HasMaxLength(50)
                .HasColumnName("s_count");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SIncValue).HasColumnName("s_IncValue");
            entity.Property(e => e.SMainkey)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_mainkey");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SPipes).HasColumnName("s_Pipes");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SSaleRate).HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SSalesTaxValue).HasColumnName("s_SalesTaxValue");
            entity.Property(e => e.SSerial).HasColumnName("s_serial");
            entity.Property(e => e.SSfed).HasColumnName("s_SFED");
            entity.Property(e => e.SUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Unit");
        });

        modelBuilder.Entity<PipePurchaseMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PipePurchaseMain");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.SAccountskey)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_accountskey");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(50)
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SChallanNo).HasColumnName("s_challanNo");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SInvdate)
                .HasColumnType("datetime")
                .HasColumnName("s_invdate");
            entity.Property(e => e.SInvno).HasColumnName("s_invno");
            entity.Property(e => e.SInvsub)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_invsub");
            entity.Property(e => e.SMainKey)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_MainKey");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SOwgpDate)
                .HasColumnType("datetime")
                .HasColumnName("s_OwgpDate");
            entity.Property(e => e.SOwgpNo).HasColumnName("s_OwgpNo");
            entity.Property(e => e.SStper).HasColumnName("s_stper");
            entity.Property(e => e.SSupplier)
                .HasMaxLength(50)
                .HasColumnName("s_Supplier");
            entity.Property(e => e.SType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_type");
            entity.Property(e => e.SYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_year");
        });

        modelBuilder.Entity<PipeSaleDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PipeSaleDetail");

            entity.Property(e => e.CompId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("comp_id");
            entity.Property(e => e.SAvgRate).HasColumnName("s_AvgRate");
            entity.Property(e => e.SAvgValue).HasColumnName("s_AvgValue");
            entity.Property(e => e.SCount)
                .HasMaxLength(50)
                .HasColumnName("s_count");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SIncValue).HasColumnName("s_IncValue");
            entity.Property(e => e.SMainkey)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_mainkey");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SPipes).HasColumnName("s_Pipes");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SSaleRate).HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SSalesTaxValue).HasColumnName("s_SalesTaxValue");
            entity.Property(e => e.SSerial).HasColumnName("s_serial");
            entity.Property(e => e.SSfed).HasColumnName("s_SFED");
            entity.Property(e => e.SUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Unit");

            entity.HasOne(d => d.SMainkeyNavigation).WithMany()
                .HasForeignKey(d => d.SMainkey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PipeSaleDetail_PipeSaleMain");
        });

        modelBuilder.Entity<PipeSaleMain>(entity =>
        {
            entity.HasKey(e => e.SMainKey);

            entity.ToTable("PipeSaleMain");

            entity.Property(e => e.SMainKey)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_MainKey");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Ogpdate).HasColumnName("ogpdate");
            entity.Property(e => e.Ogpno)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ogpno");
            entity.Property(e => e.SAccountskey)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_accountskey");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(50)
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SChallanNo).HasColumnName("s_challanNo");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SInvdate)
                .HasColumnType("datetime")
                .HasColumnName("s_invdate");
            entity.Property(e => e.SInvno).HasColumnName("s_invno");
            entity.Property(e => e.SInvsub)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_invsub");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SOwgpDate)
                .HasColumnType("datetime")
                .HasColumnName("s_OwgpDate");
            entity.Property(e => e.SOwgpNo).HasColumnName("s_OwgpNo");
            entity.Property(e => e.SStper).HasColumnName("s_stper");
            entity.Property(e => e.SSupplier)
                .HasMaxLength(50)
                .HasColumnName("s_Supplier");
            entity.Property(e => e.SType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_type");
            entity.Property(e => e.SYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_year");
        });

        modelBuilder.Entity<Plconfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("plconfig");

            entity.Property(e => e.Figurbold).HasColumnName("figurbold");
            entity.Property(e => e.Headingbold).HasColumnName("headingbold");
            entity.Property(e => e.ListIndex).HasColumnName("list_index");
            entity.Property(e => e.Main)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("main");
            entity.Property(e => e.Pbox).HasColumnName("pbox");
            entity.Property(e => e.Pdbunderline).HasColumnName("pdbunderline");
            entity.Property(e => e.Pdownline).HasColumnName("pdownline");
            entity.Property(e => e.Pfig).HasColumnName("pfig");
            entity.Property(e => e.Pheading)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("pheading");
            entity.Property(e => e.PlCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Pl_code");
            entity.Property(e => e.PlineNo).HasColumnName("plineNo");
            entity.Property(e => e.Pnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pnote");
            entity.Property(e => e.Pupline).HasColumnName("pupline");
        });

        modelBuilder.Entity<PlotAllocationReceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("PlotAllocationReceipt");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RefNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<PlotAllocationReceiptDelivery>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("PlotAllocationReceiptDelivery");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Courier)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredFrom)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<Po>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PO");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Po_no");
            entity.Property(e => e.PoQtyord).HasColumnName("PO_QTYORD");
            entity.Property(e => e.PoRate).HasColumnName("PO_RATE");
            entity.Property(e => e.PoValue).HasColumnName("po_Value");
            entity.Property(e => e.RequisitionDate).HasColumnName("Requisition_Date");
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requisition_No");
            entity.Property(e => e.Srno).HasColumnName("srno");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Stax).HasColumnName("stax");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Podetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PODetail");

            entity.Property(e => e.ActualQty).HasColumnName("Actual_Qty");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.DiscountValue).HasColumnName("Discount_Value");
            entity.Property(e => e.ExciseDuty).HasColumnName("Excise_Duty");
            entity.Property(e => e.ExciseDutyValue).HasColumnName("Excise_Duty_Value");
            entity.Property(e => e.ExtraDiscount).HasColumnName("Extra_Discount");
            entity.Property(e => e.ExtraDiscountValue).HasColumnName("Extra_Discount_Value");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NetPurchaseRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Net_Purchase_Rate");
            entity.Property(e => e.PoNo).HasColumnName("Po_no");
            entity.Property(e => e.PoQtyord).HasColumnName("PO_QTYORD");
            entity.Property(e => e.PoRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("PO_RATE");
            entity.Property(e => e.PoValue)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("po_Value");
            entity.Property(e => e.QtyConsumed).HasColumnName("Qty_Consumed");
            entity.Property(e => e.RequisitionDate).HasColumnName("Requisition_Date");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Requisition_key");
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requisition_No");
            entity.Property(e => e.RequisitionSno).HasColumnName("Requisition_Sno");
            entity.Property(e => e.SalesTaxValue).HasColumnName("Sales_Tax_Value");
            entity.Property(e => e.Srno).HasColumnName("srno");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Stax).HasColumnName("stax");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalValue)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Total_Value");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_PODetail_ITEM_Master");

            entity.HasOne(d => d.Pomaster).WithMany()
                .HasForeignKey(d => new { d.Keys, d.Year, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PODetail_POMaster");
        });

        modelBuilder.Entity<Pomaster>(entity =>
        {
            entity.HasKey(e => new { e.Keys, e.Year, e.CompId });

            entity.ToTable("POMaster");

            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Contact_person");
            entity.Property(e => e.ContactPersonEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Contact_Person_Email");
            entity.Property(e => e.DelivryDate).HasColumnName("delivry_date");
            entity.Property(e => e.ForeignCurrency)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Foreign_Currency");
            entity.Property(e => e.Import).HasColumnName("import");
            entity.Property(e => e.ModeofPacking)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modeof_packing");
            entity.Property(e => e.Mop)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MOP");
            entity.Property(e => e.PoDate).HasColumnName("PO_DATE");
            entity.Property(e => e.PoDiscountper).HasColumnName("po_discountper");
            entity.Property(e => e.PoNo).HasColumnName("PO_NO");
            entity.Property(e => e.PoStaxper).HasColumnName("po_staxper");
            entity.Property(e => e.Remarks).HasColumnType("text");
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SUer).HasColumnName("sUer");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Terms)
                .HasColumnType("text")
                .HasColumnName("terms");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.Pomasters)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_POMaster_Business_Partners_Main");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.Pomasters)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_POMaster_SubSegment");
        });

        modelBuilder.Entity<PrDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PrDetail");

            entity.Property(e => e.GrnNo).HasColumnName("grn_no");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(31)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("item_desc");
            entity.Property(e => e.PrNo).HasColumnName("Pr_no");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Srno).HasColumnName("srno");
            entity.Property(e => e.Stax).HasColumnName("STax");

            entity.HasOne(d => d.GrnNoNavigation).WithMany()
                .HasForeignKey(d => d.GrnNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrDetail_GrnMaster");

            entity.HasOne(d => d.PrNoNavigation).WithMany()
                .HasForeignKey(d => d.PrNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PrDetail_PrMaster");
        });

        modelBuilder.Entity<PrMaster>(entity =>
        {
            entity.HasKey(e => e.PrNo);

            entity.ToTable("PrMaster");

            entity.Property(e => e.PrNo)
                .ValueGeneratedNever()
                .HasColumnName("Pr_no");
            entity.Property(e => e.DNoteDate).HasColumnName("D_note_date");
            entity.Property(e => e.DNoteNo).HasColumnName("D_note_no");
            entity.Property(e => e.GlCode)
                .HasMaxLength(31)
                .IsFixedLength()
                .HasColumnName("gl_code");
            entity.Property(e => e.GpDate).HasColumnName("GP_date");
            entity.Property(e => e.Ogp).HasColumnName("OGP");
            entity.Property(e => e.PrDate).HasColumnName("Pr_date");
            entity.Property(e => e.VDate).HasColumnName("V_date");
            entity.Property(e => e.VNo).HasColumnName("V_no");
            entity.Property(e => e.VPost)
                .HasMaxLength(1)
                .HasColumnName("V_post");
        });

        modelBuilder.Entity<PriceList>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("PriceList");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PricePlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<PriceListDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PriceListDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.PriceList).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_PriceListDetail_PriceList");
        });

        modelBuilder.Entity<PriorityQueue>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("PriorityQueue");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.TeamId).HasColumnName("TeamID");
            entity.Property(e => e.TeamName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PriorityQueueDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PriorityQueueDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.Employee).WithMany()
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_PriorityQueueDetail_Users");

            entity.HasOne(d => d.PriorityQueue).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_PriorityQueueDetail_PriorityQueue");
        });

        modelBuilder.Entity<ProductPricingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProductPricing_Detail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.RemainingQty).HasColumnName("Remaining_Qty");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SupplierRate).HasColumnName("Supplier_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WholeSalesRate).HasColumnName("WholeSales_Rate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.ProductPricingMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ProductPricing_Detail_ProductPricing_Main");
        });

        modelBuilder.Entity<ProductPricingDetail1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProductPricingDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Uom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ProductPricingMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.FinancialYear, d.CompId })
                .HasConstraintName("FK_ProductPricingDetail_ProductPricingMaster");
        });

        modelBuilder.Entity<ProductPricingDetailBp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProductPricing_Detail_BP");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.ProductPricingMainBp).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ProductPricing_Detail_BP_ProductPricing_Main_BP");
        });

        modelBuilder.Entity<ProductPricingMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("ProductPricing_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ProductPricingMainBp>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("ProductPricing_Main_BP");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ProductPricingMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.FinancialYear, e.CompId });

            entity.ToTable("ProductPricingMaster");

            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.LevelFive)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.LevelFour)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.LevelThree)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<ProductPricingPurchaseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProductPricingPurchase_Detail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WholeSalesRate).HasColumnName("WholeSales_Rate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.ProductPricingPurchaseMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_ProductPricingPurchase_Detail_ProductPricingPurchase_Main");
        });

        modelBuilder.Entity<ProductPricingPurchaseMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("ProductPricingPurchase_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<ProfitLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Profit_Loss");

            entity.Property(e => e.PlCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pl_code");
            entity.Property(e => e.PlDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("pl_desc");
        });

        modelBuilder.Entity<ProjectExchange>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("ProjectExchange");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Suser).WithMany(p => p.ProjectExchanges)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_ProjectExchange_Users");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.ProjectExchanges)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_ProjectExchange_SubSegment");
        });

        modelBuilder.Entity<ProjectInventory>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ProjectInventory");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.InventoryType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<ProjectInventoryDetail>(entity =>
        {
            
                entity.HasKey(p => new { p.Srno, p.FinancialYear, p.Sno });
                entity.ToTable("ProjectInventoryDetail");

            entity.HasIndex(e => e.StatusUpdationKey, "StatusUpdationKey_ProjectInventoryDetail").IsUnique();

            entity.Property(e => e.BlocksDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Exchange)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Transfer)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectInventory).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ProjectInventoryDetail_ProjectInventory");
        });

        modelBuilder.Entity<ProjectRegistration>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("ProjectRegistration");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AttachGlintegration).HasColumnName("AttachGLIntegration");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<ProjectReschedule>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("ProjectReschedule");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Reason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.ProjectSale).WithMany(p => p.ProjectReschedules)
                .HasForeignKey(d => new { d.ProjectSrno, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectReschedule_ProjectSale");
        });

        modelBuilder.Entity<ProjectRescheduleDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProjectRescheduleDetail");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LateChargesPaid).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesPayable).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesTotal).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LatePaymentChargesStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NetPayableAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.NewDescription)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewDueAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.TotalPaidAmount).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.ProjectReschedule).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_ProjectRescheduleDetail_ProjectReschedule");
        });

        modelBuilder.Entity<ProjectReversal>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("ProjectReversal");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Reason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.ProjectSale).WithMany(p => p.ProjectReversals)
                .HasForeignKey(d => new { d.ProjectSrno, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectReversal_ProjectSale");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.ProjectReversals)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectReversal_SubSegment");
        });

        modelBuilder.Entity<ProjectSale>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_ProjectSale_1");

            entity.ToTable("ProjectSale");

            entity.HasIndex(e => e.MembershipNo, "UMembershipNo_ProjectSale")
                .IsUnique()
                .HasFilter("([MembershipNo] IS NOT NULL)");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ChequeInHandSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.Commission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CommissionType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Confirmation)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationPayment)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBankId).HasColumnName("CustomerBankID");
            entity.Property(e => e.DealNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExtraChargesSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileReceiving)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentPlanSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.NextToKin)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NextToKinCNIC");
            entity.Property(e => e.NextToKinContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartyPaymentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PlanType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PosessionCertificateDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleReceipts)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PslateChargesPerDay)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PSLateChargesPerDay");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReferringType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RentalPlan)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TransferCity1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferCity2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferCnic1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransferCNIC1");
            entity.Property(e => e.TransferCnic2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransferCNIC2");
            entity.Property(e => e.TransferCode1)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferCode2)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferContact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferContact1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferContact2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferEmail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferEmail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferNextToKin)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferNextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferNextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TransferNextToKinCNIC");
            entity.Property(e => e.TransferRelationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.Muser).WithMany(p => p.ProjectSaleMusers)
                .HasForeignKey(d => d.MuserId)
                .HasConstraintName("FK_ProjectSale_UsersM");

            entity.HasOne(d => d.Suser).WithMany(p => p.ProjectSaleSusers)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_ProjectSale_Users");

            entity.HasOne(d => d.AreaDetail).WithMany(p => p.ProjectSales)
                .HasForeignKey(d => new { d.Area, d.CompId })
                .HasConstraintName("FK_ProjectSale_AreaDetails");

            entity.HasOne(d => d.BlocksDetail).WithMany(p => p.ProjectSales)
                .HasForeignKey(d => new { d.BlockSerialNo, d.CompId })
                .HasConstraintName("FK_ProjectSale_BlocksDetails");

            entity.HasOne(d => d.BookingCategoryDetail).WithMany(p => p.ProjectSales)
                .HasForeignKey(d => new { d.BookingCategory, d.CompId })
                .HasConstraintName("FK_ProjectSale_BookingCategoryDetails");

            entity.HasOne(d => d.BookingTypeDetail).WithMany(p => p.ProjectSales)
                .HasForeignKey(d => new { d.BookingType, d.CompId })
                .HasConstraintName("FK_ProjectSale_BookingTypeDetails");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.ProjectSaleBusinessPartnersMains)
                .HasForeignKey(d => new { d.ClientCode, d.CompId })
                .HasConstraintName("FK_ProjectSale_BPClientCode");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.ProjectSales)
                .HasForeignKey(d => new { d.Project, d.CompId })
                .HasConstraintName("FK_ProjectSale_ProjectRegistration");

            entity.HasOne(d => d.PropertyDetailNavigation).WithMany(p => p.ProjectSales)
                .HasForeignKey(d => new { d.PropertyDetail, d.CompId })
                .HasConstraintName("FK_ProjectSale_PropertyDetails");

            entity.HasOne(d => d.BusinessPartnersMainNavigation).WithMany(p => p.ProjectSaleBusinessPartnersMainNavigations)
                .HasForeignKey(d => new { d.ReferringPerson, d.CompId })
                .HasConstraintName("FK_ProjectSale_Business_Partners_Main");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.ProjectSales)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_ProjectSale_SubSegment");

            entity.HasOne(d => d.BusinessPartnersMain1).WithMany(p => p.ProjectSaleBusinessPartnersMain1s)
                .HasForeignKey(d => new { d.VendorCode, d.CompId })
                .HasConstraintName("FK_ProjectSale_BPVendorCode");
        });

        modelBuilder.Entity<ProjectSaleCrd>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ProjectSaleCRD");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientRepresentativeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<ProjectSaleDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProjectSaleDetail");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LateChargesPaid).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesPayable).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesTotal).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LatePaymentChargesStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NetPayableAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.TotalPaidAmount).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.ProjectSale).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_ProjectSaleDetail_ProjectSale");
        });

        modelBuilder.Entity<ProjectSaleFileDelivery>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ProjectSaleFileDelivery");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Dealer)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceiverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.ProjectSaleFileDeliveries)
                .HasForeignKey(d => new { d.Dealer, d.CompId })
                .HasConstraintName("FK_ProjectSaleFileDelivery_Business_Partners_Main");
        });

        modelBuilder.Entity<ProjectSaleFingerPrint>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProjectSaleFingerPrint");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Data).HasColumnType("text");
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectSale).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_ProjectSaleFingerPrint_ProjectSale");
        });

        modelBuilder.Entity<ProjectSalePcd>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ProjectSalePCD");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PosessionCertificateNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<ProjectSaleReceiptsDelivery>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ProjectSaleReceiptsDelivery");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientRepresentativeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<ProjectSaleTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProjectSaleTransfer");

            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Cnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectTranferSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Tcity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TCity");
            entity.Property(e => e.TclientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TClientCode");
            entity.Property(e => e.Tcnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TCNIC");
            entity.Property(e => e.Tcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TContact");
            entity.Property(e => e.Temail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TEmail");
            entity.Property(e => e.TfatherName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TFatherName");
            entity.Property(e => e.TnextToKin)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TNextToKin");
            entity.Property(e => e.TnextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TNextToKinAddress");
            entity.Property(e => e.TnextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TNextToKinCNIC");
            entity.Property(e => e.TnextToKinContact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TNextToKinContact");
            entity.Property(e => e.Tpic).HasColumnName("TPic");
            entity.Property(e => e.Trelationship)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TRelationship");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.ClientCode, d.CompId })
                .HasConstraintName("FK_ProjectSaleTransfer_Business_Partners_Main");

            entity.HasOne(d => d.ProjectSale).WithMany()
                .HasForeignKey(d => new { d.ProjectSaleSrno, d.CompId })
                .HasConstraintName("FK_ProjectSaleTransfer_ProjectSale");

            entity.HasOne(d => d.BusinessPartnersMainNavigation).WithMany()
                .HasForeignKey(d => new { d.TclientCode, d.CompId })
                .HasConstraintName("FK_ProjectSaleTransfer_Business_Partners_Main1");
        });

        modelBuilder.Entity<ProjectTransfer>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ProjectTransfer");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.CashBank)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.Contact)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.NextToKin)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NextToKinCNIC");
            entity.Property(e => e.NextToKinContact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TransfereeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransfererBioMatricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TransfererBioMatricID");
            entity.Property(e => e.TransfererCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransfererVerified)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Comp).WithMany(p => p.ProjectTransfers)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectTransfer_CompanySetup");

            entity.HasOne(d => d.Muser).WithMany(p => p.ProjectTransferMusers)
                .HasForeignKey(d => d.MuserId)
                .HasConstraintName("FK_ProjectTransfer_UsersM");

            entity.HasOne(d => d.Suser).WithMany(p => p.ProjectTransferSusers)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_ProjectTransfer_UsersS");

            entity.HasOne(d => d.ProjectSale).WithMany(p => p.ProjectTransfers)
                .HasForeignKey(d => new { d.ProjectSaleSrno, d.CompId })
                .HasConstraintName("FK_ProjectTransfer_ProjectSale");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.ProjectTransfers)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_ProjectTransfer_SubSegment");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.ProjectTransferBusinessPartnersMains)
                .HasForeignKey(d => new { d.TransfereeCode, d.CompId })
                .HasConstraintName("FK_ProjectTransfer_Business_Partners_MainB");

            entity.HasOne(d => d.BusinessPartnersMainNavigation).WithMany(p => p.ProjectTransferBusinessPartnersMainNavigations)
                .HasForeignKey(d => new { d.TransfererCode, d.CompId })
                .HasConstraintName("FK_ProjectTransfer_Business_Partners_MainA");
        });

        modelBuilder.Entity<ProjectTransferFingerPrint>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProjectTransferFingerPrint");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Data).HasColumnType("text");
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProjectTransfererFingerPrint>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProjectTransfererFingerPrint");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Data).HasColumnType("text");
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProjectWiseGl>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("ProjectWiseGL");

            entity.HasIndex(e => e.ProjectId, "UProjectID_ProjectWiseGL").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Apaccural)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("APAccural");
            entity.Property(e => e.BookingPayable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.Cash)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.Chequesinhand)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.CommissionExpense)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.CommissionIncome)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationPayable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.Discount)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.FileInventory)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.General)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentPayable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentReceivable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.OtherIncome)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.RentalExpense)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Token)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.TradingIncome)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.TradingReceivable)
                .HasMaxLength(31)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.ProjectWiseGls)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_ProjectWiseGL_ProjectRegistration");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.ProjectWiseGls)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_ProjectWiseGL_SubSegment");
        });

        modelBuilder.Entity<PropertyDetail>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Title)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProvisionalSalePurchase>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("ProvisionalSalePurchase");

            entity.Property(e => e.ApprovalDateTime).HasColumnType("datetime");
            entity.Property(e => e.ApprovalTime)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.BookingTypeId).HasColumnName("BookingTypeID");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.SizeId).HasColumnName("SizeID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Psdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PSDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LateChargesPaid).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesPayable).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesTotal).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LatePaymentChargesStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.ProjectSale).WithMany()
                .HasForeignKey(d => new { d.ProjectSrno, d.CompId })
                .HasConstraintName("FK_PSDetail_ProjectSale");
        });

        modelBuilder.Entity<PslatePayment>(entity =>
        {
            entity.HasKey(e => new { e.ProjectSrno, e.CompId, e.Sno, e.LatePaymentSrno });

            entity.ToTable("PSLatePayment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.ProjectSale).WithMany(p => p.PslatePayments)
                .HasForeignKey(d => new { d.ProjectSrno, d.CompId })
                .HasConstraintName("FK_PSLatePayment_ProjectSale");
        });

        modelBuilder.Entity<PurchaseDiscountDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Purchase_Discount_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.PdNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PD_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.PurchaseDiscountMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Purchase_Discount_Detail_Purchase_Discount_Main");
        });

        modelBuilder.Entity<PurchaseDiscountMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("Purchase_Discount_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.PdNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PD_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PurchaseDiscountsBpDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PurchaseDiscountsBP_Detail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.PurchaseDiscountsBpMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_PurchaseDiscountsBP_Detail_PurchaseDiscountsBP_Main");
        });

        modelBuilder.Entity<PurchaseDiscountsBpMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("PurchaseDiscountsBP_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PurchaseRate>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<PurchaseRatesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PurchaseRatesDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.PurchaseRate).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PurchaseRatesDetail_PurchaseRates");
        });

        modelBuilder.Entity<PurchaseRatesSubSegmentsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PurchaseRatesSubSegmentsDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<QueryForPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QueryForPurchase");

            entity.Property(e => e.Address)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailId).HasColumnName("PropertyDetailID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo).ValueGeneratedOnAdd();
            entity.Property(e => e.SizeId).HasColumnName("SizeID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<QuotaAllocation>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("QuotaAllocation");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DpserialNo).HasColumnName("DPSerialNo");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.Suser).WithMany(p => p.QuotaAllocations)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_QuotaAllocation_Users");

            entity.HasOne(d => d.DealPurchase).WithMany(p => p.QuotaAllocations)
                .HasForeignKey(d => new { d.DealPurchaseSrno, d.CompId })
                .HasConstraintName("FK_QuotaAllocation_DealPurchase");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.QuotaAllocations)
                .HasForeignKey(d => new { d.Project, d.CompId })
                .HasConstraintName("FK_QuotaAllocation_ProjectRegistration");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.QuotaAllocations)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_QuotaAllocation_SubSegment");
        });

        modelBuilder.Entity<QuotaAllocationDetail>(entity =>
        {
            entity.HasKey(e => e.FileNo);

            entity.ToTable("QuotaAllocationDetail");

            entity.Property(e => e.FileNo).ValueGeneratedNever();
            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Rebate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.FileNoNavigation).WithOne(p => p.QuotaAllocationDetail)
                .HasForeignKey<QuotaAllocationDetail>(d => d.FileNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_QuotaAllocationDetail_DealPurchaseDetail");

            entity.HasOne(d => d.AreaDetail).WithMany(p => p.QuotaAllocationDetails)
                .HasForeignKey(d => new { d.AreaId, d.CompId })
                .HasConstraintName("FK_QuotaAllocationDetail_AreaDetails");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.QuotaAllocationDetails)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_QuotaAllocationDetail_Business_Partners_Main");

            entity.HasOne(d => d.QuotaAllocation).WithMany(p => p.QuotaAllocationDetails)
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_QuotaAllocationDetail_QuotaAllocation");
        });

        modelBuilder.Entity<QuotaAllocationModified>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("QuotaAllocationModified");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DpserialNo).HasColumnName("DPSerialNo");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.QuotaAllocationModifieds)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_QuotaAllocationModified_SubSegment");
        });

        modelBuilder.Entity<QuotaAllocationModifiedDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("QuotaAllocationModifiedDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Pbpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PBPCode");
            entity.Property(e => e.Pdiscount).HasColumnName("PDiscount");
            entity.Property(e => e.PownAmount).HasColumnName("POwnAmount");
            entity.Property(e => e.Prebate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRebate");
            entity.Property(e => e.Rebate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.FileNoNavigation).WithMany()
                .HasForeignKey(d => d.FileNo)
                .HasConstraintName("FK_QuotaAllocationModifiedDetail_DealPurchaseDetail");

            entity.HasOne(d => d.AreaDetail).WithMany()
                .HasForeignKey(d => new { d.AreaId, d.CompId })
                .HasConstraintName("FK_QuotaAllocationModifiedDetail_AreaDetails");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_QuotaAllocationModifiedDetail_Business_Partners_Main");

            entity.HasOne(d => d.BookingCategoryDetail).WithMany()
                .HasForeignKey(d => new { d.PropertyType, d.CompId })
                .HasConstraintName("FK_QuotaAllocationModifiedDetail_BookingCategoryDetails");

            entity.HasOne(d => d.QuotaAllocationModified).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_QuotaAllocationModifiedDetail_QuotaAllocationModified");
        });

        modelBuilder.Entity<QuotationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Quotation_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.FurtherTax).HasColumnName("further_tax");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("item_group");
            entity.Property(e => e.Purity)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("purity");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Rpu).HasColumnName("rpu");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SalesTax).HasColumnName("sales_tax");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("specification");
            entity.Property(e => e.SrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sr_no");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalValue).HasColumnName("total_value");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Value).HasColumnName("value");

            entity.HasOne(d => d.QuotationMaster).WithMany()
                .HasForeignKey(d => new { d.SrNo, d.CompId, d.FYear, d.SubSegmentId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Quotation_Detail_Quotation_Master");
        });

        modelBuilder.Entity<QuotationMaster>(entity =>
        {
            entity.HasKey(e => new { e.SrNo, e.CompId, e.FYear, e.SubSegmentId }).HasName("PK_Quotation_Master_1");

            entity.ToTable("Quotation_Master");

            entity.Property(e => e.SrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sr_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Address)
                .IsUnicode(false)
                .HasColumnName("address");
            entity.Property(e => e.Attention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("attention");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bp_code");
            entity.Property(e => e.BpName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("bp_name");
            entity.Property(e => e.ComplimentaryClose)
                .HasColumnType("text")
                .HasColumnName("complimentary_close");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("contact_no");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Designation)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("designation");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref_no");
            entity.Property(e => e.SaveCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Save_creationDate");
            entity.Property(e => e.SaveUserId).HasColumnName("SaveUserID");
            entity.Property(e => e.SaveUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_username");
            entity.Property(e => e.SaveWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_workstation");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Subject)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("subject");
            entity.Property(e => e.Terms)
                .HasColumnType("text")
                .HasColumnName("terms");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.QuotationMasters)
                .HasForeignKey(d => new { d.BpCode, d.CompId })
                .HasConstraintName("FK_Quotation_Master_Business_Partners_Main");
        });

        modelBuilder.Entity<RawMaterialIssuanceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RawMaterialIssuanceDetail");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RequisitionSubSegmentId).HasColumnName("RequisitionSubSegmentID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_RawMaterialIssuanceDetail_ITEM_Master");

            entity.HasOne(d => d.RawMaterialIssuanceMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RawMaterialIssuanceDetail_RawMaterialIssuanceMaster");
        });

        modelBuilder.Entity<RawMaterialIssuanceMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("RawMaterialIssuanceMaster");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DriverName).HasMaxLength(50);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
        });

        modelBuilder.Entity<RawMaterialReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RawMaterialReturnDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionSubSegmentId).HasColumnName("RequisitionSubSegmentID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_RawMaterialReturnDetail_ITEM_Master");

            entity.HasOne(d => d.RawMaterialReturnMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_RawMaterialReturnDetail_RawMaterialReturnMaster");
        });

        modelBuilder.Entity<RawMaterialReturnMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("RawMaterialReturnMaster");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DriverName).HasMaxLength(50);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IssuanceNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IssuanceSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
        });

        modelBuilder.Entity<RebateDefinition>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("RebateDefinition");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.PlanName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.VendorRebate)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RebateDefinitionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RebateDefinitionDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.RebateOffered)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonRebate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.RebateDefinition).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_RebateDefinitionDetail_RebateDefinition");
        });

        modelBuilder.Entity<ReceiptSecurity>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Receipt_Security");

            entity.Property(e => e.CompId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.Spc).HasColumnName("SPC");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("year");
        });

        modelBuilder.Entity<ReceiptsDelivery>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("ReceiptsDelivery");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientRepresentativeName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredFromLocation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BookingForm).WithMany(p => p.ReceiptsDeliveries)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .HasConstraintName("FK_ReceiptsDelivery_BookingForm");
        });

        modelBuilder.Entity<ReceiptsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ReceiptsDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Docdate).HasColumnName("DOCDate");
            entity.Property(e => e.Docno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCNo");
            entity.Property(e => e.Doctype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOCType");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Ipdate).HasColumnName("IPDate");
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.Ipsrno).HasColumnName("IPSrno");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.KgQty).HasColumnName("KG_Qty");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SelectIpno).HasColumnName("SelectIPNo");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentIddetail).HasColumnName("SubSegmentIDDetail");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Whtax).HasColumnName("WHTax");

            entity.HasOne(d => d.ReceiptsMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_ReceiptsDetail_Receipts_Main");
        });

        modelBuilder.Entity<ReceiptsMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("Receipts_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bptype).HasColumnName("BPType");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecoveryAgent)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.HasKey(e => new { e.GlCode, e.CompId });

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gl_code");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.GlDesc)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.GlHidecode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gl_hidecode");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
        });

        modelBuilder.Entity<RegionRight>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.RegionRights)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_RegionRights_Users");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.RegionRights)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_RegionRights_SubSegment");
        });

        modelBuilder.Entity<RegionRightsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RegionRightsDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.RegionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RegionID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.Region).WithMany()
                .HasForeignKey(d => new { d.RegionId, d.CompId })
                .HasConstraintName("FK_RegionRightsDetail_Regions");

            entity.HasOne(d => d.RegionRight).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RegionRightsDetail_RegionRights");
        });

        modelBuilder.Entity<Rental>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("Rental");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<RentalStructure>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("RentalStructure");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.ProjectSale).WithMany(p => p.RentalStructures)
                .HasForeignKey(d => new { d.ProjectSaleSrno, d.CompId })
                .HasConstraintName("FK_RentalStructure_ProjectSale");
        });

        modelBuilder.Entity<RentalStructureDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RentalStructureDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.RentalStructure).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_RentalStructureDetail_RentalStructure");
        });

        modelBuilder.Entity<Requisition>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("Requisition");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DemandType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Department)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProductionType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<RequisitionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Requisition_Detail");

            entity.Property(e => e.ActualQty).HasColumnName("Actual_Qty");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PiQty).HasColumnName("PI_QTY");
            entity.Property(e => e.PiReqdate).HasColumnName("PI_REQDATE");
            entity.Property(e => e.Remarks)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.KeysNavigation).WithMany()
                .HasForeignKey(d => d.Keys)
                .HasConstraintName("FK_Requisition_Detail_Requisition_Master");
        });

        modelBuilder.Entity<RequisitionDetail1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RequisitionDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_RequisitionDetail_ITEM_Master");

            entity.HasOne(d => d.Requisition).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_RequisitionDetail_Requisition");
        });

        modelBuilder.Entity<RequisitionMaster>(entity =>
        {
            entity.HasKey(e => e.Keys);

            entity.ToTable("Requisition_Master");

            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CcCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CC_CODE");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.PiDate).HasColumnName("PI_DATE");
            entity.Property(e => e.PiNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PI_NO");
            entity.Property(e => e.ReqType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("req_type");
            entity.Property(e => e.SUser).HasColumnName("sUser");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.SubSegment).WithMany(p => p.RequisitionMasters)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_PD_Main_SubSegment");
        });

        modelBuilder.Entity<RetailSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RetailSale");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_No");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
        });

        modelBuilder.Entity<ReturnFromDept>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("Return_From_Dept");

            entity.Property(e => e.Grndate)
                .HasColumnType("datetime")
                .HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(31)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrPretGrnno)
                .HasMaxLength(5)
                .HasColumnName("tr_PretGRNno");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("TR_QTY");
            entity.Property(e => e.TrType)
                .HasMaxLength(2)
                .HasColumnName("tr_Type");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("TR_VALUE");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<RouteDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Route_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DriverDaily).HasColumnName("driver_daily");
            entity.Property(e => e.LoaderDaily).HasColumnName("loader_daily");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Route_ID");
            entity.Property(e => e.Tolltax).HasColumnName("tolltax");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vehicle_type");

            entity.HasOne(d => d.RouteRegistration).WithMany()
                .HasForeignKey(d => new { d.RouteId, d.CompId })
                .HasConstraintName("FK_Route_Detail_Route_Registration");
        });

        modelBuilder.Entity<RouteRegistration>(entity =>
        {
            entity.HasKey(e => new { e.RouteId, e.CompId });

            entity.ToTable("Route_Registration");

            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("route_id");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.CustomerType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("customer_type");
            entity.Property(e => e.DriverExpense).HasColumnName("driver_expense");
            entity.Property(e => e.LoaderExpense).HasColumnName("loader_expense");
            entity.Property(e => e.LoadingExpense).HasColumnName("loading_expense");
            entity.Property(e => e.Mileage)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mileage");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.Time)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("time");
            entity.Property(e => e.TimeType).HasColumnName("time_type");
            entity.Property(e => e.TollTax).HasColumnName("toll_tax");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_type");
        });

        modelBuilder.Entity<SalaryDispersement>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("SalaryDispersement");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.SalarySheetNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalarySheetSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<SalaryDispersementBankDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SalaryDispersementBankDetail");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeBankId).HasColumnName("EmployeeBankID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.SalaryDispersement).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalaryDispersementBankDetail_SalaryDispersement");
        });

        modelBuilder.Entity<SalaryDispersementDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SalaryDispersementDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeBankId).HasColumnName("EmployeeBankID");
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HandlingOfficer)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaidFromBankAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Signature)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.SalaryDispersement).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalaryDispersementDetail_SalaryDispersement");
        });

        modelBuilder.Entity<SalaryDispersementSetup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SalaryDispersementSetup");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<SalaryPerquisitesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Salary_Perquisites_Detail");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.GlCode).HasColumnName("Gl_Code");
            entity.Property(e => e.Per)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PerquisitesTittle)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Perquisites_tittle");
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.SalaryPerquisitesMain).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SrNo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Salary_Perquisites_Detail_Salary_Perquisites_Main1");
        });

        modelBuilder.Entity<SalaryPerquisitesMain>(entity =>
        {
            entity.HasKey(e => new { e.CompId, e.SrNo }).HasName("PK_Salary_Perquisites_Main_1");

            entity.ToTable("Salary_Perquisites_Main");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.PayrollExpense)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Per)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ProvisionForTaxtation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalaryPayable)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalaryTaxExpense)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<SalaryScaleDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Salary_Scale_Detail");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.PayrollExpense)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Per)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PerquisitesCode)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SalaryPayable)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.SalaryScaleMain).WithMany()
                .HasForeignKey(d => new { d.CompId, d.SrNo })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Salary_Scale_Detail_Salary_Scale_Main1");
        });

        modelBuilder.Entity<SalaryScaleMain>(entity =>
        {
            entity.HasKey(e => new { e.CompId, e.SrNo }).HasName("PK_Salary_Scale_Main_1");

            entity.ToTable("Salary_Scale_Main");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Grade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<SalarySheet>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("SalarySheet");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<SalarySheetDeductionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SalarySheetDeductionDetail");

            entity.Property(e => e.Code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vType");

            entity.HasOne(d => d.LoanAndAdvanceSetup).WithMany()
                .HasForeignKey(d => new { d.Code, d.CompId })
                .HasConstraintName("FK_SalarySheetDeductionDetail_LoanAndAdvanceSetup");
        });

        modelBuilder.Entity<SalarySheetDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SalarySheetDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmploymentType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.SalarySheet).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_SalarySheetDetail_SalarySheet");
        });

        modelBuilder.Entity<SalarySlip>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("SalarySlip");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeSlipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.SalarySheetSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<SaleDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SaleDetail");

            entity.Property(e => e.CompId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("comp_id");
            entity.Property(e => e.SAvgRate).HasColumnName("s_AvgRate");
            entity.Property(e => e.SAvgValue).HasColumnName("s_AvgValue");
            entity.Property(e => e.SCount)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_count");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SIncValue).HasColumnName("s_IncValue");
            entity.Property(e => e.SMainkey)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_mainkey");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SPipes).HasColumnName("s_Pipes");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SSaleRate).HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SSalesTaxValue).HasColumnName("s_SalesTaxValue");
            entity.Property(e => e.SSerial).HasColumnName("s_serial");
            entity.Property(e => e.SSfed).HasColumnName("s_SFED");
            entity.Property(e => e.SUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Unit");

            entity.HasOne(d => d.SMainkeyNavigation).WithMany()
                .HasForeignKey(d => d.SMainkey)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleDetail_SaleMain");
        });

        modelBuilder.Entity<SaleMain>(entity =>
        {
            entity.HasKey(e => e.SMainKey);

            entity.ToTable("SaleMain");

            entity.Property(e => e.SMainKey)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_MainKey");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.SAccountskey)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_accountskey");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SChallanNo).HasColumnName("s_challanNo");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SInvdate)
                .HasColumnType("datetime")
                .HasColumnName("s_invdate");
            entity.Property(e => e.SInvno).HasColumnName("s_invno");
            entity.Property(e => e.SInvsub)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_invsub");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SOwgpDate)
                .HasColumnType("datetime")
                .HasColumnName("s_OwgpDate");
            entity.Property(e => e.SOwgpNo).HasColumnName("s_OwgpNo");
            entity.Property(e => e.SStper).HasColumnName("s_stper");
            entity.Property(e => e.SSupplier)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Supplier");
            entity.Property(e => e.SType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_type");
            entity.Property(e => e.SYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_year");
        });

        modelBuilder.Entity<SaleOrderMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("SaleOrder_Master");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .HasColumnName("Contact_Person");
            entity.Property(e => e.DeliveryAddress).HasColumnName("Delivery_Address");
            entity.Property(e => e.Department).HasMaxLength(50);
            entity.Property(e => e.Designation).HasMaxLength(50);
            entity.Property(e => e.Freight).HasMaxLength(50);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.ModeOfShipment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Mode_ofShipment");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Per).HasMaxLength(50);
            entity.Property(e => e.QuotNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Quot_No");
            entity.Property(e => e.SaleDate).HasColumnName("Sale_Date");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.SaleType).HasMaxLength(50);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SendingInvoiceTo).HasColumnName("Sending_InvoiceTo");
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<SaleTax>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SaleTax");

            entity.Property(e => e.AdAddress1)
                .HasMaxLength(100)
                .HasColumnName("Ad_address1");
            entity.Property(e => e.AdStreg)
                .HasMaxLength(17)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ad_STReg");
            entity.Property(e => e.Bname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("bname");
            entity.Property(e => e.Expr1)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.GlCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_code");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SIncValue).HasColumnName("s_IncValue");
            entity.Property(e => e.SInvno).HasColumnName("s_invno");
            entity.Property(e => e.SInvsub)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_invsub");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SPipes).HasColumnName("s_Pipes");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SSaleRate).HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SSalesTaxValue).HasColumnName("s_SalesTaxValue");
            entity.Property(e => e.SSerial).HasColumnName("s_serial");
            entity.Property(e => e.SSfed).HasColumnName("s_SFED");
            entity.Property(e => e.SStper).HasColumnName("s_stper");
            entity.Property(e => e.SType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_type");
            entity.Property(e => e.SUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Unit");
        });

        modelBuilder.Entity<SaleorderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Saleorder_Details");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.SaleTax).HasColumnName("Sale_Tax");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.SaleOrderMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .HasConstraintName("FK_Saleorder_Details_SaleOrder_Master1");
        });

        modelBuilder.Entity<SalesInvoiceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SalesInvoice_Detail");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.CgsRate).HasColumnName("CGS_RATE");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Discount).HasColumnName("DISCOUNT");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_code");
            entity.Property(e => e.SalesInvoiceNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubsegmentId).HasColumnName("Subsegment_id");
            entity.Property(e => e.TotalValue).HasColumnName("Total_value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.SalesInvoiceMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SalesInvoice_Detail_SalesInvoice_Master");
        });

        modelBuilder.Entity<SalesInvoiceMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("SalesInvoice_Master");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BankCharges).HasColumnName("Bank_Charges");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CashReceived).HasColumnName("Cash_received");
            entity.Property(e => e.CastReturn).HasColumnName("Cast_return");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Customer_Name");
            entity.Property(e => e.CustomerNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Customer_Number");
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.SalesDate).HasColumnName("Sales_date");
            entity.Property(e => e.SalesInvoiceNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesMan)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Sales_Man");
            entity.Property(e => e.SalesType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Sales_Type");
            entity.Property(e => e.SinKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SIN_KEY");
            entity.Property(e => e.SubsegmentId).HasColumnName("Subsegment_id");
            entity.Property(e => e.TotalBill).HasColumnName("Total_bill");
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VoucherKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Voucher_key");
            entity.Property(e => e.Workstation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SalesInvoiceService>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SalesInvoice_Services");

            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.SNo).HasColumnName("S_No");
            entity.Property(e => e.ServiceCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Service_Code");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.SalesInvoiceMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SalesInvoice_Services_SalesInvoice_Master");
        });

        modelBuilder.Entity<SalesMan>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("SalesMan");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SalesManDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SalesManDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.RouteRegistration).WithMany()
                .HasForeignKey(d => new { d.RouteId, d.CompId })
                .HasConstraintName("FK_SalesManDetail_Route_Registration");

            entity.HasOne(d => d.SalesMan).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_SalesManDetail_SalesMan");
        });

        modelBuilder.Entity<SalesOrderSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SalesOrder_SubSegment");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Listindex).HasColumnName("listindex");
            entity.Property(e => e.SrNo).HasColumnName("Sr_No");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
        });

        modelBuilder.Entity<Segment>(entity =>
        {
            entity.HasKey(e => new { e.SegmentId, e.CompId });

            entity.ToTable("Segment");

            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.SegmentName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Segment_name");
        });

        modelBuilder.Entity<Service>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<ServiceBoqplan>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("ServiceBOQPlan");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<ServiceBoqplanDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ServiceBOQPlanDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.ServiceBoqplan).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_ServiceBOQPlanDetail_ServiceBOQPlan");
        });

        modelBuilder.Entity<ServicesRegistration>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("ServicesRegistration");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_No");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.ServiceLine).HasMaxLength(100);
            entity.Property(e => e.ServiceType)
                .HasMaxLength(9)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Sir>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("SIR");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.Grndate)
                .HasColumnType("datetime")
                .HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(31)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("TR_QTY");
            entity.Property(e => e.TrType)
                .HasMaxLength(2)
                .HasColumnName("tr_Type");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("TR_VALUE");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<SireturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SIReturn_Detail");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Discount).HasColumnName("DISCOUNT");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_code");
            entity.Property(e => e.SireturnNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SIReturnNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SrnoSi)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SrnoSI");
            entity.Property(e => e.SubsegmentId).HasColumnName("Subsegment_id");
            entity.Property(e => e.TotalValue).HasColumnName("Total_value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.SireturnMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.Year })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SIReturn_Detail_SIReturn_Master");
        });

        modelBuilder.Entity<SireturnMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.Year });

            entity.ToTable("SIReturn_Master");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.SinKey)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SIN_KEY");
            entity.Property(e => e.SireturnDate).HasColumnName("SIReturn_date");
            entity.Property(e => e.SireturnNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SIReturnNo");
            entity.Property(e => e.SrnoSi)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SrnoSI");
            entity.Property(e => e.SubsegmentId).HasColumnName("Subsegment_id");
            entity.Property(e => e.TotalBill).HasColumnName("Total_bill");
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VoucherKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Voucher_key");
            entity.Property(e => e.Workstation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<SkipedLead>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");

            entity.HasOne(d => d.FromUser).WithMany()
                .HasForeignKey(d => d.FromUserId)
                .HasConstraintName("FK_SkipedLeads_Users");

            entity.HasOne(d => d.ToUser).WithMany()
                .HasForeignKey(d => d.ToUserId)
                .HasConstraintName("FK_SkipedLeads_UsersTo");
        });

        modelBuilder.Entity<SmsapiIntegration>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("SMSApiIntegration");

            entity.HasIndex(e => e.SubSegmentId, "USMSApiIntegrationSS").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Apikey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APIKey");
            entity.Property(e => e.EmailPassword)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmailPort)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmailUserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Masking)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SmtpClients)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Smscompaign>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("SMSCompaign");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.CustomerType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Msg)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.TypeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TypeID");
        });

        modelBuilder.Entity<SmscompaignDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SMSCompaignDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.Smscompaign).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SMSCompaignDetail_SMSCompaign");
        });

        modelBuilder.Entity<SocietyInstallment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_SocietyInstallment_1");

            entity.ToTable("SocietyInstallment");

            entity.HasIndex(e => e.BookingFormSrno, "UBookingFormSrno_SocietyInstallment").IsUnique();

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.Bank)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CashBankOnline)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealerCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Instrument)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SalesManCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.BookingForm).WithMany(p => p.SocietyInstallments)
                .HasForeignKey(d => new { d.BookingFormSrno, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SocietyInstallment_BookingForm");
        });

        modelBuilder.Entity<SocietyInstallmentCustomerReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SocietyInstallmentCustomerReceipt");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.CustomerReceipt).WithMany()
                .HasForeignKey(d => new { d.ReceiptSrno, d.CompId })
                .HasConstraintName("FK_SocietyInstallmentCustomerReceipt_CustomerReceipt");

            entity.HasOne(d => d.SocietyInstallment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SocietyInstallmentCustomerReceipt_SocietyInstallment");
        });

        modelBuilder.Entity<SocietyPayment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_SocietyPayment_1");

            entity.ToTable("SocietyPayment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<SocietyPaymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SocietyPaymentDetail");

            entity.HasIndex(e => new { e.SocietyInstallmentSrno, e.CompId, e.FinancialYear }, "USocietyInsttallmentSrno_CompID_FinancialYear_SocietyPaymentDetail").IsUnique();

            entity.Property(e => e.BankAccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.SocietyInstallment).WithMany()
                .HasForeignKey(d => new { d.SocietyInstallmentSrno, d.CompId })
                .HasConstraintName("FK_SocietyPaymentDetail_SocietyInstallment");

            entity.HasOne(d => d.SocietyPayment).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_SocietyPaymentDetail_SocietyPayment");
        });

        modelBuilder.Entity<SocietyPaymentInstrument>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SocietyPaymentInstrument");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");

            entity.HasOne(d => d.ProjectRegistration).WithMany()
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_SocietyPaymentInstrument_ProjectRegistration");
        });

        modelBuilder.Entity<SpRptSaleRegister>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("spRptSaleRegister");

            entity.Property(e => e.CommInv)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("Comm_Inv");
            entity.Property(e => e.CommInvDate).HasColumnName("Comm_Inv_Date");
            entity.Property(e => e.ContractNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Itemcode)
                .HasMaxLength(50)
                .HasColumnName("itemcode");
            entity.Property(e => e.PartyAddress).HasMaxLength(254);
            entity.Property(e => e.PartyName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Partycode)
                .HasMaxLength(50)
                .HasColumnName("partycode");
            entity.Property(e => e.SalesExclSt).HasColumnName("salesExclST");
            entity.Property(e => e.StaxReg)
                .HasMaxLength(17)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STaxReg");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VstaxRate).HasColumnName("VSTaxRate");
        });

        modelBuilder.Entity<StatementOfFinancialPosition>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("StatementOfFinancialPosition");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<StatementOfFinancialPositionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StatementOfFinancialPositionDetail");

            entity.Property(e => e.Classification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Glcodes)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("GLCodes");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.StatementOfFinancialPosition).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StatementOfFinancialPositionDetail_StatementOfFinancialPosition");
        });

        modelBuilder.Entity<StatementOfProfitAndLoss>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("StatementOfProfitAndLoss");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<StatementOfProfitAndLossDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StatementOfProfitAndLossDetail");

            entity.Property(e => e.Classification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Glcodes)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("GLCodes");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.StatementOfProfitAndLoss).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_StatementOfProfitAndLossDetail_StatementOfProfitAndLoss");
        });

        modelBuilder.Entity<Stock>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Stock");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.IssueQty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 14)");
            entity.Property(e => e.IssueValue)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 14)");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PurchaseQty)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 14)");
            entity.Property(e => e.PurchaseValue)
                .HasDefaultValue(0m)
                .HasColumnType("decimal(28, 14)");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WarehouseName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<StockAdjustmentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StockAdjustment_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.Reason)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.StockAdustmentMaster).WithMany()
                .HasForeignKey(d => new { d.Srno, d.Year, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_StockAdjustment_Detail_StockAdustment_Master");
        });

        modelBuilder.Entity<StockAdustmentMaster>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.Year, e.CompId });

            entity.ToTable("StockAdustment_Master");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Date).HasColumnName("DATE");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.SUser).HasColumnName("sUser");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.TrUserid).HasColumnName("tr_userid");
            entity.Property(e => e.TrUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_username");
            entity.Property(e => e.TrWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_workstation");
        });

        modelBuilder.Entity<StockIssue>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_DeliveryDispatchMaster_1");

            entity.ToTable("StockIssue");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubProjectId).HasColumnName("SubProjectID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.StockIssues)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_SubSegmentID_StockIssue");
        });

        modelBuilder.Entity<StockIssueDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("StockIssueDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Uom)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UOM");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_DeliveryDispatchDetail_ITEM_Master");
        });

        modelBuilder.Entity<SubProject>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("SubProject");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.SubProjectName)
                .HasMaxLength(1000)
                .IsUnicode(false);

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.SubProjects)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_SubProject_ProjectRegistration");
        });

        modelBuilder.Entity<SubSegment>(entity =>
        {
            entity.HasKey(e => new { e.SubSegmentId, e.CompId }).HasName("PK_Project");

            entity.ToTable("SubSegment");

            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CaSubSegment)
                .HasMaxLength(50)
                .HasColumnName("CA_SubSegment");
            entity.Property(e => e.ClientOfficeCopyOnGlprint).HasColumnName("ClientOfficeCopyOnGLPrint");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CrprintWaterMark).HasColumnName("CRPrintWaterMark");
            entity.Property(e => e.Glrestriction).HasColumnName("GLRestriction");
            entity.Property(e => e.GlvoucherApprovedWaterMark).HasColumnName("GLVoucherApprovedWaterMark");
            entity.Property(e => e.Prefix)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.WebLink).HasMaxLength(50);
        });

        modelBuilder.Entity<Sublet>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_Sublet_1");

            entity.ToTable("Sublet");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AmountPer)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Fine)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.RatePerSqft).HasColumnName("RatePerSQFT");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TotalSqft).HasColumnName("TotalSQFT");
            entity.Property(e => e.UnitDetail)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Comp).WithMany(p => p.Sublets)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sublet_Companysetup");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.Sublets)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sublet_SubSegment");
        });

        modelBuilder.Entity<SubletService>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId }).HasName("PK_SubletServices_1");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AmountPer)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Fine)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.RatePerSqft).HasColumnName("RatePerSQFT");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TotalSqft).HasColumnName("TotalSQFT");

            entity.HasOne(d => d.Comp).WithMany(p => p.SubletServices)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubletServices_Companysetup");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.SubletServices)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SubletServices_SubSegment");
        });

        modelBuilder.Entity<SupportCharge>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<SupportChargesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SupportChargesDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.SupportCharge).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_SupportChargesDetail_SupportCharges");
        });

        modelBuilder.Entity<SysConfig>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SysConfig");

            entity.Property(e => e.IsCc).HasColumnName("IsCC");
            entity.Property(e => e.IsCoa).HasColumnName("IsCOA");
            entity.Property(e => e.IsGrn).HasColumnName("IsGRN");
            entity.Property(e => e.IsIgp).HasColumnName("IsIGP");
            entity.Property(e => e.IsInsptoGrn).HasColumnName("IsInsptoGRN");
            entity.Property(e => e.IsMch).HasColumnName("IsMCH");
            entity.Property(e => e.IsOgp).HasColumnName("IsOGP");
            entity.Property(e => e.IsPo).HasColumnName("IsPO");
            entity.Property(e => e.IsPostSirvoucher).HasColumnName("IsPostSIRVoucher");
            entity.Property(e => e.IsPreturn).HasColumnName("IsPReturn");
            entity.Property(e => e.IsSir).HasColumnName("IsSIR");
            entity.Property(e => e.IsinspUnRec).HasColumnName("ISInspUnRec");
            entity.Property(e => e.LoginId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LoginID");
        });

        modelBuilder.Entity<SysGenOption>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Qtytobagpercent)
                .HasColumnType("money")
                .HasColumnName("qtytobagpercent");
            entity.Property(e => e.RoundFig).HasColumnType("money");
            entity.Property(e => e.Saletaxpercent)
                .HasColumnType("money")
                .HasColumnName("saletaxpercent");
        });

        modelBuilder.Entity<SysSetting>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SysSetting");

            entity.Property(e => e.AccountdbName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoaTableName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("coaTableName");
            entity.Property(e => e.ConsVoucherType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DetailTableName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinglYear)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("finglYear");
            entity.Property(e => e.FldCodeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("fldCodeName");
            entity.Property(e => e.FldDescName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FldNarrationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FldbillDateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FldcountnoName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FldcrName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FlddDateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FlddkeyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FlddrName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FlddtypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FlddvnoName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FldglYear)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("fldglYear");
            entity.Property(e => e.FldglcodeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FldinvoiceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FldkeyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Fldqty1Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Fldqty2Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FldsrnoName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Fldunit1Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Fldunit2Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FldvDateName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FldvnoName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FldvtCodeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FldvtypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IgpvoucherType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IGPVoucherType");
            entity.Property(e => e.MainCapatilizeCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MainConsCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MainExpCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MainKnittingChargesCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mainKnittingChargesCode");
            entity.Property(e => e.MainPartyCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MainPreturnsCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MainPReturnsCode");
            entity.Property(e => e.MainPurchaseCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MainSaleCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MainSaleTaxCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MainSreturnsCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MainSReturnsCode");
            entity.Property(e => e.MainTableName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PreturnsVoucherType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PReturnsVoucherType");
            entity.Property(e => e.PurchaseVoucherType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SaleVoucherType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SreturnsVoucherType)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SReturnsVoucherType");
            entity.Property(e => e.VtypeTableName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vtypeTableName");
        });

        modelBuilder.Entity<Table1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Table_1");

            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("keys");
            entity.Property(e => e.Qtyc).HasColumnName("qtyc");
            entity.Property(e => e.Qtyp).HasColumnName("qtyp");
        });

        modelBuilder.Entity<Table2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Table_2");

            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Qty).HasColumnType("decimal(18, 6)");
        });

        modelBuilder.Entity<Tank>(entity =>
        {
            entity.HasKey(e => new { e.TankNo, e.CompId });

            entity.ToTable("Tank");

            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .HasColumnName("Tank_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CapacityKg).HasColumnName("Capacity_kg");
            entity.Property(e => e.CapacityLtr).HasColumnName("Capacity_Ltr");
            entity.Property(e => e.CapacityM3).HasColumnName("Capacity_m3");
            entity.Property(e => e.CommercialValue).HasColumnName("Commercial_value");
            entity.Property(e => e.FromLevelrang).HasColumnName("From_levelrang");
            entity.Property(e => e.GasStored).HasColumnName("Gas_stored");
            entity.Property(e => e.MaximumWp).HasColumnName("Maximum_wp");
            entity.Property(e => e.SiteLocation).HasColumnName("Site_location");
            entity.Property(e => e.StandardWeight).HasColumnName("Standard_weight");
            entity.Property(e => e.TankModelno).HasColumnName("Tank_modelno");
            entity.Property(e => e.ToLevelrang).HasColumnName("To_levelrang");
        });

        modelBuilder.Entity<TankChart>(entity =>
        {
            entity.HasKey(e => new { e.TankLevel, e.TankNo, e.CompId });

            entity.ToTable("Tank_chart");

            entity.Property(e => e.TankLevel).HasColumnName("Tank_level");
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .HasColumnName("Tank_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.LarKg).HasColumnName("LAR_kg");
            entity.Property(e => e.LarL).HasColumnName("LAR_l");
            entity.Property(e => e.LnKg).HasColumnName("LN_kg");
            entity.Property(e => e.LnL).HasColumnName("LN_l");
            entity.Property(e => e.LoKg).HasColumnName("LO_kg");
            entity.Property(e => e.LoL).HasColumnName("LO_l");

            entity.HasOne(d => d.Tank).WithMany(p => p.TankCharts)
                .HasForeignKey(d => new { d.TankNo, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tank_chart_Tank");
        });

        modelBuilder.Entity<Target>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.Month)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<TargetsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TargetsDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany()
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_TargetsDetail_Users");

            entity.HasOne(d => d.ProjectRegistration).WithMany()
                .HasForeignKey(d => new { d.ProjectRegistrationSerialNo, d.CompId })
                .HasConstraintName("FK_TargetsDetail_ProjectRegistration");

            entity.HasOne(d => d.TargetNavigation).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TargetsDetail_Targets");
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable(tb => tb.HasTrigger("TR_INSERT_TASKHISTORY"));

            entity.Property(e => e.AssignDate).HasColumnType("datetime");
            entity.Property(e => e.AssignedByUserId).HasColumnName("AssignedByUserID");
            entity.Property(e => e.LatestRemarks).HasMaxLength(1000);
            entity.Property(e => e.Step)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TargetDate).HasColumnType("datetime");
            entity.Property(e => e.TaskDescription).HasMaxLength(1000);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TaskHistory>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("TaskHistory", tb =>
                {
                    tb.HasTrigger("TR_UPDATE_After_Update_TASKHistory");
                    tb.HasTrigger("TR_UPDATE_TASKS");
                });

            entity.Property(e => e.Remarks).HasMaxLength(1000);
            entity.Property(e => e.Step).HasMaxLength(50);
            entity.Property(e => e.WorkDate).HasColumnType("datetime");

            entity.HasOne(d => d.TaskSerialNoNavigation).WithMany(p => p.TaskHistories)
                .HasForeignKey(d => d.TaskSerialNo)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TaskHistory_Tasks");
        });

        modelBuilder.Entity<TaxSlab>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TaxSlab");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<TeamDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TeamDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.Employee).WithMany()
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_TeamDetail_Users");

            entity.HasOne(d => d.TeamMaster).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_TeamDetail_TeamMaster");
        });

        modelBuilder.Entity<TeamLeader>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("TeamLeader");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.TeamLeaders)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_TeamLeader_Users");
        });

        modelBuilder.Entity<TeamLeaderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TeamLeaderDetail", tb => tb.HasTrigger("TR_TeamLeaderDetail_INSERT"));

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.LeaderUserId).HasColumnName("LeaderUserID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany()
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_TeamLeaderDetail_Users");

            entity.HasOne(d => d.TeamLeader).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .HasConstraintName("FK_TeamLeaderDetail_TeamLeader");
        });

        modelBuilder.Entity<TeamMaster>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("TeamMaster");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.TeamName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TeamSetup>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("TeamSetup");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.TeamSetups)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_TeamSetup_Business_Partners_Main");
        });

        modelBuilder.Entity<TeamSetupDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TeamSetupDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.BusinessPartnersMain).WithMany()
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_TeamSetupDetail_Business_Partners_Main");

            entity.HasOne(d => d.TeamSetup).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TeamSetupDetail_TeamSetup");
        });

        modelBuilder.Entity<TempBlcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_blcode");

            entity.Property(e => e.Blcode)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("blcode");
            entity.Property(e => e.Blline).HasColumnName("blline");
            entity.Property(e => e.Blnote).HasColumnName("blnote");
            entity.Property(e => e.Bltitle)
                .HasMaxLength(50)
                .HasColumnName("bltitle");
        });

        modelBuilder.Entity<TempCapacity>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_Capacity");

            entity.Property(e => e.Capacity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("User_ID");
        });

        modelBuilder.Entity<TempDepartment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_Departments");

            entity.Property(e => e.DepartmentId).HasColumnName("Department_ID");
            entity.Property(e => e.DepartmentName)
                .IsUnicode(false)
                .HasColumnName("Department_Name");
            entity.Property(e => e.UserId).HasColumnName("User_ID");
        });

        modelBuilder.Entity<TempDoforIp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_DOforIP");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CgsValue).HasColumnName("CGS_Value");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DeliveryAddress).IsUnicode(false);
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.Freight).IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Particulars)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.QtyCylinder).HasColumnName("Qty_Cylinder");
            entity.Property(e => e.QtyKg).HasColumnName("Qty_Kg");
            entity.Property(e => e.QtyLiter).HasColumnName("Qty_liter");
            entity.Property(e => e.QtyM3).HasColumnName("Qty_m3");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SelectCheck).HasColumnName("Select_check");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegment_ID_Detail");
            entity.Property(e => e.SubSegmentNameDetail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name_Detail");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.UserId).HasColumnName("User_Id");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TempDrRequisition>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_DR_Requisition");

            entity.Property(e => e.BalQty).HasColumnName("bal_qty");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dept_Code");
            entity.Property(e => e.DeptName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Dept_Name");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("group_code");
            entity.Property(e => e.GroupName)
                .IsUnicode(false)
                .HasColumnName("group_name");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("item_name");
            entity.Property(e => e.ReqDate).HasColumnName("req_date");
            entity.Property(e => e.ReqNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("req_no");
            entity.Property(e => e.ReqQty).HasColumnName("req_qty");
            entity.Property(e => e.SelectCheck).HasColumnName("select_check");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_Name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.UserId).HasColumnName("User_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<TempGrn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_GRN");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DocDate).HasColumnName("Doc_Date");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Doc_No");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .HasColumnName("Doc_Type");
            entity.Property(e => e.SalexTax).HasColumnName("Salex_Tax");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName).HasMaxLength(50);
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UserId).HasColumnName("User_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TempIgp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_IGP");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DcDate).HasColumnName("DC_Date");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DCNO");
            entity.Property(e => e.DiscountValue).HasColumnName("Discount_Value");
            entity.Property(e => e.ExciseDuty).HasColumnName("Excise_Duty");
            entity.Property(e => e.ExciseDutyValue).HasColumnName("Excise_Duty_Value");
            entity.Property(e => e.ExtraDiscount).HasColumnName("Extra_Discount");
            entity.Property(e => e.ExtraDiscountValue).HasColumnName("Extra_Discount_Value");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("group_code");
            entity.Property(e => e.GroupName)
                .IsUnicode(false)
                .HasColumnName("group_name");
            entity.Property(e => e.IgpDate).HasColumnName("Igp_Date");
            entity.Property(e => e.IgpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Igp_No");
            entity.Property(e => e.IgpQty).HasColumnName("Igp_qty");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("item_name");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.PoDate).HasColumnName("PO_date");
            entity.Property(e => e.PoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PO_NO");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxValue).HasColumnName("Sales_Tax_Value");
            entity.Property(e => e.SelectCheck).HasColumnName("select_check");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_Name");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Type)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.UserId).HasColumnName("User_Id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<TempIp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_IP");

            entity.Property(e => e.AmountToBeReceived).HasColumnName("Amount_ToBe_Received");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.CreditAmount).HasColumnName("Credit_Amount");
            entity.Property(e => e.CreditMemoDate).HasColumnName("Credit_Memo_Date");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Credit_Memo_No");
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Doc_type");
            entity.Property(e => e.Freight).IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.IpDate).HasColumnName("IP_Date");
            entity.Property(e => e.IpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IP_No");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QtyCylinder).HasColumnName("Qty_Cylinder");
            entity.Property(e => e.QtyKg).HasColumnName("Qty_Kg");
            entity.Property(e => e.QtyLiter).HasColumnName("Qty_liter");
            entity.Property(e => e.QtyM3).HasColumnName("Qty_m3");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxPayable).HasColumnName("Sales_Tax_Payable");
            entity.Property(e => e.SelectCheck).HasColumnName("Select_check");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegment_ID_Detail");
            entity.Property(e => e.SubSegmentNameDetail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name_Detail");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.UserId).HasColumnName("User_Id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TempIpPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_IP_Purchase");

            entity.Property(e => e.AmountToBeReceived).HasColumnName("Amount_ToBe_Received");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DebitAmount).HasColumnName("Debit_Amount");
            entity.Property(e => e.DebitMemoDate).HasColumnName("Debit_Memo_Date");
            entity.Property(e => e.DebitMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Debit_Memo_No");
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Doc_type");
            entity.Property(e => e.IpDate).HasColumnName("IP_Date");
            entity.Property(e => e.IpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IP_No");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesTaxReceivable).HasColumnName("Sales_Tax_Receivable");
            entity.Property(e => e.SelectCheck).HasColumnName("Select_check");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegment_ID_Detail");
            entity.Property(e => e.SubSegmentNameDetail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name_Detail");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UserId).HasColumnName("User_Id");
            entity.Property(e => e.Vin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VIN");
            entity.Property(e => e.Vindate).HasColumnName("VINDATE");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TempJobOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_JobOrder");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.DeliveryAddress)
                .IsUnicode(false)
                .HasColumnName("Delivery_Address");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("group_code");
            entity.Property(e => e.GroupName)
                .IsUnicode(false)
                .HasColumnName("group_name");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("item_name");
            entity.Property(e => e.JoDate).HasColumnName("JO_date");
            entity.Property(e => e.JoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JO_NO");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Purity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Route_id");
            entity.Property(e => e.RouteName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SaleTax).HasColumnName("Sale_Tax");
            entity.Property(e => e.SelectCheck).HasColumnName("select_check");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_Name");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.UserId).HasColumnName("User_Id");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vehicle_no");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<TempJobOrderWh>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_JobOrderWH");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.CylindersQty).HasColumnName("Cylinders_Qty");
            entity.Property(e => e.FWarehouseCode).HasColumnName("F_WarehouseCode");
            entity.Property(e => e.FWarehouseSubSegmentCode).HasColumnName("F_WarehouseSubSegmentCode");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.JobOrderDate).HasColumnName("JobOrder_Date");
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.SelectCheck).HasColumnName("Select_check");
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TWarehouseCode).HasColumnName("T_WarehouseCode");
            entity.Property(e => e.TWarehouseSubSegmentCode).HasColumnName("T_WarehouseSubSegmentCode");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.UserId).HasColumnName("User_Id");
        });

        modelBuilder.Entity<TempMonth>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_month");

            entity.Property(e => e.Month)
                .HasMaxLength(50)
                .HasColumnName("month");
        });

        modelBuilder.Entity<TempParty>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_Party");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.UserId).HasColumnName("User_ID");
        });

        modelBuilder.Entity<TempPartyType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_PartyType");

            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Party_Type");
            entity.Property(e => e.UserId).HasColumnName("User_ID");
        });

        modelBuilder.Entity<TempPlcode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_plcode");

            entity.Property(e => e.Listindex).HasColumnName("listindex");
            entity.Property(e => e.Plcode)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("plcode");
            entity.Property(e => e.Pltitle)
                .HasMaxLength(50)
                .HasColumnName("pltitle");
        });

        modelBuilder.Entity<TempPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_PO");

            entity.Property(e => e.BalQty).HasColumnName("bal_qty");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DiscountValue).HasColumnName("Discount_Value");
            entity.Property(e => e.ExciseDuty).HasColumnName("Excise_Duty");
            entity.Property(e => e.ExciseDutyValue).HasColumnName("Excise_Duty_Value");
            entity.Property(e => e.ExtraDiscount).HasColumnName("Extra_Discount");
            entity.Property(e => e.ExtraDiscountValue).HasColumnName("Extra_Discount_Value");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("group_code");
            entity.Property(e => e.GroupName)
                .IsUnicode(false)
                .HasColumnName("group_name");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("item_name");
            entity.Property(e => e.OrdQty).HasColumnName("Ord_qty");
            entity.Property(e => e.PoDate).HasColumnName("PO_date");
            entity.Property(e => e.PoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PO_NO");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxValue).HasColumnName("Sales_Tax_Value");
            entity.Property(e => e.SelectCheck).HasColumnName("select_check");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_Name");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Type)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.UserId).HasColumnName("User_Id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<TempProduct>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_Product");

            entity.Property(e => e.Product)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("User_ID");
        });

        modelBuilder.Entity<TempReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_Receipts");

            entity.Property(e => e.AmountReceived).HasColumnName("Amount_Received");
            entity.Property(e => e.AmountTobeReceived).HasColumnName("Amount_Tobe_Received");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.ChequeAmount).HasColumnName("Cheque_Amount");
            entity.Property(e => e.ChequeDate).HasColumnName("Cheque_Date");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cheque_No");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.CreditAmount).HasColumnName("Credit_Amount");
            entity.Property(e => e.CreditMemoDate).HasColumnName("Credit_Memo_Date");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Credit_Memo_No");
            entity.Property(e => e.Freight).IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.QtyCylinder).HasColumnName("Qty_Cylinder");
            entity.Property(e => e.QtyKg).HasColumnName("Qty_Kg");
            entity.Property(e => e.QtyLiter).HasColumnName("Qty_liter");
            entity.Property(e => e.QtyM3).HasColumnName("Qty_m3");
            entity.Property(e => e.ReceiptDate).HasColumnName("Receipt_Date");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Receipt_no");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxPayable).HasColumnName("Sales_Tax_Payable");
            entity.Property(e => e.SelectCheck).HasColumnName("Select_check");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegment_ID_Detail");
            entity.Property(e => e.SubSegmentNameDetail)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name_Detail");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalNetValue).HasColumnName("Total_Net_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.UserId).HasColumnName("User_Id");
            entity.Property(e => e.WhtTax).HasColumnName("WHT_Tax");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e._15Salestax).HasColumnName("1/5 Salestax");
        });

        modelBuilder.Entity<TempRequisition>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_requisition");

            entity.Property(e => e.BalQty).HasColumnName("bal_qty");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("group_code");
            entity.Property(e => e.GroupName)
                .IsUnicode(false)
                .HasColumnName("group_name");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("item_name");
            entity.Property(e => e.ReqDate).HasColumnName("req_date");
            entity.Property(e => e.ReqNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("req_no");
            entity.Property(e => e.ReqQty).HasColumnName("req_qty");
            entity.Property(e => e.SelectCheck).HasColumnName("select_check");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_Name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.UserId).HasColumnName("User_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<TempSaleOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_SaleOrder");

            entity.Property(e => e.BpAddress)
                .IsUnicode(false)
                .HasColumnName("BP_Address");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("group_code");
            entity.Property(e => e.GroupName)
                .IsUnicode(false)
                .HasColumnName("group_name");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("item_name");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Purity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SaleTax).HasColumnName("Sale_Tax");
            entity.Property(e => e.SelectCheck).HasColumnName("select_check");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.SoDate).HasColumnName("SO_date");
            entity.Property(e => e.SoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SO_NO");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_Name");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.UserId).HasColumnName("User_Id");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<TempSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_Segment");

            entity.Property(e => e.DonnerName)
                .HasMaxLength(50)
                .HasColumnName("Donner_name");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
        });

        modelBuilder.Entity<TempSegment1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_Segments");

            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Segment_name");
            entity.Property(e => e.UserId).HasColumnName("User_ID");
        });

        modelBuilder.Entity<TempSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_SubSegment");

            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .HasColumnName("Project_name");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
        });

        modelBuilder.Entity<TempSubSegment1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_SubSegments");

            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.UserId).HasColumnName("User_ID");
        });

        modelBuilder.Entity<TempUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp_User");

            entity.Property(e => e.AlluserId).HasColumnName("alluser_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .HasColumnName("user_name");
        });

        modelBuilder.Entity<TempVehicle>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_Vehicle");

            entity.Property(e => e.UserId).HasColumnName("User_ID");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
        });

        modelBuilder.Entity<TempWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp_Warehouses");

            entity.Property(e => e.UserId).HasColumnName("User_ID");
            entity.Property(e => e.WarehouseId).HasColumnName("Warehouse_ID");
            entity.Property(e => e.WarehouseName)
                .IsUnicode(false)
                .HasColumnName("Warehouse_Name");
        });

        modelBuilder.Entity<Temprory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temprory");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("item_group");
        });

        modelBuilder.Entity<Test>(entity =>
        {
            entity.ToTable("Test");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Des).HasMaxLength(50);
        });

        modelBuilder.Entity<TestCostCenterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TestCostCenter_Detail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_id");

            entity.HasOne(d => d.TestCostCenterMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .HasConstraintName("FK_TestCostCenter_Detail_TestCostCenter_Main");

            entity.HasOne(d => d.TestIssue).WithMany()
                .HasForeignKey(d => new { d.TestProcedureCode, d.CompId })
                .HasConstraintName("FK_TestCostCenter_Detail_TestIssue");
        });

        modelBuilder.Entity<TestCostCenterMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("TestCostCenter_Main");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Ecrno).HasColumnName("ECRno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year).HasMaxLength(9);
        });

        modelBuilder.Entity<TestDemo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Test_Demo");

            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.MachineName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MAchine_Name");
            entity.Property(e => e.StatusComm)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Status_Comm");
            entity.Property(e => e.StatusCommTimeOnOff)
                .HasColumnType("datetime")
                .HasColumnName("Status_Comm_Time_On_Off");
            entity.Property(e => e.StatusMachine)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Status_Machine");
            entity.Property(e => e.StatusMachineTimeOnOff)
                .HasColumnType("datetime")
                .HasColumnName("Status_Machine_Time_On_Off");
            entity.Property(e => e.StatusOnOff)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Status_On_Off");
            entity.Property(e => e.StatusOnOffTimeOnOff)
                .HasColumnType("datetime")
                .HasColumnName("Status_On_Off_Time_On_Off");
        });

        modelBuilder.Entity<TestIssue>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("TestIssue");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.AccountCode)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.Issue).IsUnicode(false);
        });

        modelBuilder.Entity<TestSir>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("test_sir");

            entity.Property(e => e.CompId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.SrNo).HasColumnName("sr_no");
            entity.Property(e => e.VoucherDate).HasColumnName("voucher_date");
            entity.Property(e => e.VoucherNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("voucher_no");
        });

        modelBuilder.Entity<TokenReceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("TokenReceipt");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileInventoryFileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InventoryType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TokenReturn)
                .HasMaxLength(15)
                .IsUnicode(false);

            entity.HasOne(d => d.AreaDetail).WithMany(p => p.TokenReceipts)
                .HasForeignKey(d => new { d.AreaDetailsSerialNo, d.CompId })
                .HasConstraintName("FK_TokenReceipt_AreaDetails");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.TokenReceipts)
                .HasForeignKey(d => new { d.ProjectRegistrationSerialNo, d.CompId })
                .HasConstraintName("FK_TokenReceipt_ProjectRegistration");
        });

        modelBuilder.Entity<TokenReturn>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("TokenReturn");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BankId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TokenReceiptSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Trading>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("Trading");

            entity.Property(e => e.BlockId).HasColumnName("BlockID");
            entity.Property(e => e.BookingTypeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BookingTypeID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.FileNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Gpa).HasColumnName("GPA");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SizeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SizeID");
            entity.Property(e => e.Sod).HasColumnName("SOD");
            entity.Property(e => e.TpserialNo).HasColumnName("TPSerialNo");
            entity.Property(e => e.TradingType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Tradings)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_Trading_Users");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.Tradings)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_Trading_Trading");
        });

        modelBuilder.Entity<TradingClosing>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("TradingClosing");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonFive)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonFour)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonOne)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonThree)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonTwo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubDealer)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TradingSubSegmentId).HasColumnName("TradingSubSegmentID");
            entity.Property(e => e.TradingType)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.SubSegment).WithMany(p => p.TradingClosings)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_TradingClosing_SubSegment");
        });

        modelBuilder.Entity<TradingListing>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("TradingListing");

            entity.Property(e => e.SerialNo).ValueGeneratedNever();
            entity.Property(e => e.Address)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ApartmentType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Bedrooms)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BlockId).HasColumnName("BlockID");
            entity.Property(e => e.BookingTypeId).HasColumnName("BookingTypeID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CustomerType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.HoldByUserId).HasColumnName("HoldByUserID");
            entity.Property(e => e.HoldDateTime).HasColumnType("datetime");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlotNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.PropertyDetailId).HasColumnName("PropertyDetailID");
            entity.Property(e => e.PropertyKsp).HasColumnName("PropertyKSP");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Sector)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SizeId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SizeID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TradingType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TradingListingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TradingListingDetail");

            entity.Property(e => e.Pic)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("pic");
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<TradingPayment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<TradingReceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<TradingReceiptsPayment>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountNoTwo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReceivedFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNoTwo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TradingSerialNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradingSrno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradingYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Types)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Comp).WithMany(p => p.TradingReceiptsPayments)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TradingReceiptsPayments_Companysetup");

            entity.HasOne(d => d.Suser).WithMany(p => p.TradingReceiptsPayments)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_TradingReceiptsPayments_Users");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.TradingReceiptsPayments)
                .HasForeignKey(d => new { d.PartyCode, d.CompId })
                .HasConstraintName("FK_TradingReceiptsPayments_Business_Partners_Main");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.TradingReceiptsPayments)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_TradingReceiptsPayments_SubSegment");
        });

        modelBuilder.Entity<TradingTokenReceipt>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("TradingTokenReceipt");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileInventoryFileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InventoryType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TokenReturn)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Comp).WithMany(p => p.TradingTokenReceipts)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TradingTokenReceipt_Companysetup");

            entity.HasOne(d => d.Suser).WithMany(p => p.TradingTokenReceipts)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_TradingTokenReceipt_Users");

            entity.HasOne(d => d.AreaDetail).WithMany(p => p.TradingTokenReceipts)
                .HasForeignKey(d => new { d.AreaDetailsSerialNo, d.CompId })
                .HasConstraintName("FK_TradingTokenReceipt_AreaDetails");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.TradingTokenReceipts)
                .HasForeignKey(d => new { d.ProjectRegistrationSerialNo, d.CompId })
                .HasConstraintName("FK_TradingTokenReceipt_ProjectRegistration");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.TradingTokenReceipts)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_TradingTokenReceipt_SubSegment");
        });

        modelBuilder.Entity<TradingTokenReturn>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("TradingTokenReturn");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.ClientName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.Suser).WithMany(p => p.TradingTokenReturns)
                .HasForeignKey(d => d.SuserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_TradingTokenReturn_Users");

            entity.HasOne(d => d.AreaDetail).WithMany(p => p.TradingTokenReturns)
                .HasForeignKey(d => new { d.AreaId, d.CompId })
                .HasConstraintName("FK_TradingTokenReturn_AreaDetails");

            entity.HasOne(d => d.ProjectRegistration).WithMany(p => p.TradingTokenReturns)
                .HasForeignKey(d => new { d.ProjectId, d.CompId })
                .HasConstraintName("FK_TradingTokenReturn_ProjectRegistration");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.TradingTokenReturns)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_TradingTokenReturn_SubSegment");

            entity.HasOne(d => d.TradingTokenReceipt).WithMany(p => p.TradingTokenReturns)
                .HasForeignKey(d => new { d.TokenReceiptSrno, d.CompId, d.FinancialYear })
                .HasConstraintName("FK_TradingTokenReturn_TradingTokenReceipt");
        });

        modelBuilder.Entity<TransactionLog>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            entity.Property(e => e.DocumentNarration)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DocumentNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocumentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TrialBalance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("trial_balance");

            entity.Property(e => e.Chartcr).HasColumnName("chartcr");
            entity.Property(e => e.Chartdr).HasColumnName("chartdr");
            entity.Property(e => e.Cr).HasColumnName("cr");
            entity.Property(e => e.Dr).HasColumnName("dr");
            entity.Property(e => e.GlCode)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.Tcr).HasColumnName("tcr");
            entity.Property(e => e.Tdr).HasColumnName("tdr");
        });

        modelBuilder.Entity<TrialBalance1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("trial_balances");

            entity.Property(e => e.Chartcr).HasColumnName("chartcr");
            entity.Property(e => e.Chartdr).HasColumnName("chartdr");
            entity.Property(e => e.Cr).HasColumnName("cr");
            entity.Property(e => e.Dr).HasColumnName("dr");
            entity.Property(e => e.GlCode)
                .HasMaxLength(25)
                .IsFixedLength()
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.Tcr).HasColumnName("tcr");
            entity.Property(e => e.Tdr).HasColumnName("tdr");
        });

        modelBuilder.Entity<UnitInfo>(entity =>
        {
            entity.HasKey(e => e.Unit).HasName("PK_UnitInfo_1");

            entity.ToTable("UnitInfo");

            entity.Property(e => e.Unit).HasMaxLength(50);
            entity.Property(e => e.Description).HasMaxLength(50);
        });

        modelBuilder.Entity<UomConversion>(entity =>
        {
            entity.HasKey(e => new { e.GroupCode, e.ItemCode, e.CompId }).HasName("PK_UOM_Conversion_1");

            entity.ToTable("UOM_Conversion");

            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Acr).HasColumnName("ACR");
            entity.Property(e => e.Arp).HasColumnName("ARP");
            entity.Property(e => e.Bag).HasColumnName("BAG");
            entity.Property(e => e.Bbl).HasColumnName("BBL");
            entity.Property(e => e.Bck).HasColumnName("BCK");
            entity.Property(e => e.Be).HasColumnName("BE");
            entity.Property(e => e.Bft).HasColumnName("BFT");
            entity.Property(e => e.Bk).HasColumnName("BK");
            entity.Property(e => e.Bl).HasColumnName("BL");
            entity.Property(e => e.Bot).HasColumnName("BOT");
            entity.Property(e => e.Box).HasColumnName("BOX");
            entity.Property(e => e.Bu).HasColumnName("BU");
            entity.Property(e => e.Can).HasColumnName("CAN");
            entity.Property(e => e.Car).HasColumnName("CAR");
            entity.Property(e => e.Cds).HasColumnName("CDS");
            entity.Property(e => e.Ce).HasColumnName("CE");
            entity.Property(e => e.Cen).HasColumnName("CEN");
            entity.Property(e => e.Cg).HasColumnName("CG");
            entity.Property(e => e.Cm).HasColumnName("CM");
            entity.Property(e => e.Cm2).HasColumnName("CM2");
            entity.Property(e => e.Cm3).HasColumnName("CM3");
            entity.Property(e => e.Crt).HasColumnName("CRT");
            entity.Property(e => e.Dbi).HasColumnName("DBI");
            entity.Property(e => e.Dm).HasColumnName("DM");
            entity.Property(e => e.Dm3).HasColumnName("DM3");
            entity.Property(e => e.Drm).HasColumnName("DRM");
            entity.Property(e => e.Dzn).HasColumnName("DZN");
            entity.Property(e => e.Ea).HasColumnName("EA");
            entity.Property(e => e.Foz).HasColumnName("FOZ");
            entity.Property(e => e.Fpm).HasColumnName("FPM");
            entity.Property(e => e.Ft).HasColumnName("FT");
            entity.Property(e => e.Ft2).HasColumnName("FT2");
            entity.Property(e => e.Ft3).HasColumnName("FT3");
            entity.Property(e => e.Gal).HasColumnName("GAL");
            entity.Property(e => e.Gro).HasColumnName("GRO");
            entity.Property(e => e.Ha).HasColumnName("HA");
            entity.Property(e => e.In).HasColumnName("IN");
            entity.Property(e => e.In2).HasColumnName("IN2");
            entity.Property(e => e.In3).HasColumnName("IN3");
            entity.Property(e => e.Job).HasColumnName("JOB");
            entity.Property(e => e.Kg).HasColumnName("KG");
            entity.Property(e => e.Kit).HasColumnName("KIT");
            entity.Property(e => e.Km).HasColumnName("KM");
            entity.Property(e => e.Km2).HasColumnName("KM2");
            entity.Property(e => e.Lb).HasColumnName("LB");
            entity.Property(e => e.Lf).HasColumnName("LF");
            entity.Property(e => e.Lot).HasColumnName("LOT");
            entity.Property(e => e.Lug).HasColumnName("LUG");
            entity.Property(e => e.Mg).HasColumnName("MG");
            entity.Property(e => e.Mi).HasColumnName("MI");
            entity.Property(e => e.Mi2).HasColumnName("MI2");
            entity.Property(e => e.Min).HasColumnName("MIN");
            entity.Property(e => e.Ml).HasColumnName("ML");
            entity.Property(e => e.Mm).HasColumnName("MM");
            entity.Property(e => e.Mm2).HasColumnName("MM2");
            entity.Property(e => e.Mon).HasColumnName("MON");
            entity.Property(e => e.Nam).HasColumnName("NAM");
            entity.Property(e => e.Oz).HasColumnName("OZ");
            entity.Property(e => e.Pac).HasColumnName("PAC");
            entity.Property(e => e.Pad).HasColumnName("PAD");
            entity.Property(e => e.Pal).HasColumnName("PAL");
            entity.Property(e => e.Pc).HasColumnName("PC");
            entity.Property(e => e.Pr).HasColumnName("PR");
            entity.Property(e => e.Qtr).HasColumnName("QTR");
            entity.Property(e => e.Rm).HasColumnName("RM");
            entity.Property(e => e.Rol).HasColumnName("ROL");
            entity.Property(e => e.Set).HasColumnName("SET");
            entity.Property(e => e.Sq).HasColumnName("SQ");
            entity.Property(e => e.St).HasColumnName("ST");
            entity.Property(e => e.Tu).HasColumnName("TU");
            entity.Property(e => e.Via).HasColumnName("VIA");
            entity.Property(e => e.Yd).HasColumnName("YD");
            entity.Property(e => e.Yd2).HasColumnName("YD2");
            entity.Property(e => e.Yd3).HasColumnName("YD3");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasIndex(e => e.UserName, "UUsersUser_Name").IsUnique();

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("User_id");
            entity.Property(e => e.AcceptingStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DeviceID");
            entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");
            entity.Property(e => e.FinanceDeviceId)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("FinanceDeviceID");
            entity.Property(e => e.Logindatetime)
                .HasColumnType("datetime")
                .HasColumnName("logindatetime");
            entity.Property(e => e.PasswordTwo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("passwordTwo");
            entity.Property(e => e.PlayerId).IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderSerialNos)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TeamMasterSerialNos)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserLogin)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_login");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
            entity.Property(e => e.UserPassword).HasColumnName("User_password");
        });

        modelBuilder.Entity<UserAndPartyMaping>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("UserAndPartyMaping");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Comp).WithMany(p => p.UserAndPartyMapings)
                .HasForeignKey(d => d.CompId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UserAndPartyMaping_Companysetup");

            entity.HasOne(d => d.Muser).WithMany(p => p.UserAndPartyMapingMusers)
                .HasForeignKey(d => d.MuserId)
                .HasConstraintName("FK_UserAndPartyMaping_Users1");

            entity.HasOne(d => d.Suser).WithMany(p => p.UserAndPartyMapingSusers)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_UserAndPartyMaping_UserAndPartyMaping");

            entity.HasOne(d => d.User).WithMany(p => p.UserAndPartyMapingUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UserAndPartyMaping_Users");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.UserAndPartyMapings)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_UserAndPartyMaping_Business_Partners_Main");

            entity.HasOne(d => d.EmployeeRegistrationMain).WithMany(p => p.UserAndPartyMapings)
                .HasForeignKey(d => new { d.CompId, d.EmployeeSrno })
                .HasConstraintName("FK_UserAndPartyMaping_Employee_Registration_Main");
        });

        modelBuilder.Entity<UserInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UserInfo");

            entity.Property(e => e.LoginId)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LoginName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Passward)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserTitle)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserPendingLeadsSummaryProjectWise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("UserPendingLeadsSummaryProjectWise");

            entity.Property(e => e.ActiveDropRatio).HasMaxLength(4000);
            entity.Property(e => e.ConversionRatio).HasMaxLength(4000);
            entity.Property(e => e.Followedup)
                .HasMaxLength(4000)
                .HasColumnName("followedup");
            entity.Property(e => e.FollowupDays)
                .HasMaxLength(4000)
                .HasColumnName("followupDays");
            entity.Property(e => e.PendingDropRatio).HasMaxLength(4000);
            entity.Property(e => e.Pendingfollowup).HasMaxLength(4000);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ResponseTime).HasMaxLength(4000);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserType)
                .HasMaxLength(7)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserRight>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("User_Right");

            entity.Property(e => e.AddRecord).HasColumnName("add_record");
            entity.Property(e => e.AdminFrm).HasColumnName("admin_frm");
            entity.Property(e => e.BlRpt).HasColumnName("bl_rpt");
            entity.Property(e => e.ChartFrm).HasColumnName("chart_frm");
            entity.Property(e => e.ChartalphabaticallyRpt).HasColumnName("chartalphabatically_rpt");
            entity.Property(e => e.ChartofaccountRpt).HasColumnName("chartofaccount_rpt");
            entity.Property(e => e.ConfigurationFrm).HasColumnName("configuration_frm");
            entity.Property(e => e.DailytrialRpt).HasColumnName("dailytrial_rpt");
            entity.Property(e => e.DeilverorderRpt).HasColumnName("deilverorder_rpt");
            entity.Property(e => e.DeleteRecord).HasColumnName("delete_record");
            entity.Property(e => e.DeliverorderpartyRpt).HasColumnName("deliverorderparty_rpt");
            entity.Property(e => e.DeliveryorderFrm).HasColumnName("deliveryorder_frm");
            entity.Property(e => e.EditRecord).HasColumnName("edit_record");
            entity.Property(e => e.EntityFrm).HasColumnName("entity_frm");
            entity.Property(e => e.GlledgerRpt).HasColumnName("glledger_rpt");
            entity.Property(e => e.GrnFrm).HasColumnName("grn_frm");
            entity.Property(e => e.GroupingFrm).HasColumnName("grouping_frm");
            entity.Property(e => e.InventoryRpt).HasColumnName("inventory_rpt");
            entity.Property(e => e.LedgerRpt).HasColumnName("ledger_rpt");
            entity.Property(e => e.OwnerRpt).HasColumnName("owner_rpt");
            entity.Property(e => e.PartyaddFrm).HasColumnName("partyadd_frm");
            entity.Property(e => e.PayableRpt).HasColumnName("payable_rpt");
            entity.Property(e => e.PlRpt).HasColumnName("pl_rpt");
            entity.Property(e => e.PostRpt).HasColumnName("post_rpt");
            entity.Property(e => e.ReceivableRpt).HasColumnName("receivable_rpt");
            entity.Property(e => e.SaleinvoiceRpt).HasColumnName("saleinvoice_rpt");
            entity.Property(e => e.SalepartywiseRpt).HasColumnName("salepartywise_rpt");
            entity.Property(e => e.SalesinvoiceFrm).HasColumnName("salesinvoice_frm");
            entity.Property(e => e.SalesmanRpt).HasColumnName("salesman_rpt");
            entity.Property(e => e.SalesregRpt).HasColumnName("salesreg_rpt");
            entity.Property(e => e.TrailRpt).HasColumnName("trail_rpt");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.UtilityFrm).HasColumnName("utility_frm");
            entity.Property(e => e.VoucherpostingFrm).HasColumnName("voucherposting_frm");
            entity.Property(e => e.VouchersRpt).HasColumnName("vouchers_rpt");
            entity.Property(e => e.VouchertypeFrm).HasColumnName("vouchertype_frm");
            entity.Property(e => e.VoucherviewFrm).HasColumnName("voucherview_frm");
        });

        modelBuilder.Entity<UserRightsForm>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Item)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<UserRightsSpecial>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("UserRightsSpecial");

            entity.Property(e => e.Item)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<UsersActiveTime>(entity =>
        {
            entity.HasKey(e => e.AutoSerialNo);

            entity.ToTable("UsersActiveTime");

            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.UsersActiveTimes)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_UsersActiveTime_UsersActiveTime");
        });

        modelBuilder.Entity<VDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("vDETAIL");

            entity.HasIndex(e => e.VKey, "IX_vDETAIL").IsDescending();

            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");

            entity.HasOne(d => d.VKeyNavigation).WithMany()
                .HasForeignKey(d => d.VKey)
                .HasConstraintName("FK_vDETAIL_vMAIN");

            entity.HasOne(d => d.ChartofAcct).WithMany()
                .HasForeignKey(d => new { d.GlCode, d.CompId })
                .HasConstraintName("FK_vDETAIL_ChartofAcct");

            entity.HasOne(d => d.Segment).WithMany()
                .HasForeignKey(d => new { d.SegmentId, d.CompId })
                .HasConstraintName("FK_vDETAIL_Segment");

            entity.HasOne(d => d.SubSegment).WithMany()
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_vDETAIL_SubSegment");
        });

        modelBuilder.Entity<VDetailLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("vDetail_Log");

            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VDetailPnr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("vDetailPNR");

            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.InvNo)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Type)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");

            entity.HasOne(d => d.VKeyNavigation).WithMany()
                .HasForeignKey(d => d.VKey)
                .HasConstraintName("FK_vDetailPNR_vMainPNR");

            entity.HasOne(d => d.Segment).WithMany()
                .HasForeignKey(d => new { d.SegmentId, d.CompId })
                .HasConstraintName("FK_vDetailPNR_Segment");

            entity.HasOne(d => d.SubSegment).WithMany()
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_vDetailPNR_SubSegment");
        });

        modelBuilder.Entity<VMain>(entity =>
        {
            entity.HasKey(e => e.VKey);

            entity.ToTable("vMAIN");

            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.AgentCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ModifiedDate).HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VCancel).HasColumnName("vCancel");
            entity.Property(e => e.VCheqDate).HasColumnName("vCheqDate");
            entity.Property(e => e.VCheqNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("vCheqNo");
            entity.Property(e => e.VConfirmedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vConfirmedBy");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VSuperwisedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vSuperwisedBy");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<VMainLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("vMain_Log");

            entity.Property(e => e.AgentCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VCancel).HasColumnName("vCancel");
            entity.Property(e => e.VCheqDate).HasColumnName("vCheqDate");
            entity.Property(e => e.VCheqNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("vCheqNo");
            entity.Property(e => e.VConfirmedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vConfirmedBy");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VSuperwisedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vSuperwisedBy");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<VMainPnr>(entity =>
        {
            entity.HasKey(e => e.VKey);

            entity.ToTable("vMainPNR");

            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.AgentCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.PostedById).HasColumnName("PostedByID");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.ReviewedById).HasColumnName("ReviewedByID");
            entity.Property(e => e.ReviewedDate).HasColumnType("datetime");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubProjectId).HasColumnName("SubProjectID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VCancel).HasColumnName("vCancel");
            entity.Property(e => e.VCheqDate).HasColumnName("vCheqDate");
            entity.Property(e => e.VCheqNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("vCheqNo");
            entity.Property(e => e.VConfirmedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vConfirmedBy");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VSuperwisedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vSuperwisedBy");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<VWAtc>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ATC");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AtcDate).HasColumnName("ATC_date");
            entity.Property(e => e.AtcNo).HasColumnName("ATC_no");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("capacity");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cylinder_no");
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo).HasColumnName("ECR_no");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Gasfilledin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gasfilledin");
            entity.Property(e => e.Issue).IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ownership");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWAtcDetailNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ATC_Detail_New");

            entity.Property(e => e.AtcNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ATC_no");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Cpamount).HasColumnName("CPAmount");
            entity.Property(e => e.Cpqty).HasColumnName("CPQty");
            entity.Property(e => e.EcrDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ECR_no");
            entity.Property(e => e.Issue).IsUnicode(false);
            entity.Property(e => e.Mclamount).HasColumnName("MCLAmount");
            entity.Property(e => e.Mclqty).HasColumnName("MCLQty");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.Product)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalAmount).HasColumnName("Total_Amount");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWAtcMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ATC_Main");

            entity.Property(e => e.AtcDate).HasColumnName("ATC_date");
            entity.Property(e => e.AtcNo).HasColumnName("ATC_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWAtcMainNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ATC_Main_New");

            entity.Property(e => e.AtcDate).HasColumnName("ATC_date");
            entity.Property(e => e.AtcNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ATC_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalAmountCp).HasColumnName("TotalAmount_CP");
            entity.Property(e => e.TotalAmountMcl).HasColumnName("TotalAmount_MCL");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWAtcnewReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ATCNew_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AtcDate).HasColumnName("ATC_date");
            entity.Property(e => e.AtcNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ATC_no");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Cpamount).HasColumnName("CPAmount");
            entity.Property(e => e.Cpqty).HasColumnName("CPQty");
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ECR_no");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Issue).IsUnicode(false);
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Mclamount).HasColumnName("MCLAmount");
            entity.Property(e => e.Mclqty).HasColumnName("MCLQty");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Product)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalAmount).HasColumnName("Total_Amount");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWBarCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_BarCode");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
        });

        modelBuilder.Entity<VWCfsMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_CFS_Main");

            entity.Property(e => e.CUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("C_UOM");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CompressorConversionCost).HasColumnName("Compressor_ConversionCost");
            entity.Property(e => e.CsfNo).HasColumnName("CSF_no");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.LUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("L_UOM");
            entity.Property(e => e.LiquidConversionCost).HasColumnName("Liquid_ConversionCost");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWCfstmMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_CFSTM_Main");

            entity.Property(e => e.CUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("C_UOM");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CompressorConversionCost).HasColumnName("Compressor_ConversionCost");
            entity.Property(e => e.CsfNo).HasColumnName("CSF_no");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.LUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("L_UOM");
            entity.Property(e => e.LiquidConversionCost).HasColumnName("Liquid_ConversionCost");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWCylinderFillingSessionMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_CylinderFillingSession_Main");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CfsessionDate).HasColumnName("CFSession_Date");
            entity.Property(e => e.CfsessionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CFSession_no");
            entity.Property(e => e.Checkedby).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Fillerman).HasMaxLength(50);
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Platform).HasMaxLength(50);
            entity.Property(e => e.Product).HasMaxLength(50);
            entity.Property(e => e.ProductType)
                .HasMaxLength(50)
                .HasColumnName("Product_Type");
            entity.Property(e => e.Purity).HasMaxLength(50);
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Shift).HasMaxLength(1);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TankName).HasColumnName("Tank_Name");
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .HasColumnName("Tank_no");
            entity.Property(e => e.Tf085).HasColumnName("TF085");
            entity.Property(e => e.Tf085cp).HasColumnName("TF085CP");
            entity.Property(e => e.Tf085mcl).HasColumnName("TF085MCL");
            entity.Property(e => e.Tf170).HasColumnName("TF170");
            entity.Property(e => e.Tf170cp).HasColumnName("TF170CP");
            entity.Property(e => e.Tf170mcl).HasColumnName("TF170MCL");
            entity.Property(e => e.Tf340).HasColumnName("TF340");
            entity.Property(e => e.Tf340cp).HasColumnName("TF340CP");
            entity.Property(e => e.Tf340mcl).HasColumnName("TF340MCL");
            entity.Property(e => e.Tf500).HasColumnName("TF500");
            entity.Property(e => e.Tf500cp).HasColumnName("TF500CP");
            entity.Property(e => e.Tf500mcl).HasColumnName("TF500MCL");
            entity.Property(e => e.Tf590).HasColumnName("TF590");
            entity.Property(e => e.Tf590cp).HasColumnName("TF590CP");
            entity.Property(e => e.Tf590mcl).HasColumnName("TF590MCL");
            entity.Property(e => e.Tf680).HasColumnName("TF680");
            entity.Property(e => e.Tf680cp).HasColumnName("TF680CP");
            entity.Property(e => e.Tf680mcl).HasColumnName("TF680MCL");
            entity.Property(e => e.Tf790).HasColumnName("TF790");
            entity.Property(e => e.Tf790cp).HasColumnName("TF790CP");
            entity.Property(e => e.Tf790mcl).HasColumnName("TF790MCL");
            entity.Property(e => e.Tf990).HasColumnName("TF990");
            entity.Property(e => e.Tf990cp).HasColumnName("TF990CP");
            entity.Property(e => e.Tf990mcl).HasColumnName("TF990MCL");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWCylinderFillingSessionReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_CylinderFillingSession_Report");

            entity.Property(e => e.Batch).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.EndTime).HasMaxLength(50);
            entity.Property(e => e.Pressure).HasMaxLength(50);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTime).HasMaxLength(50);
            entity.Property(e => e.Temp).HasMaxLength(50);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWCylinderFillingSessionTmMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_CylinderFillingSessionTM_Main");

            entity.Property(e => e.CfsessionTmDate).HasColumnName("CFSessionTM_Date");
            entity.Property(e => e.CfsessionTmNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CFSessionTM_no");
            entity.Property(e => e.Checkedby).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Fillerman).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Platform).HasMaxLength(50);
            entity.Property(e => e.Product).HasMaxLength(50);
            entity.Property(e => e.Purity).HasMaxLength(50);
            entity.Property(e => e.Shift).HasMaxLength(1);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWCylinderFillingSessionTmReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_CylinderFillingSessionTM_Report");

            entity.Property(e => e.AcetoneFilledKg).HasColumnName("AcetoneFilled_Kg");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CfsessionTmDate).HasColumnName("CFSessionTM_Date");
            entity.Property(e => e.CfsessionTmNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CFSessionTM_no");
            entity.Property(e => e.Checkedby).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cylinder_no");
            entity.Property(e => e.CylinderWeightWithacetone).HasColumnName("CylinderWeight_withacetone");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Fillerman).HasMaxLength(50);
            entity.Property(e => e.GasFilledKg).HasColumnName("GasFilled_Kg");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Platform).HasMaxLength(50);
            entity.Property(e => e.Product).HasMaxLength(50);
            entity.Property(e => e.Purity).HasMaxLength(50);
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Shift).HasMaxLength(1);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.WeightAfterFilling).HasColumnName("WeightAfter_filling");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWDecantingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_Decanting_Detail");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Dcdate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dcdate");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.DecantingNo).HasColumnName("Decanting_no");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.Igpdate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("igpdate");
            entity.Property(e => e.Igpno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("igpno");
            entity.Property(e => e.IssueQty).HasColumnName("Issue_Qty");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.Podate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("podate");
            entity.Property(e => e.Pono)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pono");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdIgp).HasColumnName("SubSegment_ID_IGP");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value).HasColumnName("VALUE");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWDecantingMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_Decanting_Main");

            entity.Property(e => e.AfterKg).HasColumnName("After_kg");
            entity.Property(e => e.AfterKgTankTwo).HasColumnName("After_kg_Tank_two");
            entity.Property(e => e.AfterLevel).HasColumnName("After_level");
            entity.Property(e => e.AfterLevelTankTwo).HasColumnName("After_level_Tank_two");
            entity.Property(e => e.AfterLtr).HasColumnName("After_Ltr");
            entity.Property(e => e.AfterLtrTankTwo).HasColumnName("After_Ltr_Tank_two");
            entity.Property(e => e.AfterM3).HasColumnName("After_m3");
            entity.Property(e => e.AfterM3TankTwo).HasColumnName("After_m3_Tank_two");
            entity.Property(e => e.AfterPressure).HasColumnName("After_pressure");
            entity.Property(e => e.AfterPressureTankTwo).HasColumnName("After_pressure_Tank_two");
            entity.Property(e => e.BeforeKg).HasColumnName("Before_kg");
            entity.Property(e => e.BeforeKgTankTwo).HasColumnName("Before_kg_Tank_two");
            entity.Property(e => e.BeforeLevel).HasColumnName("Before_level");
            entity.Property(e => e.BeforeLevelTankTwo).HasColumnName("Before_level_Tank_two");
            entity.Property(e => e.BeforeLtr).HasColumnName("Before_Ltr");
            entity.Property(e => e.BeforeLtrTankTwo).HasColumnName("Before_Ltr_Tank_two");
            entity.Property(e => e.BeforeM3).HasColumnName("Before_m3");
            entity.Property(e => e.BeforeM3TankTwo).HasColumnName("Before_m3_Tank_two");
            entity.Property(e => e.BeforePressure).HasColumnName("Before_pressure");
            entity.Property(e => e.BeforePressureTankTwo).HasColumnName("Before_pressure_Tank_two");
            entity.Property(e => e.ChartKg).HasColumnName("Chart_kg");
            entity.Property(e => e.ChartKgTankTwo).HasColumnName("Chart_kg_Tank_two");
            entity.Property(e => e.ChartLtr).HasColumnName("Chart_Ltr");
            entity.Property(e => e.ChartLtrTankTwo).HasColumnName("Chart_Ltr_Tank_two");
            entity.Property(e => e.ChartM3).HasColumnName("Chart_m3");
            entity.Property(e => e.ChartM3TankTwo).HasColumnName("Chart_m3_Tank_two");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DecantingDate).HasColumnName("Decanting_date");
            entity.Property(e => e.DecantingKg).HasColumnName("Decanting_kg");
            entity.Property(e => e.DecantingLtr).HasColumnName("Decanting_Ltr");
            entity.Property(e => e.DecantingM3).HasColumnName("Decanting_m3");
            entity.Property(e => e.DecantingNo).HasColumnName("Decanting_no");
            entity.Property(e => e.IgpKg).HasColumnName("IGP_kg");
            entity.Property(e => e.IgpLtr).HasColumnName("IGP_Ltr");
            entity.Property(e => e.IgpM3).HasColumnName("IGP_m3");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .HasColumnName("Tank_no");
            entity.Property(e => e.TankTwo)
                .HasMaxLength(50)
                .HasColumnName("Tank_two");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWDeliveryOrderCashSalesReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_DeliveryOrder_CashSales_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
        });

        modelBuilder.Entity<VWDeliveryOrderDriverLoaderReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_DeliveryOrder_DriverLoader_Report");

            entity.Property(e => e.Code)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Contact_no");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.JobNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWDeliveryOrderMainDetailReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_DeliveryOrder_MainDetail_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.ClassOfVehicle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Class_ofVehicle");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contact_person");
            entity.Property(e => e.CphoneNo)
                .HasMaxLength(50)
                .HasColumnName("CPhoneNo");
            entity.Property(e => e.DeliveryAddress).IsUnicode(false);
            entity.Property(e => e.DeliveryAddress2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.EmailBp)
                .HasMaxLength(50)
                .HasColumnName("Email_BP");
            entity.Property(e => e.Expr1)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.FaxBp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Fax_BP");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.JoDate).HasColumnName("JO_Date");
            entity.Property(e => e.JoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JO_No");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.MaximumLoad).HasColumnName("Maximum_Load");
            entity.Property(e => e.Mileage)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mileage");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Particulars)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Party_type");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.QytCylinder).HasColumnName("Qyt_Cylinder");
            entity.Property(e => e.QytKg).HasColumnName("Qyt_Kg");
            entity.Property(e => e.QytLiter).HasColumnName("Qyt_liter");
            entity.Property(e => e.QytM3).HasColumnName("Qyt_m3");
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SNo).HasColumnName("S_No");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegment_ID_Detail");
            entity.Property(e => e.SubSegmentNameDetail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name_Detail");
            entity.Property(e => e.SubSegmentNameMain)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name_Main");
            entity.Property(e => e.Tel1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_1");
            entity.Property(e => e.Time)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("time");
            entity.Property(e => e.TimeType).HasColumnName("time_type");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.TypeOfBody)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Type_of_Body");
            entity.Property(e => e.TypeOfVehicle)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Type_ofVehicle");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName1).HasColumnName("User_name");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");
        });

        modelBuilder.Entity<VWDeliveryOrderWarehouseReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_DeliveryOrder_Warehouse_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.CylindersQty).HasColumnName("Cylinders_Qty");
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FWarehouseCode).HasColumnName("F_WarehouseCode");
            entity.Property(e => e.FWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_WarehouseName");
            entity.Property(e => e.FWarehouseSubSegmentCode).HasColumnName("F_WarehouseSubSegmentCode");
            entity.Property(e => e.FWarehouseSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_WarehouseSubSegmentName");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.JoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("JO_Date");
            entity.Property(e => e.JoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JO_No");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TWarehouseCode).HasColumnName("T_WarehouseCode");
            entity.Property(e => e.TWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_WarehouseName");
            entity.Property(e => e.TWarehouseSubSegmentCode).HasColumnName("T_WarehouseSubSegmentCode");
            entity.Property(e => e.TWarehouseSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_WarehouseSubSegmentName");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
        });

        modelBuilder.Entity<VWDriverRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_DriverRegistration");

            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(70)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DailyExpense)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Daily_expense");
            entity.Property(e => e.DailyExpenseDesc).HasColumnName("Daily_expenseDesc");
            entity.Property(e => e.DailyPayable)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Daily_payable");
            entity.Property(e => e.DailyPayableDesc).HasColumnName("Daily_payableDesc");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.DriverId).HasColumnName("Driver_Id");
            entity.Property(e => e.JoiningDate).HasColumnName("Joining_date");
            entity.Property(e => e.LicenceExpiryDate).HasColumnName("LicenceExpiry_date");
            entity.Property(e => e.LicenceNo)
                .IsUnicode(false)
                .HasColumnName("Licence_no");
            entity.Property(e => e.LicenceType)
                .IsUnicode(false)
                .HasColumnName("Licence_type");
            entity.Property(e => e.Mobile)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Phone_no");
            entity.Property(e => e.Province)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationDate).HasColumnName("Registration_date");
            entity.Property(e => e.Remarks).IsUnicode(false);
        });

        modelBuilder.Entity<VWEcrMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ECR_Main");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo).HasColumnName("ECR_no");
            entity.Property(e => e.IgpDate).HasColumnName("IGP_date");
            entity.Property(e => e.IgpNo).HasColumnName("IGP_no");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RouteReturn).IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWEcrMainNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ECR_Main_New");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ECR_no");
            entity.Property(e => e.IgpDate).HasColumnName("IGP_date");
            entity.Property(e => e.IgpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IGP_no");
            entity.Property(e => e.RouteReturn).IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalCylinder).HasColumnName("Total_Cylinder");
            entity.Property(e => e.TotalOk).HasColumnName("Total_OK");
            entity.Property(e => e.TotalSendtoTestShop).HasColumnName("Total_SendtoTestShop");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWEcrmanagement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ECRManagement");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("capacity");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cylinder_no");
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo).HasColumnName("ECR_no");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Gasfilledin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gasfilledin");
            entity.Property(e => e.Gp)
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasColumnName("gp");
            entity.Property(e => e.IgpDate).HasColumnName("IGP_date");
            entity.Property(e => e.IgpNo).HasColumnName("IGP_no");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ownership");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RouteReturn).IsUnicode(false);
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SendToTestShop).HasColumnName("Send To Test Shop");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWEcrmanagementCylinderWise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ECRManagementCylinderWise");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("capacity");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cylinder_no");
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo).HasColumnName("ECR_no");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Gasfilledin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gasfilledin");
            entity.Property(e => e.Gp)
                .HasMaxLength(63)
                .IsUnicode(false)
                .HasColumnName("gp");
            entity.Property(e => e.IgpDate).HasColumnName("IGP_date");
            entity.Property(e => e.IgpNo).HasColumnName("IGP_no");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ownership");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RouteReturn).IsUnicode(false);
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SendToTestShop)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Send To Test Shop");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWEcrmanagementNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ECRManagement_New");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ECR_no");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.IgpDate).HasColumnName("IGP_date");
            entity.Property(e => e.IgpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IGP_no");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Product)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RouteReturn).IsUnicode(false);
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalCylinder).HasColumnName("Total_Cylinder");
            entity.Property(e => e.TotalOk).HasColumnName("Total_OK");
            entity.Property(e => e.TotalSendtoTestShop).HasColumnName("Total_SendtoTestShop");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWIpMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_IP_Main");

            entity.Property(e => e.AdvanceBal).HasColumnName("Advance_Bal");
            entity.Property(e => e.ApaccuralBal)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("APAccural_Bal");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.ChargedTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DocumentKeys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceBal).HasColumnName("Invoice_Bal");
            entity.Property(e => e.IpDate).HasColumnName("IP_Date");
            entity.Property(e => e.IpNo).HasColumnName("IP_no");
            entity.Property(e => e.Ogp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OGP");
            entity.Property(e => e.PaidBy).HasMaxLength(50);
            entity.Property(e => e.PartyType).HasMaxLength(50);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pod)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("pod");
            entity.Property(e => e.PodParty)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("podParty");
            entity.Property(e => e.PodPartyAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("podPartyAddress");
            entity.Property(e => e.Policy)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RateStatus)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SecurityBal)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Security_Bal");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWIpReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_IP_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AdvanceBal).HasColumnName("Advance_Bal");
            entity.Property(e => e.ApaccuralBal).HasColumnName("APAccural_Bal");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.Brand)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CgsValue).HasColumnName("CGS_Value");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CreditMemoAmount).HasColumnName("CreditMemo_Amount");
            entity.Property(e => e.CreditMemoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CreditMemo_date");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CreditMemo_no");
            entity.Property(e => e.CylinderQty).HasColumnName("Cylinder_Qty");
            entity.Property(e => e.DeliveryAddress).IsUnicode(false);
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DocDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Doc_Date");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Doc_No");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Doc_Type");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Freight).IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.InvoiceBal).HasColumnName("Invoice_Bal");
            entity.Property(e => e.IpDate).HasColumnName("IP_Date");
            entity.Property(e => e.IpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IP_no");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Item_Description");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.NtnOfParty)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NTN_ofParty");
            entity.Property(e => e.Particulars)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PartyType).HasMaxLength(50);
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RegisteredOfficeAdress)
                .IsUnicode(false)
                .HasColumnName("Registered_Office_Adress");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxPayable).HasColumnName("Sales_TaxPayable");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SecurityBal).HasColumnName("Security_Bal");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Strn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STRN");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegmentID_Detail");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentNameDetail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name_Detail");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalNetValue).HasColumnName("Total_NetValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.Vendor)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWJobOrderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_JobOrder_Detail");

            entity.Property(e => e.Against)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.DeliveryAddress).HasColumnName("Delivery_Address");
            entity.Property(e => e.DetailBpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Detail_BP_Code");
            entity.Property(e => e.DetailSubSegmentId).HasColumnName("Detail_SubSegment_ID");
            entity.Property(e => e.Freight).HasMaxLength(50);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.SaleDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Sale_Date");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.SaleTax).HasColumnName("Sale_Tax");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWJobOrderDriverLoaderReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_JobOrder_DriverLoader_Report");

            entity.Property(e => e.Code)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Contact_no");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWJobOrderMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_JobOrder_Main");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DeliveryDate).HasColumnName("Delivery_Date");
            entity.Property(e => e.DriverDailyCharges).HasColumnName("Driver_DailyCharges");
            entity.Property(e => e.JobOrderDate).HasColumnName("JobOrder_Date");
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.LoaderDailyCharges).HasColumnName("Loader_DailyCharges");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Route_id");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalCharges).HasColumnName("Total_Charges");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_no");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWJobOrderMainDetailReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_JobOrder_MainDetail_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.Against)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.ClassOfVehicle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Class_ofVehicle");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.DeliveryAddress).HasColumnName("Delivery_Address");
            entity.Property(e => e.DeliveryDate).HasColumnName("Delivery_Date");
            entity.Property(e => e.DetailBpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Detail_BP_Code");
            entity.Property(e => e.DetailSubSegmentId).HasColumnName("Detail_SubSegment_ID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Freight).HasMaxLength(50);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.JobOrderDate).HasColumnName("JobOrder_Date");
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.MaximumLoad).HasColumnName("Maximum_Load");
            entity.Property(e => e.Mileage)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mileage");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Route_id");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SaleDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Sale_Date");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.SaleTax).HasColumnName("Sale_Tax");
            entity.Property(e => e.Saletax1)
                .HasMaxLength(20)
                .HasColumnName("Saletax");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentNameDetail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name_Detail");
            entity.Property(e => e.SubSegmentNameMain)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name_Main");
            entity.Property(e => e.Time)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("time");
            entity.Property(e => e.TimeType).HasColumnName("time_type");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.TypeOfBody)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Type_of_Body");
            entity.Property(e => e.TypeOfVehicle)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Type_ofVehicle");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_no");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWJobOrderWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_JobOrder_Warehouse");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQty).HasColumnName("Cylinders_Qty");
            entity.Property(e => e.FWarehouseCode).HasColumnName("F_WarehouseCode");
            entity.Property(e => e.FWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_WarehouseName");
            entity.Property(e => e.FWarehouseSubSegmentCode).HasColumnName("F_WarehouseSubSegmentCode");
            entity.Property(e => e.FWarehouseSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_WarehouseSubSegmentName");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TWarehouseCode).HasColumnName("T_WarehouseCode");
            entity.Property(e => e.TWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_WarehouseName");
            entity.Property(e => e.TWarehouseSubSegmentCode).HasColumnName("T_WarehouseSubSegmentCode");
            entity.Property(e => e.TWarehouseSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_WarehouseSubSegmentName");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWJobOrderWarehouseReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_JobOrder_Warehouse_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQty).HasColumnName("Cylinders_Qty");
            entity.Property(e => e.DeliveryDate).HasColumnName("Delivery_Date");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FWarehouseCode).HasColumnName("F_WarehouseCode");
            entity.Property(e => e.FWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_WarehouseName");
            entity.Property(e => e.FWarehouseSubSegmentCode).HasColumnName("F_WarehouseSubSegmentCode");
            entity.Property(e => e.FWarehouseSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_WarehouseSubSegmentName");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.JobOrderDate).HasColumnName("JobOrder_Date");
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TWarehouseCode).HasColumnName("T_WarehouseCode");
            entity.Property(e => e.TWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_WarehouseName");
            entity.Property(e => e.TWarehouseSubSegmentCode).HasColumnName("T_WarehouseSubSegmentCode");
            entity.Property(e => e.TWarehouseSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_WarehouseSubSegmentName");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWLcForeignSupplier>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_LC_ForeignSupplier");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.IncomeTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Income_tax");
            entity.Property(e => e.IncomeTaxDesc).HasColumnName("Income_taxDesc");
            entity.Property(e => e.LcMargin)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("LC_margin");
            entity.Property(e => e.LcMarginDesc).HasColumnName("LC_marginDesc");
            entity.Property(e => e.SalesTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Sales_tax");
            entity.Property(e => e.SalesTaxDesc).HasColumnName("Sales_taxDesc");
        });

        modelBuilder.Entity<VWLcLandedCost>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_LC_LandedCost");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ControlAccount)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.LcName)
                .IsUnicode(false)
                .HasColumnName("LC_Name");
            entity.Property(e => e.Lcc).HasColumnName("LCC");
        });

        modelBuilder.Entity<VWLcfacility>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_LCFacility");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Account_Number");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
        });

        modelBuilder.Entity<VWLoaderRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_LoaderRegistration");

            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DailyExpense)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Daily_expense");
            entity.Property(e => e.DailyExpenseDesc).HasColumnName("Daily_expenseDesc");
            entity.Property(e => e.DailyPayable)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Daily_payable");
            entity.Property(e => e.DailyPayableDesc).HasColumnName("Daily_payableDesc");
            entity.Property(e => e.JoiningDate).HasColumnName("Joining_date");
            entity.Property(e => e.LoaderId).HasColumnName("Loader_Id");
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Phone_no");
            entity.Property(e => e.RegistrationDate).HasColumnName("Registration_date");
        });

        modelBuilder.Entity<VWOgp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_OGP");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderQyt).HasColumnName("Cylinder_Qyt");
            entity.Property(e => e.DoDate).HasColumnName("Do_date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.MeterOut).HasColumnName("Meter_Out");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OgpDate).HasColumnName("OGP_date");
            entity.Property(e => e.OgpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OGP_no");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWOgpReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_OGP_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderQyt).HasColumnName("Cylinder_Qyt");
            entity.Property(e => e.DoDate).HasColumnName("DO_date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.MeterOut).HasColumnName("Meter_Out");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.OgpDate).HasColumnName("OGP_date");
            entity.Property(e => e.OgpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OGP_no");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWPossalesReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_POSSales_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CgsRate).HasColumnName("CGS_RATE");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Discount).HasColumnName("DISCOUNT");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.SalesDate).HasColumnName("Sales_date");
            entity.Property(e => e.SalesInvoiceNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesMan)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Sales_Man");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubsegmentId).HasColumnName("Subsegment_id");
            entity.Property(e => e.TotalValue).HasColumnName("Total_value");
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWProductPricingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ProductPricing_Detail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SupplierRate).HasColumnName("Supplier_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WholeSalesRate).HasColumnName("WholeSales_Rate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWProductPricingDetailBp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ProductPricing_Detail_BP");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWProductPricingMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ProductPricing_Main");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWProductPricingMainBp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ProductPricing_Main_BP");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWProductPricingReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ProductPricing_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWProductPricingReportBp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ProductPricing_Report_BP");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWProfitLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ProfitLoss");

            entity.Property(e => e.Box).HasMaxLength(50);
            entity.Property(e => e.Doubleunderline).HasMaxLength(50);
            entity.Property(e => e.Downline).HasMaxLength(50);
            entity.Property(e => e.Figurebold).HasMaxLength(50);
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
            entity.Property(e => e.Headingbold).HasMaxLength(50);
            entity.Property(e => e.Plcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PLcode");
            entity.Property(e => e.Printfigure).HasMaxLength(50);
            entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            entity.Property(e => e.Upline).HasMaxLength(50);
        });

        modelBuilder.Entity<VWProfitLossDonnerwise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_ProfitLossDonnerwise");

            entity.Property(e => e.Box).HasMaxLength(50);
            entity.Property(e => e.DonnerId).HasColumnName("Donner_ID");
            entity.Property(e => e.Doubleunderline).HasMaxLength(50);
            entity.Property(e => e.Downline).HasMaxLength(50);
            entity.Property(e => e.Figurebold).HasMaxLength(50);
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
            entity.Property(e => e.Headingbold).HasMaxLength(50);
            entity.Property(e => e.Plcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PLcode");
            entity.Property(e => e.Printfigure).HasMaxLength(50);
            entity.Property(e => e.ProjectId).HasColumnName("Project_ID");
            entity.Property(e => e.Upline).HasMaxLength(50);
        });

        modelBuilder.Entity<VWSaleInvoiceItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SaleInvoiceItems");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group Code");
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Group Name");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Item Name");
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VWSaleInvoiceItemsW>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SaleInvoiceItemsWS");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group Code");
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Group Name");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Item Name");
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VWSaleOrderForQuotationdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SaleOrder_forQuotationdata");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bp_code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.FurtherTax).HasColumnName("further_tax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("item_code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("item_group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Purity)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("purity");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Rpu).HasColumnName("rpu");
            entity.Property(e => e.SalesTax).HasColumnName("sales_tax");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("specification");
            entity.Property(e => e.SrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sr_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalValue).HasColumnName("total_value");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<VWSaleOrderMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SaleOrder_Main");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .HasColumnName("Contact_Person");
            entity.Property(e => e.DeliveryAddress).HasColumnName("Delivery_Address");
            entity.Property(e => e.Department).HasMaxLength(50);
            entity.Property(e => e.Designation).HasMaxLength(50);
            entity.Property(e => e.Freight).HasMaxLength(50);
            entity.Property(e => e.ModeOfShipment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Mode_ofShipment");
            entity.Property(e => e.Per).HasMaxLength(50);
            entity.Property(e => e.QuotNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Quot_No");
            entity.Property(e => e.SaleDate).HasColumnName("Sale_Date");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.SaleType).HasMaxLength(50);
            entity.Property(e => e.SendingInvoiceTo).HasColumnName("Sending_InvoiceTo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWSaleorderSubsegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SaleorderSubsegment");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DeliveryAddress).HasColumnName("Delivery_Address");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.SalesDate)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWSalesInvoiceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SalesInvoice_Detail");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.CgsRate).HasColumnName("CGS_RATE");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Discount).HasColumnName("DISCOUNT");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.SalesDate).HasColumnName("Sales_date");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubsegmentId).HasColumnName("Subsegment_id");
            entity.Property(e => e.TotalValue).HasColumnName("Total_value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.UserLogin)
                .HasMaxLength(50)
                .HasColumnName("User_login");
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWSalesInvoiceMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SalesInvoice_Main");

            entity.Property(e => e.BankCharges).HasColumnName("Bank_Charges");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CashReceived).HasColumnName("Cash_received");
            entity.Property(e => e.CastReturn).HasColumnName("Cast_return");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("Customer_Name");
            entity.Property(e => e.CustomerNumber)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Customer_Number");
            entity.Property(e => e.Description).HasMaxLength(50);
            entity.Property(e => e.SalesDate).HasColumnName("Sales_date");
            entity.Property(e => e.SalesInvoiceNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesMan)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Sales_Man");
            entity.Property(e => e.SalesType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Sales_Type");
            entity.Property(e => e.SinKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SIN_KEY");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubsegmentId).HasColumnName("Subsegment_id");
            entity.Property(e => e.TotalBill).HasColumnName("Total_bill");
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWSalesInvoiceReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SalesInvoice_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BpEmail)
                .HasMaxLength(50)
                .HasColumnName("BP_Email");
            entity.Property(e => e.BpFax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BP_Fax");
            entity.Property(e => e.BpTel)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BP_Tel");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CashReceived).HasColumnName("Cash_received");
            entity.Property(e => e.CastReturn).HasColumnName("Cast_return");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Discount).HasColumnName("DISCOUNT");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.RegisteredOfficeAdress)
                .IsUnicode(false)
                .HasColumnName("Registered_Office_Adress");
            entity.Property(e => e.SalesDate).HasColumnName("Sales_date");
            entity.Property(e => e.SalesInvoiceNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubsegmentId).HasColumnName("Subsegment_id");
            entity.Property(e => e.TotalBill).HasColumnName("Total_bill");
            entity.Property(e => e.TotalValue).HasColumnName("Total_value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWSalesMonthly>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SalesMonthly");

            entity.Property(e => e.SAvgValue).HasColumnName("s_AvgValue");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(50)
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SCount)
                .HasMaxLength(50)
                .HasColumnName("s_count");
            entity.Property(e => e.SDate).HasColumnName("s_date");
            entity.Property(e => e.SDesc).HasColumnName("s_desc");
            entity.Property(e => e.SInvno)
                .HasMaxLength(50)
                .HasColumnName("s_invno");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SNo1).HasColumnName("s_no1");
            entity.Property(e => e.SOrderDate).HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(50)
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SSaleRate).HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SSalesTaxValue).HasColumnName("s_SalesTaxValue");
            entity.Property(e => e.SStper)
                .HasMaxLength(50)
                .HasColumnName("s_stper");
            entity.Property(e => e.SUnit)
                .HasMaxLength(50)
                .HasColumnName("s_Unit");
        });

        modelBuilder.Entity<VWSalesOrderReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SalesOrderReport");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.Bpemail)
                .HasMaxLength(50)
                .HasColumnName("BPEmail");
            entity.Property(e => e.Bpfax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPFAX");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .HasColumnName("Contact_Person");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DeliveryAddress).HasColumnName("Delivery_Address");
            entity.Property(e => e.Department).HasMaxLength(50);
            entity.Property(e => e.Designation).HasMaxLength(50);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Freight).HasMaxLength(50);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.Lc).HasColumnName("LC");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.ModeOfShipment)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Mode_ofShipment");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.PaymentAfterDelivery).HasColumnName("Payment_after_delivery");
            entity.Property(e => e.PaymentInAdvance).HasColumnName("Payment_in_Advance");
            entity.Property(e => e.Per).HasMaxLength(50);
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.QuotNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Quot_No");
            entity.Property(e => e.SaleDate).HasColumnName("Sale_Date");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.SaleTax1).HasColumnName("Sale_Tax");
            entity.Property(e => e.SaleType).HasMaxLength(50);
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SendingInvoiceTo).HasColumnName("Sending_InvoiceTo");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Tel1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_1");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWSireturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SIReturn_Detail");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.Discount).HasColumnName("DISCOUNT");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalValue).HasColumnName("Total_value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWSireturnMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_SIReturn_Main");

            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.SireturnDate).HasColumnName("SIReturn_date");
            entity.Property(e => e.SireturnNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SIReturnNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SrnoSi)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SrnoSI");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubsegmentId).HasColumnName("Subsegment_id");
            entity.Property(e => e.TotalBill).HasColumnName("Total_bill");
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VWTestCostCenter>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vW_TestCostCenter");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Ecrno).HasColumnName("ECRno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubsegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year).HasMaxLength(9);
        });

        modelBuilder.Entity<VWretailSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vWRetailSale");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_No");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VehicleRegistration>(entity =>
        {
            entity.HasKey(e => new { e.SrNo, e.CompId });

            entity.ToTable("Vehicle_Registration");

            entity.Property(e => e.SrNo).HasColumnName("Sr_No");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.AllowedFuel).HasColumnName("Allowed_Fuel");
            entity.Property(e => e.AreaDepartmentOfAllocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Area_Department_of_Allocation");
            entity.Property(e => e.AssigningDate).HasColumnName("Assigning_Date");
            entity.Property(e => e.ChassissNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Chassiss_No");
            entity.Property(e => e.ClassOfVehicle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Class_ofVehicle");
            entity.Property(e => e.Color)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FilterChange).HasColumnName("Filter_Change");
            entity.Property(e => e.FuelConsumption)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Fuel_Consumption");
            entity.Property(e => e.FuelUsed)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Fuel_Used");
            entity.Property(e => e.GreaseOil).HasColumnName("Grease_oil");
            entity.Property(e => e.HireDateEnd).HasColumnName("Hire_Date_End");
            entity.Property(e => e.HireDateStart).HasColumnName("Hire_Date_Start");
            entity.Property(e => e.HireFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Hire_From");
            entity.Property(e => e.HiredDate).HasColumnName("Hired_Date");
            entity.Property(e => e.HorsePower)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Horse_Power");
            entity.Property(e => e.Insurance)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.LeasedDate).HasColumnName("Leased_Date");
            entity.Property(e => e.LeasedDateEnd).HasColumnName("Leased_Date_end");
            entity.Property(e => e.LeasedDateStart).HasColumnName("Leased_Date_start");
            entity.Property(e => e.LeasedFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Leased_From");
            entity.Property(e => e.Make)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MaximumLoad).HasColumnName("Maximum_Load");
            entity.Property(e => e.MeterReadingAtAssignment).HasColumnName("Meter_Reading_At_Assignment");
            entity.Property(e => e.NatureOfUse)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Nature_of_Use");
            entity.Property(e => e.OilChange).HasColumnName("Oil_Change");
            entity.Property(e => e.PaymentOfToken)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Payment_ofToken");
            entity.Property(e => e.PurchasedDate).HasColumnName("Purchased_Date");
            entity.Property(e => e.PurchasedFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Purchased_From");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Registration_No");
            entity.Property(e => e.RemarksCo)
                .IsUnicode(false)
                .HasColumnName("Remarks_CO");
            entity.Property(e => e.RemarksHire)
                .IsUnicode(false)
                .HasColumnName("Remarks_Hire");
            entity.Property(e => e.RemarksLeased)
                .IsUnicode(false)
                .HasColumnName("Remarks_Leased");
            entity.Property(e => e.RepairAndMaintenance)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Repair_And_Maintenance");
            entity.Property(e => e.ResponsiblePerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Responsible_Person");
            entity.Property(e => e.SUser).HasColumnName("sUser");
            entity.Property(e => e.ServiceOrTuning).HasColumnName("Service_or_Tuning");
            entity.Property(e => e.SittingCapacityWithDriver)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Sitting_capacity_with_Driver");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TokenAmount).HasColumnName("Token_Amount");
            entity.Property(e => e.TollTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Toll_Tax");
            entity.Property(e => e.TotalFuelTankCapacity).HasColumnName("Total_Fuel_Tank_Capacity");
            entity.Property(e => e.TypeOfBody)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Type_of_Body");
            entity.Property(e => e.TypeOfOwnership)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Type_ofOwnership");
            entity.Property(e => e.TypeOfVehicle)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Type_ofVehicle");
            entity.Property(e => e.ValidityDate).HasColumnName("Validity_Date");
            entity.Property(e => e.VehicleCost).HasColumnName("Vehicle_Cost");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.YearOfManufacturing)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Year_of_Manufacturing");
        });

        modelBuilder.Entity<VendorCommission>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId });

            entity.ToTable("VendorCommission");

            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");

            entity.HasOne(d => d.BusinessPartnersMain).WithMany(p => p.VendorCommissions)
                .HasForeignKey(d => new { d.Bpcode, d.CompId })
                .HasConstraintName("FK_VendorCommission_Business_Partners_Main");
        });

        modelBuilder.Entity<VendorCommissionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VendorCommissionDetail");

            entity.Property(e => e.AreaSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");

            entity.HasOne(d => d.VendorCommission).WithMany()
                .HasForeignKey(d => new { d.SerialNo, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_VendorCommissionDetail_VendorCommission");
        });

        modelBuilder.Entity<VendorItemsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VendorItems_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.SNo).HasColumnName("S_No");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_No");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VendorItemsMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VendorItems_Main");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_No");
        });

        modelBuilder.Entity<VersionProduct>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VersionProduct");

            entity.Property(e => e.OneSignalId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OneSignalID");
            entity.Property(e => e.OneSignalIdfinance)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OneSignalIDFinance");
            entity.Property(e => e.VersionProduct1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Version_Product");
        });

        modelBuilder.Entity<Visitor>(entity =>
        {
            entity.HasKey(e => new { e.SerialNo, e.CompId }).HasName("PK_Visitor_1");

            entity.ToTable("Visitor");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Poc).HasColumnName("POC");
            entity.Property(e => e.Purpose)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RefferedById)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RefferedByID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TimeIn).HasColumnType("datetime");
            entity.Property(e => e.TimeOut).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Types)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VisitorName)
                .HasMaxLength(100)
                .IsUnicode(false);

            entity.HasOne(d => d.Suser).WithMany(p => p.Visitors)
                .HasForeignKey(d => d.SuserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Visitor_Users");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.Visitors)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Visitor_SubSegment");
        });

        modelBuilder.Entity<VoucherType>(entity =>
        {
            entity.HasKey(e => e.VoucherType1);

            entity.ToTable("VoucherType");

            entity.Property(e => e.VoucherType1)
                .HasMaxLength(50)
                .HasColumnName("Voucher_type");
            entity.Property(e => e.Catagory).HasMaxLength(10);
            entity.Property(e => e.CodeType)
                .HasMaxLength(50)
                .HasColumnName("Code_type");
            entity.Property(e => e.GlCode).HasColumnName("GL_code");
            entity.Property(e => e.VId).HasColumnName("V_ID");
        });

        modelBuilder.Entity<VuDo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vuDo");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.SAccountskey)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_accountskey");
            entity.Property(e => e.SAvgRate).HasColumnName("s_AvgRate");
            entity.Property(e => e.SAvgValue).HasColumnName("s_AvgValue");
            entity.Property(e => e.SBilty)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Bilty");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SCount)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_count");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SDriver)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_driver");
            entity.Property(e => e.SIncValue).HasColumnName("s_IncValue");
            entity.Property(e => e.SInvdate)
                .HasColumnType("datetime")
                .HasColumnName("s_invdate");
            entity.Property(e => e.SInvno).HasColumnName("s_invno");
            entity.Property(e => e.SMainKey)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_MainKey");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(50)
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SOwgpDate)
                .HasColumnType("datetime")
                .HasColumnName("s_OwgpDate");
            entity.Property(e => e.SOwgpNo).HasColumnName("s_OwgpNo");
            entity.Property(e => e.SPipes).HasColumnName("s_Pipes");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SRefDate)
                .HasColumnType("datetime")
                .HasColumnName("s_refDate");
            entity.Property(e => e.SRefNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_refNo");
            entity.Property(e => e.SSaleRate)
                .HasMaxLength(53)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SSalesTaxValue).HasColumnName("s_SalesTaxValue");
            entity.Property(e => e.SSerial).HasColumnName("s_serial");
            entity.Property(e => e.SSfed).HasColumnName("s_SFED");
            entity.Property(e => e.SStper).HasColumnName("s_stper");
            entity.Property(e => e.SSupplier)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Supplier");
            entity.Property(e => e.SType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_type");
            entity.Property(e => e.SUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Unit");
            entity.Property(e => e.SVehicle)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_vehicle");
            entity.Property(e => e.SYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_year");
        });

        modelBuilder.Entity<VuDoReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vuDoReport");

            entity.Property(e => e.Buyer)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Item)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.SAvgRate).HasColumnName("s_AvgRate");
            entity.Property(e => e.SAvgValue).HasColumnName("s_AvgValue");
            entity.Property(e => e.SBilty)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Bilty");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SCount)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_count");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SDriver)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_driver");
            entity.Property(e => e.SIncValue).HasColumnName("s_IncValue");
            entity.Property(e => e.SInvdate)
                .HasColumnType("datetime")
                .HasColumnName("s_invdate");
            entity.Property(e => e.SInvno).HasColumnName("s_invno");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(50)
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SPipes).HasColumnName("s_Pipes");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SRefDate)
                .HasColumnType("datetime")
                .HasColumnName("s_refDate");
            entity.Property(e => e.SRefNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_refNo");
            entity.Property(e => e.SSaleRate)
                .HasMaxLength(53)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SSalesTaxValue).HasColumnName("s_SalesTaxValue");
            entity.Property(e => e.SSerial).HasColumnName("s_serial");
            entity.Property(e => e.SSfed).HasColumnName("s_SFED");
            entity.Property(e => e.SStper).HasColumnName("s_stper");
            entity.Property(e => e.SUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Unit");
            entity.Property(e => e.SVehicle)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_vehicle");
            entity.Property(e => e.SYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_year");
        });

        modelBuilder.Entity<VwAccumulatedBalance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAccumulatedBalance");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
        });

        modelBuilder.Entity<VwAcknowledgementReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAcknowledgementReceipt");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RefNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAcknowledgementReceiptDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAcknowledgementReceiptDelivery");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Courier)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredFrom)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwActivityAnalyser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwActivityAnalyser");

            entity.Property(e => e.BookingType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.DropComment).HasMaxLength(500);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Occupation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SourceOfReference)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.WhatsAppNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwActivityAnalysis>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwActivityAnalysis");

            entity.Property(e => e.Sms).HasColumnName("SMS");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwActivityAnalysisNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwActivityAnalysisNew");

            entity.Property(e => e.LeaderUserId).HasColumnName("LeaderUserID");
            entity.Property(e => e.UserId).HasColumnName("User_id");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAddUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAddUser");

            entity.Property(e => e.AcceptingStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DeviceID");
            entity.Property(e => e.EmployeeId).HasColumnName("Employee_id");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PasswordTwo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("passwordTwo");
            entity.Property(e => e.PlayerId).IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderNames)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.TeamMasterNames)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("User_id");
            entity.Property(e => e.UserLogin)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_login");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
            entity.Property(e => e.UserPassword).HasColumnName("User_password");
        });

        modelBuilder.Entity<VwAddUser1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAddUsers");

            entity.Property(e => e.AcceptingStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.DepttCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Deptt_Code");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DeviceID");
            entity.Property(e => e.FinanceDeviceId)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("FinanceDeviceID");
            entity.Property(e => e.JobPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Job_position");
            entity.Property(e => e.MasterdataName)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.PasswordTwo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("passwordTwo");
            entity.Property(e => e.RegionId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("RegionID");
            entity.Property(e => e.RegionName)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.SeniorId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("SeniorID");
            entity.Property(e => e.SeniorName)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("User_id");
            entity.Property(e => e.UserLogin)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_login");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
            entity.Property(e => e.UserRole)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ZoneId)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("ZoneID");
            entity.Property(e => e.ZoneName)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAging>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAging");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwAlertUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwALert_Users");

            entity.Property(e => e.Fax).HasColumnName("FAX");
            entity.Property(e => e.Sms).HasColumnName("SMS");
            entity.Property(e => e.Srno).HasColumnName("srno");
            entity.Property(e => e.UserId).HasColumnName("User_id");
            entity.Property(e => e.UserName).HasColumnName("User_name");
        });

        modelBuilder.Entity<VwAllYearItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAllYearItem");

            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
        });

        modelBuilder.Entity<VwAllotmentLetter>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAllotmentLetter");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RefNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAllotmentLetterDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAllotmentLetterDelivery");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Courier)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredFrom)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAssetAdditionModification>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetAdditionModification");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAssetAdditionModificationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetAdditionModificationDetails");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Branch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NewLocation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Vendor)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAssetDisposal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetDisposal");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAssetDisposalDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetDisposalDetail");

            entity.Property(e => e.AssetDescription)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AssetId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Type)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAssetHandingOver>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetHandingOver");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAssetHandingOverDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetHandingOverDetail");

            entity.Property(e => e.Aamdkeys)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AAMDKeys");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Branch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NewLocation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
            entity.Property(e => e.Vendor)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAssetPartialPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetPartialPayment");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwAssetPartialPaymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetPartialPaymentDetails");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Vendor)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwAssetReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetReport");

            entity.Property(e => e.Aamd).HasColumnName("AAMD");
            entity.Property(e => e.AssetId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AssetID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Type)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
        });

        modelBuilder.Entity<VwAssetTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetTransfer");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentToName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwAssetTransferDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetTransferDetail");

            entity.Property(e => e.Aamdkeys)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AAMDKeys");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Branch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Type)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
            entity.Property(e => e.Vendor)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAssetType>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwAssetType");

            entity.Property(e => e.AccumulatedDepreciationId)
                .HasMaxLength(50)
                .HasColumnName("AccumulatedDepreciationID");
            entity.Property(e => e.AssetId)
                .HasMaxLength(50)
                .HasColumnName("AssetID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepreciationExpenseId)
                .HasMaxLength(50)
                .HasColumnName("DepreciationExpenseID");
            entity.Property(e => e.OtherIncomeId)
                .HasMaxLength(50)
                .HasColumnName("OtherIncomeID");
            entity.Property(e => e.Type)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwAtcCharge>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ATC_Charges");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Party_type");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwAtcCylinderReconciliation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwATC_CylinderReconciliation");

            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("capacity");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cylinder_no");
            entity.Property(e => e.Gasfilledin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gasfilledin");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ownership");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwAtcCylinderReconciliationNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwATC_CylinderReconciliation_New");

            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Product)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwB>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBS");

            entity.Property(e => e.GlBlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_blcode");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
        });

        modelBuilder.Entity<VwBankClearing>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankClearing");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Account No");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial No");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment Name");
        });

        modelBuilder.Entity<VwBankClearing1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankClearings");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBankClearingCheque>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankClearing_Cheque");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.ChequeSlipno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_slipno");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Remarks)
                .IsUnicode(false)
                .HasColumnName("remarks");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
        });

        modelBuilder.Entity<VwBankClearingDetail1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankClearingDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Narration)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vKEY");
            entity.Property(e => e.Vno).HasColumnName("VNo");
        });

        modelBuilder.Entity<VwBankClearingMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_BankClearing_Main");

            entity.Property(e => e.AcNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ac_no");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.BankCharges).HasColumnName("bank_charges");
            entity.Property(e => e.BankId).HasColumnName("Bank_ID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Branch_Code");
            entity.Property(e => e.BranchName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Branch_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIds)
                .HasMaxLength(54)
                .IsUnicode(false)
                .HasColumnName("SubSegment_IDS");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Wht).HasColumnName("wht");
        });

        modelBuilder.Entity<VwBankClearingMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankClearingMasterDetail");

            entity.Property(e => e.AcNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BranchName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeSlipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cleared).HasColumnName("cleared");
            entity.Property(e => e.Credit).HasColumnName("credit");
            entity.Property(e => e.Debit).HasColumnName("debit");
            entity.Property(e => e.Dishonoured).HasColumnName("dishonoured");
            entity.Property(e => e.Fyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("glCode");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedUserId).HasColumnName("ModifiedUserID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("narration");
            entity.Property(e => e.RecoveryAgent)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SaveCreationDate).HasColumnType("datetime");
            entity.Property(e => e.SaveUserName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SaveWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Vno).HasColumnName("vno");
            entity.Property(e => e.VoucherSno).HasColumnName("VoucherSNo");
            entity.Property(e => e.Vtype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vtype");
            entity.Property(e => e.Wht).HasColumnName("wht");
        });

        modelBuilder.Entity<VwBankDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBank_Detail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .HasColumnName("Account_No");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ModifiedDate).HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUser).HasColumnName("Modified_User");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate).HasColumnName("vEnterDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
        });

        modelBuilder.Entity<VwBankGeneralLedger>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Bank_GeneralLedger");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Account_Number");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.Coaob).HasColumnName("COAOB");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ObbankVdetail).HasColumnName("OBBank_Vdetail");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwBankMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_BankMainDetail");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Account_Number");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.BankId).HasColumnName("Bank_ID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
        });

        modelBuilder.Entity<VwBankMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankMasterDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .HasColumnName("Account_No");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwBankName>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankName");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Account_Number");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.BankId).HasColumnName("Bank_ID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
        });

        modelBuilder.Entity<VwBankPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankPosition");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .HasColumnName("Account_No");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.BankId).HasColumnName("Bank_ID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SegmentName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Segment_name");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(28)
                .IsUnicode(false);
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
        });

        modelBuilder.Entity<VwBankRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankRegistration");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Account Number");
            entity.Property(e => e.AccountOpeningDate).HasColumnName("Account Opening Date");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account Title");
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.BankChargers)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Bank Chargers");
            entity.Property(e => e.BankCharges)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Bank Charges");
            entity.Property(e => e.BankChargesName).HasColumnName("Bank Charges Name");
            entity.Property(e => e.BankClearing)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Bank Clearing");
            entity.Property(e => e.BankClearingName).HasColumnName("Bank Clearing Name");
            entity.Property(e => e.BankId).HasColumnName("Bank_ID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Branch Code");
            entity.Property(e => e.BranchName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Branch Name");
            entity.Property(e => e.CashAtBank)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Cash at Bank");
            entity.Property(e => e.CashAtBankName).HasColumnName("Cash at Bank Name");
            entity.Property(e => e.CellNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Cell No");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Contact Person");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RegisterAddress)
                .IsUnicode(false)
                .HasColumnName("Register_address");
            entity.Property(e => e.SNo).HasColumnName("S no");
            entity.Property(e => e.SubSegmentId).HasColumnName("Sub Segment ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.Telephone)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.Wht)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("WHT");
            entity.Property(e => e.WhtName).HasColumnName("WHT Name");
        });

        modelBuilder.Entity<VwBankclearingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBankclearing_Details");

            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.ChequeSlipdate).HasColumnName("cheque_slipdate");
            entity.Property(e => e.ChequeSlipno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_slipno");
            entity.Property(e => e.Cleared).HasColumnName("cleared");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Credit).HasColumnName("credit");
            entity.Property(e => e.Debit).HasColumnName("debit");
            entity.Property(e => e.Dishonoured).HasColumnName("dishonoured");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("narration");
            entity.Property(e => e.RecoveryAgent)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Vkey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vkey");
            entity.Property(e => e.Vno).HasColumnName("vno");
            entity.Property(e => e.VoucherSno).HasColumnName("Voucher_Sno");
            entity.Property(e => e.Vtype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vtype");
        });

        modelBuilder.Entity<VwBelowReOrderItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_BelowReOrderItems");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.ReOrder).HasColumnName("Re_Order");
            entity.Property(e => e.RemainingQty).HasColumnName("Remaining_Qty");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwBl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBL");

            entity.Property(e => e.GlBlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_blcode");
        });

        modelBuilder.Entity<VwBlupto>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBLUPTO");

            entity.Property(e => e.GlBlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_blcode");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
        });

        modelBuilder.Entity<VwBomCompressor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBOM_Compressor");

            entity.Property(e => e.CUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("C_UOM");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CompressorConversionCost).HasColumnName("Compressor_ConversionCost");
            entity.Property(e => e.CompressorGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CompressorGroup_Code");
            entity.Property(e => e.CompressorItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CompressorItem_Code");
            entity.Property(e => e.CompressorQty).HasColumnName("Compressor_Qty");
            entity.Property(e => e.CompressorUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Compressor_UOM");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Itemname1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Itemname");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwBomLiquid>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBOM_liquid");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Itemname1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Itemname");
            entity.Property(e => e.LUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("L_UOM");
            entity.Property(e => e.LiquidConversionCost).HasColumnName("Liquid_ConversionCost");
            entity.Property(e => e.LiquidGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LiquidGroup_Code");
            entity.Property(e => e.LiquidItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LiquidItem_Code");
            entity.Property(e => e.LiquidQty).HasColumnName("Liquid_Qty");
            entity.Property(e => e.LiquidUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Liquid_UOM");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwBomtm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_BOMTM");

            entity.Property(e => e.CUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("C_UOM");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CompressorConversionCost).HasColumnName("Compressor_ConversionCost");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Itemname1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Itemname");
            entity.Property(e => e.LiquidGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LiquidGroup_Code");
            entity.Property(e => e.LiquidItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LiquidItem_Code");
            entity.Property(e => e.LiquidQty).HasColumnName("Liquid_Qty");
            entity.Property(e => e.LiquidUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Liquid_UOM");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwBookingByStaff>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingByStaff");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.Area)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingCategory)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingFormDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceipts)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.Commission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Confirmation)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Customer)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CustomerBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerNames)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Dealer)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileDeliveryConfirmationRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileReceiving)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentReceipt)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentReceiptDelivery)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentReceiptDeliveryRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Instrument)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ManagementRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MembershipNoS)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModeOfPayment)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Office)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptClearingStatus)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptClearingUserId).HasColumnName("ReceiptClearingUserID");
            entity.Property(e => e.ReceiptType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptsDeliveryRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReferringType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SegmentId).HasColumnName("SegmentID");
            entity.Property(e => e.SocietyInstallment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SocietyInstallmentPayment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Submit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VendorName)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBookingConfirmationLetter>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingConfirmationLetter");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBookingForm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingForm");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.Area)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingCategory)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingFormDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceipts)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ChequeInHandSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.Commission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CommissionType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Confirmation)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationPayment)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Customer)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CustomerBankId).HasColumnName("CustomerBankID");
            entity.Property(e => e.CustomerBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerNames)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CustomerReceiptClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerReceiptSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Dealer)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Dpbpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("DPBPName");
            entity.Property(e => e.DpdfileNo).HasColumnName("DPDFileNo");
            entity.Property(e => e.DpserialNo).HasColumnName("DPSerialNo");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileData).IsUnicode(false);
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileReceiving)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentReceipt)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentReceiptDelivery)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Instrument)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ManagementRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Msno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MSNo");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PartyPaymentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.QuotaParty)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.QuotaPartyName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptClearingStatus)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptClearingUserId).HasColumnName("ReceiptClearingUserID");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReferringType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SegmentId).HasColumnName("SegmentID");
            entity.Property(e => e.SocietyInstallment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SocietyInstallmentPayment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Submit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VendorName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.WebLink).HasMaxLength(50);
        });

        modelBuilder.Entity<VwBookingFormConfirmationPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingFormConfirmationPayment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwBookingFormDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingFormDelivery");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeliveredBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwBookingFormDeliveryDebit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingFormDeliveryDebit");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBookingFormDeliveryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingFormDeliveryDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountNumber)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BankName1)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.BookingAgainst)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QuotaStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwBookingFormIssue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingFormIssue");

            entity.Property(e => e.AllocatedTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Issue)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.IssueStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwBookingFormReceiving>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingFormReceiving");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentFromName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentToName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBookingFormReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingFormReport");

            entity.Property(e => e.Area)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaDetailSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BlockSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingCategory)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingCategorySerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingFormDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceipts)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingTypeSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeStatus)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyStatus)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Confirmation)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationPayment)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileReceiving)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyDetail).HasMaxLength(100);
            entity.Property(e => e.PropertyDetailSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwBookingFormTracking>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingFormTracking");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AcknwReceiptDate).HasColumnName("Acknw. Receipt Date");
            entity.Property(e => e.AcknwReceiptDeliveryDate).HasColumnName("Acknw. Receipt Delivery date");
            entity.Property(e => e.AcknwReceiptDeliveryRemarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Acknw. Receipt Delivery Remarks");
            entity.Property(e => e.AcknwReceiptReceivedDate).HasColumnName("Acknw. Receipt Received Date");
            entity.Property(e => e.AcknwReceiptStatus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Acknw. Receipt Status");
            entity.Property(e => e.AllocReceiptDate).HasColumnName("Alloc. Receipt Date");
            entity.Property(e => e.AllocReceiptDeliveryDate).HasColumnName("Alloc. Receipt Delivery date");
            entity.Property(e => e.AllocReceiptDeliveryRemarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Alloc. Receipt Delivery Remarks");
            entity.Property(e => e.AllocReceiptReceivedDate).HasColumnName("Alloc. Receipt Received Date");
            entity.Property(e => e.AllocReceiptStatus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Alloc. Receipt Status");
            entity.Property(e => e.AllotLetterDate).HasColumnName("Allot. Letter Date");
            entity.Property(e => e.AllotLetterDeliveryDate).HasColumnName("Allot. Letter Delivery date");
            entity.Property(e => e.AllotLetterDeliveryRemarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Allot. Letter Delivery Remarks");
            entity.Property(e => e.AllotLetterReceivedDate).HasColumnName("Allot. Letter Received Date");
            entity.Property(e => e.AllotLetterStatus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Allot. Letter Status");
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.Area)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingCategory)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingFormDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceipts)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.Commission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ConfReceiptNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Conf. Receipt No.");
            entity.Property(e => e.Confirmation)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Customer)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CustomerBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerNames)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Dealer)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DpserialNo).HasColumnName("DPSerialNo");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileDeliveryConfirmationRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileReceiving)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileReceivingFileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstReceiptNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Inst. Receipt No.");
            entity.Property(e => e.InstallmentReceipt)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentReceiptDelivery)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentReceiptDeliveryRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Instrument)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ManagementRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MembershipNoS)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModeOfPayment)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Msno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MSNo");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptClearingStatus)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptClearingUserId).HasColumnName("ReceiptClearingUserID");
            entity.Property(e => e.ReceiptType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptsDeliveryRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReferringType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SegmentId).HasColumnName("SegmentID");
            entity.Property(e => e.SocietyInstallment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SocietyInstallmentPayment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Submit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VendorName)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBookingOperation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingOperations");

            entity.Property(e => e.AcknwReceiptDate).HasColumnName("Acknw. Receipt Date");
            entity.Property(e => e.AcknwReceiptDeliveryDate).HasColumnName("Acknw. Receipt Delivery date");
            entity.Property(e => e.AcknwReceiptDeliveryRemarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Acknw. Receipt Delivery Remarks");
            entity.Property(e => e.AcknwReceiptReceivedDate).HasColumnName("Acknw. Receipt Received Date");
            entity.Property(e => e.AcknwReceiptStatus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Acknw. Receipt Status");
            entity.Property(e => e.AllocReceiptDate).HasColumnName("Alloc. Receipt Date");
            entity.Property(e => e.AllocReceiptDeliveryDate).HasColumnName("Alloc. Receipt Delivery date");
            entity.Property(e => e.AllocReceiptDeliveryRemarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Alloc. Receipt Delivery Remarks");
            entity.Property(e => e.AllocReceiptReceivedDate).HasColumnName("Alloc. Receipt Received Date");
            entity.Property(e => e.AllocReceiptStatus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Alloc. Receipt Status");
            entity.Property(e => e.AllotLetterDate).HasColumnName("Allot. Letter Date");
            entity.Property(e => e.AllotLetterDeliveryDate).HasColumnName("Allot. Letter Delivery date");
            entity.Property(e => e.AllotLetterDeliveryRemarks)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Allot. Letter Delivery Remarks");
            entity.Property(e => e.AllotLetterReceivedDate).HasColumnName("Allot. Letter Received Date");
            entity.Property(e => e.AllotLetterStatus)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Allot. Letter Status");
            entity.Property(e => e.BookingFormCompId).HasColumnName("BookingFormCompID");
        });

        modelBuilder.Entity<VwBookingReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingReceipts");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentFromName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentToName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBookingformCredit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBookingformCredit");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBpGeneralLedger>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_BP_GeneralLedger");

            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.Coaob).HasColumnName("COAOB");
            entity.Property(e => e.CreditLimitAmount).HasColumnName("Credit_limit_Amount");
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.ObpartyVoucherDetail).HasColumnName("OBParty_Voucher_Detail");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwBpRoute>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBP_Routes");

            entity.Property(e => e.Addresses).HasColumnType("text");
            entity.Property(e => e.BPCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("B.P Code");
            entity.Property(e => e.BPName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("B.P Name");
            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Route ID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Route Name");
        });

        modelBuilder.Entity<VwBpVendorsTemprory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBP_Vendors_Temprory");

            entity.Property(e => e.Address)
                .HasColumnType("text")
                .HasColumnName("address");
            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CellNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Cell No");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("city");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Contact Person");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .HasColumnName("country");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .HasColumnName("designation");
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Party_type");
            entity.Property(e => e.Province)
                .HasMaxLength(50)
                .HasColumnName("province");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Route ID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Route Name");
            entity.Property(e => e.SNo).HasColumnName("S No");
        });

        modelBuilder.Entity<VwBpcodeProject>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBPCodeProject");

            entity.Property(e => e.Bpcodes)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCodes");
            entity.Property(e => e.ProjectIds).HasColumnName("ProjectIDs");
        });

        modelBuilder.Entity<VwBs2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBS2");

            entity.Property(e => e.GlBlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_blcode");
        });

        modelBuilder.Entity<VwBs3>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBS3");

            entity.Property(e => e.Amtcr).HasColumnName("AMTCR");
            entity.Property(e => e.Amtdr).HasColumnName("AMTDR");
            entity.Property(e => e.GlBlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_blcode");
            entity.Property(e => e.OpAmtcr).HasColumnName("OpAMTCR");
            entity.Property(e => e.OpAmtdr).HasColumnName("OpAMTDR");
        });

        modelBuilder.Entity<VwBsNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBS_Notes");

            entity.Property(e => e.Blcode)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("blcode");
            entity.Property(e => e.Blnote).HasColumnName("blnote");
            entity.Property(e => e.Bltitle)
                .HasMaxLength(50)
                .HasColumnName("bltitle");
        });

        modelBuilder.Entity<VwBscomplete>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBSComplete");

            entity.Property(e => e.Lbox)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LBox");
            entity.Property(e => e.Lcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LCode");
            entity.Property(e => e.LdoubleLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LDoubleLine");
            entity.Property(e => e.LdownLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LDownLine");
            entity.Property(e => e.LeftStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Lfigur)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LFigur");
            entity.Property(e => e.LfigurBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LFigurBold");
            entity.Property(e => e.Lhead)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("lhead");
            entity.Property(e => e.LheadingBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LHeadingBold");
            entity.Property(e => e.LlineNo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("LLineNo");
            entity.Property(e => e.LnetDrCr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LNetDrCr");
            entity.Property(e => e.Lnetamount).HasColumnName("lnetamount");
            entity.Property(e => e.Lnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lnote");
            entity.Property(e => e.Lopnetamount).HasColumnName("lopnetamount");
            entity.Property(e => e.LupperLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LUpperLine");
            entity.Property(e => e.Rbox)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RBox");
            entity.Property(e => e.Rcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RCode");
            entity.Property(e => e.RdoubleLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RDoubleLine");
            entity.Property(e => e.RdownLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RDownLine");
            entity.Property(e => e.Rfigur)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RFigur");
            entity.Property(e => e.RfigurBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RFigurBold");
            entity.Property(e => e.Rhead)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("rhead");
            entity.Property(e => e.RheadingBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RHeadingBold");
            entity.Property(e => e.RightStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RlineNo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("RLineNo");
            entity.Property(e => e.RnetDrCr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RNetDrCr");
            entity.Property(e => e.Rnetamount).HasColumnName("rnetamount");
            entity.Property(e => e.Rnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rnote");
            entity.Property(e => e.Ropnetamount).HasColumnName("ropnetamount");
            entity.Property(e => e.RupperLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RUpperLine");
        });

        modelBuilder.Entity<VwBsleft>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBSLeft");

            entity.Property(e => e.Lbox)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LBox");
            entity.Property(e => e.Lcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LCode");
            entity.Property(e => e.LdoubleLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LDoubleLine");
            entity.Property(e => e.LdownLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LDownLine");
            entity.Property(e => e.LeftStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Lfigur)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LFigur");
            entity.Property(e => e.LfigurBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LFigurBold");
            entity.Property(e => e.Lhead)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("lhead");
            entity.Property(e => e.LheadingBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LHeadingBold");
            entity.Property(e => e.LlineNo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("LLineNo");
            entity.Property(e => e.LnetDrCr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LNetDrCr");
            entity.Property(e => e.Lnetamount).HasColumnName("lnetamount");
            entity.Property(e => e.Lnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("lnote");
            entity.Property(e => e.Lopnetamount).HasColumnName("lopnetamount");
            entity.Property(e => e.LupperLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LUpperLine");
        });

        modelBuilder.Entity<VwBsnet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBSNet");

            entity.Property(e => e.GlBlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GL_BLCODE");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("GL_CODE");
        });

        modelBuilder.Entity<VwBsnote1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBSNotes");

            entity.Property(e => e.GlBlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_blcode");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
        });

        modelBuilder.Entity<VwBsnotes2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBSNotes2");

            entity.Property(e => e.GlBlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_blcode");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
        });

        modelBuilder.Entity<VwBsnotesComplete>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBSNotesComplete");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.Heading)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Netamount).HasColumnName("netamount");
            entity.Property(e => e.Note)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBsnotesCompleteNote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBSNotesCompleteNotes");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.Heading)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Netamount).HasColumnName("netamount");
            entity.Property(e => e.Note)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBsright>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBSRight");

            entity.Property(e => e.Rbox)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RBox");
            entity.Property(e => e.Rcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RCode");
            entity.Property(e => e.RdoubleLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RDoubleLine");
            entity.Property(e => e.RdownLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RDownLine");
            entity.Property(e => e.Rfigur)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RFigur");
            entity.Property(e => e.RfigurBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RFigurBold");
            entity.Property(e => e.Rhead)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("rhead");
            entity.Property(e => e.RheadingBold)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RHeadingBold");
            entity.Property(e => e.RightStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RlineNo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("RLineNo");
            entity.Property(e => e.RnetDrCr)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RNetDrCr");
            entity.Property(e => e.Rnetamount).HasColumnName("rnetamount");
            entity.Property(e => e.Rnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("rnote");
            entity.Property(e => e.Ropnetamount).HasColumnName("ropnetamount");
            entity.Property(e => e.RupperLine)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RUpperLine");
        });

        modelBuilder.Entity<VwBudgetDefinition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBudgetDefinition");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Levels)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwBudgetDefinitionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBudgetDefinitionDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.HeadCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwBusinessPartner>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBusiness_Partner");

            entity.Property(e => e.Apname).HasColumnName("APName");
            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.Bppassword)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPPassword");
            entity.Property(e => e.Bpuserid).HasColumnName("BPUSERID");
            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CashDiscountDays).HasColumnName("Cash_Discount_Days");
            entity.Property(e => e.CashDiscountPercentage).HasColumnName("Cash_Discount_Percentage");
            entity.Property(e => e.Cellno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellno");
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.ControlAccountApaccural)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_APAccural");
            entity.Property(e => e.ControlAccountCash)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Cash");
            entity.Property(e => e.ControlAccountCashDescription).HasColumnName("Control_Account_CashDescription");
            entity.Property(e => e.ControlAccountCashDiscount)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Cash_Discount");
            entity.Property(e => e.ControlAccountCashDiscountDesc).HasColumnName("Control_Account_Cash_Discount_desc");
            entity.Property(e => e.ControlAccountFurtherTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_FurtherTax");
            entity.Property(e => e.ControlAccountFurtherTaxName).HasColumnName("Control_Account_FurtherTaxName");
            entity.Property(e => e.ControlAccountIncomeTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_IncomeTax");
            entity.Property(e => e.ControlAccountIncomeTaxName).HasColumnName("Control_Account_IncomeTaxName");
            entity.Property(e => e.ControlAccountInvoice)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Invoice");
            entity.Property(e => e.ControlAccountInvoiceDesc).HasColumnName("Control_Account_Invoice_desc");
            entity.Property(e => e.ControlAccountOther)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Other");
            entity.Property(e => e.ControlAccountOtherDescription).HasColumnName("Control_Account_OtherDescription");
            entity.Property(e => e.ControlAccountPaymentInAdvance)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Payment_in_Advance");
            entity.Property(e => e.ControlAccountPaymentInAdvanceDesc).HasColumnName("Control_Account_Payment_in_Advance_desc");
            entity.Property(e => e.ControlAccountSalesTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_SalesTax");
            entity.Property(e => e.ControlAccountSalesTaxName).HasColumnName("Control_Account_SalesTaxName");
            entity.Property(e => e.ControlAccountSecurity)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Security");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreditLimitAmount).HasColumnName("Credit_limit_Amount");
            entity.Property(e => e.CreditLimitAmountCondition)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Credit_limit_Amount_Condition");
            entity.Property(e => e.CreditLimitDays).HasColumnName("Credit_limit_Days");
            entity.Property(e => e.CreditLimitDaysCondition)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Credit_limit_Days_Condition");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GeneralOne)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentReceivable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceOpeningBalance).HasColumnName("Invoice_Opening_Balance");
            entity.Property(e => e.Lc).HasColumnName("LC");
            entity.Property(e => e.LegalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Legal_Status");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NTN");
            entity.Property(e => e.OldCustomerCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OwnedorRented)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Party_type");
            entity.Property(e => e.PaymentAfterDelivery).HasColumnName("Payment_after_delivery");
            entity.Property(e => e.PaymentInAdvance).HasColumnName("Payment_in_Advance");
            entity.Property(e => e.Province)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferedBy)
                .HasMaxLength(50)
                .HasColumnName("Refered_by");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegionName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RegisteredOfficeAdress)
                .IsUnicode(false)
                .HasColumnName("Registered_Office_Adress");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.SalesManName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sector)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecurityChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecurityOpeningBalance).HasColumnName("Security_Opening_Balance");
            entity.Property(e => e.Strn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STRN");
            entity.Property(e => e.TaxStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tel1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_1");
            entity.Property(e => e.Tel2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_2");
            entity.Property(e => e.Test1)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test1");
            entity.Property(e => e.Test1Description).HasColumnName("test1Description");
            entity.Property(e => e.Test2)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test2");
            entity.Property(e => e.Test2Description).HasColumnName("test2Description");
            entity.Property(e => e.Test3)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test3");
            entity.Property(e => e.Test3Description).HasColumnName("test3Description");
            entity.Property(e => e.Test4)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test4");
            entity.Property(e => e.Test4Description).HasColumnName("test4Description");
            entity.Property(e => e.TradeDiscount).HasColumnName("Trade_Discount");
            entity.Property(e => e.TradingReceivable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.Website)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Wht150).HasColumnName("WHT_150");
            entity.Property(e => e.WhtFurtherTax).HasColumnName("WHT_Further_tax");
            entity.Property(e => e.WhtSalesTax).HasColumnName("WHT_SalesTax");
        });

        modelBuilder.Entity<VwBusinessPartnersAddress>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBusiness_Partners_Address");

            entity.Property(e => e.Address)
                .HasColumnType("text")
                .HasColumnName("address");
            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CashDiscountDays).HasColumnName("Cash_Discount_Days");
            entity.Property(e => e.CashDiscountPercentage).HasColumnName("Cash_Discount_Percentage");
            entity.Property(e => e.CellNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cell_no");
            entity.Property(e => e.Cellno1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellno");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .HasColumnName("city");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Contact Person");
            entity.Property(e => e.ControlAccountApaccural)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_APAccural");
            entity.Property(e => e.ControlAccountCash)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Cash");
            entity.Property(e => e.ControlAccountCashDiscount)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Cash_Discount");
            entity.Property(e => e.ControlAccountFurtherTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_FurtherTax");
            entity.Property(e => e.ControlAccountIncomeTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_IncomeTax");
            entity.Property(e => e.ControlAccountInvoice)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Invoice");
            entity.Property(e => e.ControlAccountOther)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Other");
            entity.Property(e => e.ControlAccountPaymentInAdvance)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Payment_in_Advance");
            entity.Property(e => e.ControlAccountSalesTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_SalesTax");
            entity.Property(e => e.ControlAccountSecurity)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Control_Account_Security");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .HasColumnName("country");
            entity.Property(e => e.CreditLimitAmount).HasColumnName("Credit_limit_Amount");
            entity.Property(e => e.CreditLimitAmountCondition)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Credit_limit_Amount_Condition");
            entity.Property(e => e.CreditLimitDays).HasColumnName("Credit_limit_Days");
            entity.Property(e => e.CreditLimitDaysCondition)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Credit_limit_Days_Condition");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
            entity.Property(e => e.InvoiceOpeningBalance).HasColumnName("Invoice_Opening_Balance");
            entity.Property(e => e.Lc).HasColumnName("LC");
            entity.Property(e => e.LegalStatus)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Legal_Status");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NTN");
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Party_type");
            entity.Property(e => e.PaymentAfterDelivery).HasColumnName("Payment_after_delivery");
            entity.Property(e => e.PaymentInAdvance).HasColumnName("Payment_in_Advance");
            entity.Property(e => e.Province)
                .HasMaxLength(50)
                .HasColumnName("province");
            entity.Property(e => e.ReferedBy)
                .HasMaxLength(50)
                .HasColumnName("Refered_by");
            entity.Property(e => e.RegionId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RegionID");
            entity.Property(e => e.RegionName).IsUnicode(false);
            entity.Property(e => e.RegisteredOfficeAdress)
                .IsUnicode(false)
                .HasColumnName("Registered_Office_Adress");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.RouteName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.Sector)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecurityChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecurityOpeningBalance).HasColumnName("Security_Opening_Balance");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Strn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STRN");
            entity.Property(e => e.Tel1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_1");
            entity.Property(e => e.Tel2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_2");
            entity.Property(e => e.Test1)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test1");
            entity.Property(e => e.Test2)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test2");
            entity.Property(e => e.Test3)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test3");
            entity.Property(e => e.Test4)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("test4");
            entity.Property(e => e.TradeDiscount).HasColumnName("Trade_Discount");
            entity.Property(e => e.Website)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Wht150).HasColumnName("WHT_150");
            entity.Property(e => e.WhtFurtherTax).HasColumnName("WHT_Further_tax");
            entity.Property(e => e.WhtSalesTax).HasColumnName("WHT_SalesTax");
        });

        modelBuilder.Entity<VwBusinessPartnersSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBusiness_Partners_SubSegment");

            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName).HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwBuyBack>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwBuyBack");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCallLogsLead>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCallLogsLeads");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BookingTypeId).HasColumnName("BookingTypeID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.Customer)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateOnly).HasColumnType("datetime");
            entity.Property(e => e.DropComment)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PncallLogs)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("PNCallLogs");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SizeId).HasColumnName("SizeID");
            entity.Property(e => e.SourceOfReference)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Time).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.WhatsAppNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCallRecording>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCallRecordings");

            entity.Property(e => e.LocalPath)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Time).HasColumnType("datetime");
            entity.Property(e => e.Url)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("URL");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<VwCampaignAllocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCampaignAllocation");

            entity.Property(e => e.CampaignName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FormNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Source)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TeamId).HasColumnName("TeamID");
            entity.Property(e => e.TeamName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCampaignsAnalysis>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCampaignsAnalysis");

            entity.Property(e => e.CampaignName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwCcCodeAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCcCodeAll");

            entity.Property(e => e.CcCode)
                .HasMaxLength(5)
                .HasColumnName("cc_code");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
        });

        modelBuilder.Entity<VwCcconsSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCConsSum");

            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("cc_budget");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwCcwmconsCompprct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCWMConsCompprct");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.Moth).HasColumnName("moth");
            entity.Property(e => e.Mvalue)
                .HasColumnType("money")
                .HasColumnName("mvalue");
            entity.Property(e => e.Pr)
                .HasColumnType("money")
                .HasColumnName("pr");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwCcwmconsCompprct1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCWMConsCompprct1");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_Desc");
            entity.Property(e => e.Moth).HasColumnName("moth");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwCcwmonthConsComp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCWMonthConsComp");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.Moth).HasColumnName("moth");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwCcwmonthConsComp1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCWMonthConsComp1");

            entity.Property(e => e.Main)
                .HasMaxLength(5)
                .HasColumnName("main");
            entity.Property(e => e.Moth).HasColumnName("moth");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwCcwmonthConsComptotal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCWMonthConsComptotal");

            entity.Property(e => e.TotalValue).HasColumnType("money");
        });

        modelBuilder.Entity<VwCcwpendingPi>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCWPendingPI");

            entity.Property(e => e.BalanceQty)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("balanceQty");
            entity.Property(e => e.CcCode)
                .HasMaxLength(5)
                .HasColumnName("CC_CODE");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_ID");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.PiDate)
                .HasColumnType("datetime")
                .HasColumnName("PI_DATE");
            entity.Property(e => e.PiItemno)
                .HasMaxLength(13)
                .IsFixedLength()
                .HasColumnName("pi_itemno");
            entity.Property(e => e.PiNo)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("PI_NO");
            entity.Property(e => e.PiQty)
                .HasColumnType("money")
                .HasColumnName("PI_QTY");
            entity.Property(e => e.PiRate)
                .HasColumnType("money")
                .HasColumnName("PI_RATE");
        });

        modelBuilder.Entity<VwCcwsummery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCWSummery");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("ISSUE");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("ISSUEV");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<VwCcwtwoMonthComp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCCWTwoMonthComp");

            entity.Property(e => e.AvgC).HasColumnType("money");
            entity.Property(e => e.AvgP).HasColumnType("money");
            entity.Property(e => e.CMonthC)
                .HasColumnType("money")
                .HasColumnName("cMonthC");
            entity.Property(e => e.CMonthP)
                .HasColumnType("money")
                .HasColumnName("cMonthP");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.Npmetrial).HasColumnName("NPMetrial");
            entity.Property(e => e.PMonthC)
                .HasColumnType("money")
                .HasColumnName("pMonthC");
            entity.Property(e => e.PMonthP)
                .HasColumnType("money")
                .HasColumnName("pMonthP");
            entity.Property(e => e.ToDateC).HasColumnType("money");
            entity.Property(e => e.ToDateP).HasColumnType("money");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
        });

        modelBuilder.Entity<VwCheckBookSubsegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_CheckBook_Subsegment");

            entity.Property(e => e.ChequeFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_from");
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_to");
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("chequebook_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
        });

        modelBuilder.Entity<VwChequeInHandManagement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwChequeInHandManagement");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankIdentity).HasColumnName("BankIDEntity");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.BankName1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankName");
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.ChequeDate1).HasColumnName("Cheque Date");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Date).HasColumnName("DATE");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SUser).HasColumnName("sUser");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.TrUserid).HasColumnName("tr_userid");
            entity.Property(e => e.TrUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_username");
            entity.Property(e => e.TrWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_workstation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwChequebookRegistrationMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Chequebook_Registration_Main");

            entity.Property(e => e.AcNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ac_no");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("Bank_ID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Branch_Code");
            entity.Property(e => e.BranchName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Branch_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.SaveCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Save_creationDate");
            entity.Property(e => e.SaveUserid).HasColumnName("Save_userid");
            entity.Property(e => e.SaveUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_username");
            entity.Property(e => e.SaveWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Save_workstation");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
        });

        modelBuilder.Entity<VwChequebookRegistrationReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Chequebook_Registration_Report");

            entity.Property(e => e.AcNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ac_no");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.BranchAddress)
                .IsUnicode(false)
                .HasColumnName("Branch Address");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Branch_Code");
            entity.Property(e => e.BranchName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Branch_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.ChequeFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_from");
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_to");
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("chequebook_no");
            entity.Property(e => e.CompAddress).HasColumnName("Comp Address");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.ToDate).HasColumnName("to_date");
            entity.Property(e => e.TotalLeafs).HasColumnName("total_leafs");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
        });

        modelBuilder.Entity<VwChequesClearing>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwChequesClearing");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwChequesClearingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwChequesClearingDetail");

            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequesSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwChequesClearingMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwChequesClearingMainDetail");

            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequesSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VendorName)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCnfrmtionPyment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCnfrmtionPyment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwCnfrmtionPymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCnfrmtionPymentDetail");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ConfirmationPayment)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DealNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwCommissionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCommissionDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwCommissionPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCommissionPayment");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCommissionPaymentBooking>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCommissionPaymentBooking");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwCommissionPaymentOnAccount>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCommissionPaymentOnAccount");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwCommissionReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCommissionReport");

            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NetPayable).HasColumnType("numeric(1, 1)");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VNo).HasColumnName("vNo");
        });

        modelBuilder.Entity<VwCompanySetup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_CompanySetup");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CId).HasColumnName("C_id");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
        });

        modelBuilder.Entity<VwConfirmationPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwConfirmationPayment");

            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.Bank)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BookingFormProjectID");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CashBankOnline)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ConfirmationAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CustomerReceiptClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Dealer)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealerCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerOldCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Instrument)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonOldCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SalesManCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderOldCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwConfirmationReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwConfirmationReceipt");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwConfirmationReceiptsDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwConfirmationReceiptsDelivery");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientRepresentativeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeliveredFromLocation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwContract>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwContract");

            entity.Property(e => e.AllotmentLetterNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Area)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountA)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountB)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankNameA)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankNameB)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.BusinessApprovalBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.ChequeA)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ChequeB)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Circle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Cnicexpiry).HasColumnName("CNICExpiry");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompletePropertyAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContractType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DetailOfVehicles)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Division)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FamilyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gst).HasColumnName("GST");
            entity.Property(e => e.LandlordCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LandlordCNIC");
            entity.Property(e => e.LandlordName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.Members)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Nationality)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NatureOfBusiness)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nocto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOCTo");
            entity.Property(e => e.Occupation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Passport)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PermanentAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PoliceStation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Pra).HasColumnName("PRA");
            entity.Property(e => e.PresentAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Property)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PropertyId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PropertyID");
            entity.Property(e => e.Province)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PurchaserCNIC");
            entity.Property(e => e.PurchaserDob).HasColumnName("PurchaserDOB");
            entity.Property(e => e.PurchaserFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Road)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SellerAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SellerCNIC");
            entity.Property(e => e.SellerDob).HasColumnName("SellerDOB");
            entity.Property(e => e.SellerFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerNationality)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerPassport)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Share)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Strno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STRNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Subjects)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TenantCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TenantCNIC");
            entity.Property(e => e.TenantName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TypeID");
            entity.Property(e => e.Uom)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleRegNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.WorkAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwContractInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwContractInventory");

            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.InventoryName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PurchaserCNIC");
            entity.Property(e => e.PurchaserFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SellerCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SellerCNIC");
            entity.Property(e => e.SellerFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwContractPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwContractPayment");

            entity.Property(e => e.Area)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.BusinessApprovalBy)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Circle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Cnicexpiry).HasColumnName("CNICExpiry");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompletePropertyAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CpadmittedTax).HasColumnName("CPAdmittedTax");
            entity.Property(e => e.Cpgst).HasColumnName("CPGST");
            entity.Property(e => e.CpotherTax).HasColumnName("CPOtherTax");
            entity.Property(e => e.Cppra).HasColumnName("CPPRA");
            entity.Property(e => e.Cpprice).HasColumnName("CPPrice");
            entity.Property(e => e.CpstampDuty).HasColumnName("CPStampDuty");
            entity.Property(e => e.Cptax236C).HasColumnName("CPTax236C");
            entity.Property(e => e.Cptax236K).HasColumnName("CPTax236K");
            entity.Property(e => e.CptransferFee).HasColumnName("CPTransferFee");
            entity.Property(e => e.DetailOfVehicles)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.District)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Division)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FamilyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gst).HasColumnName("GST");
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LandlordCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LandlordCNIC");
            entity.Property(e => e.LandlordName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.Members)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Nationality)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NatureOfBusiness)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Nocto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOCTo");
            entity.Property(e => e.Occupation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OwnerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Passport)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PermanentAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PoliceStation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Pra).HasColumnName("PRA");
            entity.Property(e => e.PresentAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Province)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PurchaserCNIC");
            entity.Property(e => e.PurchaserDob).HasColumnName("PurchaserDOB");
            entity.Property(e => e.PurchaserFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remark)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Road)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SellerAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SellerCNIC");
            entity.Property(e => e.SellerDob).HasColumnName("SellerDOB");
            entity.Property(e => e.SellerFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerNationality)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerPassport)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ServiceType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Share)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Strno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STRNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Subjects)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TenantCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TenantCNIC");
            entity.Property(e => e.TenantName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VehicleRegNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.VoucherNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.WorkAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCostCentreDet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCostCentreDet");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("GRNNO");
            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("it_avgval");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("it_cgl");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasColumnType("ntext")
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval)
                .HasColumnType("money")
                .HasColumnName("it_opagval");
            entity.Property(e => e.ItOpbal)
                .HasColumnType("money")
                .HasColumnName("it_opbal");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("it_pgl");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(20)
                .HasColumnName("keyfield");
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MPono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("PARTY");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("PRTY_NAME");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrCartrage)
                .HasColumnType("money")
                .HasColumnName("tr_cartrage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("tr_fr");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("tr_other");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_Qty");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("WO_DESC");
        });

        modelBuilder.Entity<VwCrcancellation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCRCancellation");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CrserialNo).HasColumnName("CRSerialNo");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.ToBankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCurrentItemRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCurrentItemRate");

            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.LastGrnno)
                .HasMaxLength(5)
                .HasColumnName("LastGRNNo");
            entity.Property(e => e.LastGrnrate)
                .HasColumnType("money")
                .HasColumnName("LastGRNRate");
            entity.Property(e => e.OpeningRate).HasColumnType("money");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.Qqty)
                .HasColumnType("money")
                .HasColumnName("qqty");
        });

        modelBuilder.Entity<VwCustomerRateList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCustomerRateList");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.RateType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCustomerReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCustomerReceipt");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.ApprovedUserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AreaDetailsName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankClearedById).HasColumnName("BankClearedByID");
            entity.Property(e => e.BankClearedByName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BankClearedDate).HasColumnType("datetime");
            entity.Property(e => e.BankClearingDate).HasColumnType("datetime");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankRemarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.BlocksDetails)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlocksDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingCategoryDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingTypeDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingTypeDetailsType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClearedByUserId).HasColumnName("ClearedByUserID");
            entity.Property(e => e.ClearingBankAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClearingBankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CommissionRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CrprintWaterMark).HasColumnName("CRPrintWaterMark");
            entity.Property(e => e.CustomerType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealerCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DealerContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DepoistorName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileData).IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromBankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsCancelled)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.IsExistInBf)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("IsExistInBF");
            entity.Property(e => e.JointOwner)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Msno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MSNo");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PartyName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Prefix)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PricePlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PricelistId).HasColumnName("PricelistID");
            entity.Property(e => e.ProjectRegistrationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetails)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReceiptClearingStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SegmentId).HasColumnName("SegmentID");
            entity.Property(e => e.SegmentName)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.SonOf)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.TeamLeaderCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ToBankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToBankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.WebLink).HasMaxLength(50);
        });

        modelBuilder.Entity<VwCustomerReceiptPrint>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCustomerReceiptPrint");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.ApprovedUserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AreaDetailsName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BlocksDetails)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlocksDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingCategoryDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingTypeDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingTypeDetailsType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CommissionRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Crdate).HasColumnName("CRDate");
            entity.Property(e => e.CrserialNo).HasColumnName("CRSerialNo");
            entity.Property(e => e.Crsrno).HasColumnName("CRSrno");
            entity.Property(e => e.CrsubSegmentId).HasColumnName("CRSubSegmentID");
            entity.Property(e => e.CrsubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CRSubSegmentName");
            entity.Property(e => e.CustomerType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealerCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DealerName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileData).IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectRegistrationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetails)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.TeamLeaderCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ToBankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToBankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwCustomerWiseRateListDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCustomerWiseRateListDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompId1).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwCylinderReconciliation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCylinder_Reconciliation");

            entity.Property(e => e.AtcSendto).HasColumnName("ATC_SENDTo");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.Capacity)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Ownership)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("ownership");
            entity.Property(e => e.Product)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwCylinderRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwCylinder_Registration");

            entity.Property(e => e.ActualVolume)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("actual_volume");
            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("capacity");
            entity.Property(e => e.Color)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("color");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cylinder_no");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.FillingCapacity)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("filling_capacity");
            entity.Property(e => e.Gasfilledin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gasfilledin");
            entity.Property(e => e.Manufacturer)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("manufacturer");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ownership");
            entity.Property(e => e.Pdate).HasColumnName("pdate");
            entity.Property(e => e.Pfrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("pfrom");
            entity.Property(e => e.Pprice).HasColumnName("pprice");
            entity.Property(e => e.Security).HasColumnName("security");
            entity.Property(e => e.Srno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("srno");
            entity.Property(e => e.Status).HasColumnName("status");
            entity.Property(e => e.TestPressure)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("test_pressure");
            entity.Property(e => e.TestSchedule)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("test_schedule");
            entity.Property(e => e.ValveSize)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("valve_size");
            entity.Property(e => e.ValveType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Valve_Type");
            entity.Property(e => e.VolumePunched)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("volume_punched");
            entity.Property(e => e.Weight).HasColumnName("weight");
            entity.Property(e => e.WorkingPressure)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("working_pressure");
        });

        modelBuilder.Entity<VwDailyTankStatusMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDailyTankStatus_Master");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.SerialNo).HasColumnName("serial_no");
            entity.Property(e => e.SrNo).HasColumnName("sr_no");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Subsegment).HasColumnName("subsegment");
        });

        modelBuilder.Entity<VwDailyTankStatusReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDailyTankStatusReport");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.CurrentLevel).HasColumnName("current_level");
            entity.Property(e => e.CurrentPressure).HasColumnName("current_pressure");
            entity.Property(e => e.CurrentQtyKg).HasColumnName("current_qty_kg");
            entity.Property(e => e.CurrentQtyM3).HasColumnName("current_qty_m3");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DifferenceKg).HasColumnName("difference_kg");
            entity.Property(e => e.DifferenceM3).HasColumnName("difference_m3");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.FilledQtyasperplfKg).HasColumnName("filled_qtyasperplf_kg");
            entity.Property(e => e.FilledQtyasperplfM3).HasColumnName("filled_qtyasperplf_m3");
            entity.Property(e => e.FilledQtyaspertankKg).HasColumnName("filled_qtyaspertank_kg");
            entity.Property(e => e.FilledQtyaspertankM3).HasColumnName("filled_qtyaspertank_m3");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PreviousLevel).HasColumnName("previous_level");
            entity.Property(e => e.PreviousPressure).HasColumnName("previous_pressure");
            entity.Property(e => e.QtyAvailableforfillingKg).HasColumnName("qty_availableforfilling_kg");
            entity.Property(e => e.QtyAvailableforfillingM3).HasColumnName("qty_availableforfilling_m3");
            entity.Property(e => e.QtyDecantedKg).HasColumnName("qty_decanted_kg");
            entity.Property(e => e.QtyDecantedM3).HasColumnName("qty_decanted_m3");
            entity.Property(e => e.QtyPreviousKg).HasColumnName("qty_previous_kg");
            entity.Property(e => e.QtyPreviousM3).HasColumnName("qty_previous_m3");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SrNo).HasColumnName("sr_no");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Subsegment).HasColumnName("subsegment");
            entity.Property(e => e.TankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
        });

        modelBuilder.Entity<VwDamagedStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDamagedStock");

            entity.Property(e => e.FromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FromSubSegmentID");
            entity.Property(e => e.FromSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.ToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ToSubSegmentID");
            entity.Property(e => e.ToSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwDeadItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeadItem");

            entity.Property(e => e.GrnDate).HasColumnName("GRN Date");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
        });

        modelBuilder.Entity<VwDealPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDealPurchase");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaNameFive)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaNameFour)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaNameSeven)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaNameSix)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaNameThree)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaNameTwo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyNameFive)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PropertyNameFour)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PropertyNameOne)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PropertyNameSeven)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PropertyNameSix)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PropertyNameThree)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PropertyNameTwo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwDealPurchaseDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDealPurchaseDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Area)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Property)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwDealPurchaseDetailActual>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDealPurchaseDetailActual");

            entity.Property(e => e.Area)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Property)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDealPurchaseModified>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDealPurchaseModified");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DpserialNo).HasColumnName("DPSerialNo");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwDealPurchaseModifiedDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDealPurchaseModifiedDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Property)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDealPurchasedDetailNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDealPurchasedDetailNew");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Property)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDealerQuotaDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDealerQuotaDetail");

            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Pid)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PID");
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailsTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDealerQuotum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDealerQuota");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Pify)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PIFY");
            entity.Property(e => e.PiserialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PISerialNo");
            entity.Property(e => e.Pisrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PISrno");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDecantingReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_DecantingReport");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AfterKg).HasColumnName("After_kg");
            entity.Property(e => e.AfterLevel).HasColumnName("After_level");
            entity.Property(e => e.AfterLtr).HasColumnName("After_Ltr");
            entity.Property(e => e.AfterM3).HasColumnName("After_m3");
            entity.Property(e => e.AfterPressure).HasColumnName("After_pressure");
            entity.Property(e => e.BeforeKg).HasColumnName("Before_kg");
            entity.Property(e => e.BeforeLevel).HasColumnName("Before_level");
            entity.Property(e => e.BeforeLtr).HasColumnName("Before_Ltr");
            entity.Property(e => e.BeforeM3).HasColumnName("Before_m3");
            entity.Property(e => e.BeforePressure).HasColumnName("Before_pressure");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CapacityKg).HasColumnName("Capacity_kg");
            entity.Property(e => e.ChartKg).HasColumnName("Chart_kg");
            entity.Property(e => e.ChartLtr).HasColumnName("Chart_Ltr");
            entity.Property(e => e.ChartM3).HasColumnName("Chart_m3");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Dcdate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("dcdate");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.DecantingDate).HasColumnName("Decanting_date");
            entity.Property(e => e.DecantingKg).HasColumnName("Decanting_kg");
            entity.Property(e => e.DecantingLtr).HasColumnName("Decanting_Ltr");
            entity.Property(e => e.DecantingM3).HasColumnName("Decanting_m3");
            entity.Property(e => e.DecantingNo).HasColumnName("Decanting_no");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.GasStored).HasColumnName("Gas_stored");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IgpKg).HasColumnName("IGP_kg");
            entity.Property(e => e.IgpLtr).HasColumnName("IGP_Ltr");
            entity.Property(e => e.IgpM3).HasColumnName("IGP_m3");
            entity.Property(e => e.Igpdate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("igpdate");
            entity.Property(e => e.Igpno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("igpno");
            entity.Property(e => e.IssueQty).HasColumnName("Issue_Qty");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Podate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("podate");
            entity.Property(e => e.Pono)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pono");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdIgp).HasColumnName("SubSegment_ID_IGP");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentNameIgp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_Name_IGP");
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .HasColumnName("Tank_no");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Value).HasColumnName("VALUE");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwDeliveryDispatch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwDeliveryDispatch");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Region)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDeliveryOrderMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeliveryOrderMainDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCODE");
            entity.Property(e => e.Brand)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Cgsvalue).HasColumnName("CGSValue");
            entity.Property(e => e.CommissionAgent)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId1).HasColumnName("comp_Id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryAddress).IsUnicode(false);
            entity.Property(e => e.DeliveryAddress2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryArrangement)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dodate).HasColumnName("DODate");
            entity.Property(e => e.Dono)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DONo");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Fyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("FYear");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Itemname)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEMName");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedUserId).HasColumnName("ModifiedUserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaidBy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalValue1).HasColumnName("Total_Value");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicleID");
            entity.Property(e => e.Workstation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDeliveryOrderReturnDetails1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDeliveryOrderReturnDetails1");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Brand)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Dodate).HasColumnName("DODate");
            entity.Property(e => e.Dono)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DONo");
            entity.Property(e => e.DoreturnNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOReturnNo");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Fyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("fyear");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QytCylinder).HasColumnName("Qyt_Cylinder");
            entity.Property(e => e.Region)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwDepositedDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Deposited_Detail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bpcode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CheqAmount).HasColumnName("cheq_amount");
            entity.Property(e => e.CheqDate).HasColumnName("cheq_date");
            entity.Property(e => e.CheqNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheq_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DepositedIn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deposited_in");
            entity.Property(e => e.DsDate).HasColumnName("ds_date");
            entity.Property(e => e.DsNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ds_no");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ReceiptDate).HasColumnName("receipt_date");
            entity.Property(e => e.ReceiptNo).HasColumnName("receipt_no");
            entity.Property(e => e.Salestax).HasColumnName("salestax");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Wht153).HasColumnName("wht153");
        });

        modelBuilder.Entity<VwDepositedMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Deposited_Main");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwDepositedMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDepositedMasterDetail");

            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AmountReceived).HasColumnName("Amount_Received");
            entity.Property(e => e.AmountTobeReceived).HasColumnName("Amount_Tobe_Received");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Branch_Code");
            entity.Property(e => e.BranchName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Branch_Name");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.ChequeAmount).HasColumnName("Cheque_Amount");
            entity.Property(e => e.ChequeDate).HasColumnName("Cheque_Date");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Cheque_No");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CreditMemoAmount).HasColumnName("Credit_Memo_Amount");
            entity.Property(e => e.CreditMemoDate).HasColumnName("Credit_Memo_Date");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Credit_Memo_No");
            entity.Property(e => e.CylinderQty).HasColumnName("Cylinder_Qty");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DepositedDate).HasColumnName("Deposited_Date");
            entity.Property(e => e.DepositedIn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Deposited_IN");
            entity.Property(e => e.DetailSubSegmentId).HasColumnName("Detail_SubSegment_ID");
            entity.Property(e => e.DetailSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Detail_SubSegment_name");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FuthurTax).HasColumnName("Futhur_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IncomeTax).HasColumnName("Income_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.KgQty).HasColumnName("KG_Qty");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.ReceiptDate).HasColumnName("Receipt_Date");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Receipt_no");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxPayable).HasColumnName("Sales_Tax_payable");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalNetValue).HasColumnName("Total_Net_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.WhTax).HasColumnName("WH_Tax");
        });

        modelBuilder.Entity<VwDepreciation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDepreciation");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
        });

        modelBuilder.Entity<VwDepreciationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDepreciationDetail");

            entity.Property(e => e.Branch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LocationId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LocationID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_detail");

            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.ClientOfficeCopyOnGlprint).HasColumnName("ClientOfficeCopyOnGLPrint");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedUserName1)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Modified_UserName");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
            entity.Property(e => e.VType1)
                .HasMaxLength(10)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<VwDetail1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDetail");

            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("IT_AVGVAL");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("IT_CBAL");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("IT_CGL");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasColumnType("ntext")
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval)
                .HasColumnType("money")
                .HasColumnName("IT_OPAGVAL");
            entity.Property(e => e.ItOpbal)
                .HasColumnType("money")
                .HasColumnName("IT_OPBAL");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("IT_PGL");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.KeyField).HasMaxLength(20);
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.Supliercode)
                .HasMaxLength(50)
                .HasColumnName("supliercode");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("TR_Accept");
            entity.Property(e => e.TrCartrage)
                .HasColumnType("money")
                .HasColumnName("tr_cartrage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("TR_FR");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("TR_OTHER");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("TR_QTY");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("TR_VALUE");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
        });

        modelBuilder.Entity<VwDetailNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDetailNew");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("IT_AVGVAL");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("IT_CBAL");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("it_cgl");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasColumnType("ntext")
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval)
                .HasColumnType("money")
                .HasColumnName("IT_OPAGVAL");
            entity.Property(e => e.ItOpbal)
                .HasColumnType("money")
                .HasColumnName("IT_OPBAL");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("it_pgl");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("IT_ROQTY");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(20)
                .HasColumnName("keyfield");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("TR_Accept");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("TR_FR");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("TR_OTHER");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("TR_QTY");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("TR_VALUE");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("WO_DESC");
        });

        modelBuilder.Entity<VwDetailPnr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_detailPNR");

            entity.Property(e => e.AccountName).HasColumnName("account_name");
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.Cellno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellno");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.ClientOfficeCopyOnGlprint).HasColumnName("ClientOfficeCopyOnGLPrint");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.Glrestriction).HasColumnName("GLRestriction");
            entity.Property(e => e.GlvoucherApprovedWaterMark).HasColumnName("GLVoucherApprovedWaterMark");
            entity.Property(e => e.InvNo)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedUserName1)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Modified_UserName");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PostedById).HasColumnName("PostedByID");
            entity.Property(e => e.PostedDate).HasColumnType("datetime");
            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReviewedById).HasColumnName("ReviewedByID");
            entity.Property(e => e.ReviewedDate).HasColumnType("datetime");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubProjectId).HasColumnName("SubProjectID");
            entity.Property(e => e.SubProjectName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Tel1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_1");
            entity.Property(e => e.Type)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
            entity.Property(e => e.VType1)
                .HasMaxLength(10)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<VwDiscountMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDiscount_MainDetail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.NormalDiscount).HasColumnName("Normal_Discount");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.ProceduralDiscount).HasColumnName("Procedural_Discount");
            entity.Property(e => e.PromotionalDiscount).HasColumnName("Promotional_Discount");
            entity.Property(e => e.SeasonalDiscount).HasColumnName("Seasonal_Discount");
            entity.Property(e => e.SpecialDiscount).HasColumnName("Special_Discount");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwDiscountPolicyBusinessPartnerDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDiscountPolicyBusinessPartnerDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwDiscountPolicyMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDiscountPolicyMainDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Criteria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountCriteria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountTypeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParentGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentGroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PolicyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.SalesType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDiscountPolicyRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDiscountPolicyRegistration");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Criteria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PolicyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwDiscountPolicyRegistrationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDiscountPolicyRegistrationDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DiscountCriteria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountTypeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ParentGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentGroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.SalesType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwDiscountPosting>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDiscountPosting");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Criteria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscountTypeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PolicyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolicySrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwDiscountPostingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDiscountPostingDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DiscountType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Grnsrno)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("GRNSrno");
            entity.Property(e => e.ParentGroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentGroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwDiscountPostingMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDiscountPostingMainDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.PolicyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PolicySrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwDispatchMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDispatchMasterDetail");

            entity.Property(e => e.AmountReceived).HasColumnName("Amount_Received");
            entity.Property(e => e.AmountTobeReceived).HasColumnName("Amount_tobe_Received");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.CreditMemoAmount).HasColumnName("Credit_Memo_Amount");
            entity.Property(e => e.CreditMemoDate).HasColumnName("Credit_Memo_Date");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Credit_Memo_No");
            entity.Property(e => e.CylinderQty).HasColumnName("Cylinder_Qty");
            entity.Property(e => e.DispatchNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Dispatch_No");
            entity.Property(e => e.DocDate).HasColumnName("DOC_Date");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOC_No");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOC_Type");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FuthurTax).HasColumnName("Futhur_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IPDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("I.P Date");
            entity.Property(e => e.IncomeTax).HasColumnName("Income_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.IpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IP_no");
            entity.Property(e => e.IpSrno).HasColumnName("IP_Srno");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.KgQty).HasColumnName("KG_Qty");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxPayable).HasColumnName("Sales_Tax_payable");
            entity.Property(e => e.SelectIpNo).HasColumnName("Select_IP_No");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_No");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TcsNo)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TCS_NO");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalNetValue).HasColumnName("Total_Net_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WhTax).HasColumnName("WH_Tax");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwDocashSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDOCashSales");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwDomaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDOMaster");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_CODE");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CommissionAgent)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Commission_Agent");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryArrangement)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Particulars)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDomasterReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDOMaster_Return");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_CODE");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CommissionAgent)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Commission_Agent");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.DoReturnNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_Return_No");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwDoparty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDOParty");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DeliveryAddress).IsUnicode(false);
            entity.Property(e => e.DeliveryAddress2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.JoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("JO_Date");
            entity.Property(e => e.JoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JO_No");
            entity.Property(e => e.QytCp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qyt_CP");
            entity.Property(e => e.QytCylinder).HasColumnName("Qyt_Cylinder");
            entity.Property(e => e.QytKg).HasColumnName("Qyt_Kg");
            entity.Property(e => e.QytLiter).HasColumnName("Qyt_liter");
            entity.Property(e => e.QytM3).HasColumnName("Qyt_m3");
            entity.Property(e => e.QytMcl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qyt_MCL");
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SNo).HasColumnName("S_No");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegmentID_Detail");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");
        });

        modelBuilder.Entity<VwDopartyReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDOPartyReturn");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.Category)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Further_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.InvoiceValue)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.JoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("JO_Date");
            entity.Property(e => e.JoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JO_No");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QytCp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qyt_CP");
            entity.Property(e => e.QytCylinder).HasColumnName("Qyt_Cylinder");
            entity.Property(e => e.QytKg).HasColumnName("Qyt_Kg");
            entity.Property(e => e.QytLiter).HasColumnName("Qyt_liter");
            entity.Property(e => e.QytM3).HasColumnName("Qyt_m3");
            entity.Property(e => e.QytMcl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qyt_MCL");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SNo).HasColumnName("S_No");
            entity.Property(e => e.SalesTax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Sales_Tax");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegmentID_Detail");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalFreight)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalValue)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");
        });

        modelBuilder.Entity<VwDoreturnIp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_DOReturn_IP");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.DoReturnNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_Return_No");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.QytCylinder).HasColumnName("Qyt_Cylinder");
            entity.Property(e => e.RQty).HasColumnName("R_Qty");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwDosalesComparison>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDOSalesComparison");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DeliveryAddress).IsUnicode(false);
            entity.Property(e => e.DeliveryAddress2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DoDate).HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.JoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("JO_Date");
            entity.Property(e => e.JoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JO_No");
            entity.Property(e => e.QytCp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qyt_CP");
            entity.Property(e => e.QytCylinder).HasColumnName("Qyt_Cylinder");
            entity.Property(e => e.QytKg).HasColumnName("Qyt_Kg");
            entity.Property(e => e.QytLiter).HasColumnName("Qyt_liter");
            entity.Property(e => e.QytM3).HasColumnName("Qyt_m3");
            entity.Property(e => e.QytMcl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Qyt_MCL");
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SNo).HasColumnName("S_No");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegmentID_Detail");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");
        });

        modelBuilder.Entity<VwDosubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDOSubSegment");

            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwDosubSegmentOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDOSubSegmentOld");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwDosubSegmentforIp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDOSubSegmentforIP");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Particulars)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwDowarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwDOWarehouse");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.CylindersQty).HasColumnName("Cylinders_Qty");
            entity.Property(e => e.FWarehouseCode).HasColumnName("F_WarehouseCode");
            entity.Property(e => e.FWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_WarehouseName");
            entity.Property(e => e.FWarehouseSubSegmentCode).HasColumnName("F_WarehouseSubSegmentCode");
            entity.Property(e => e.FWarehouseSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_WarehouseSubSegmentName");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.JoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("JO_Date");
            entity.Property(e => e.JoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JO_No");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TWarehouseCode).HasColumnName("T_WarehouseCode");
            entity.Property(e => e.TWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_WarehouseName");
            entity.Property(e => e.TWarehouseSubSegmentCode).HasColumnName("T_WarehouseSubSegmentCode");
            entity.Property(e => e.TWarehouseSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_WarehouseSubSegmentName");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwEcrReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwECR_Report");

            entity.Property(e => e.BPName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("B.P Name");
            entity.Property(e => e.Capacity)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EcrDate).HasColumnName("ECR_date");
            entity.Property(e => e.EcrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ECR No");
            entity.Property(e => e.Ownership)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_code");
            entity.Property(e => e.Product)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RefNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Ref No");
            entity.Property(e => e.Route).IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sts).HasColumnName("STS");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Vehicle)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwEdataBookingForm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEDataBookingForm");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FileData).IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentNames)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TransactionForm)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransactionFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwEditlistingNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEditlistingNew");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("GRNNO");
            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("it_avgval");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("it_cgl");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasColumnType("ntext")
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval)
                .HasColumnType("money")
                .HasColumnName("it_opagval");
            entity.Property(e => e.ItOpbal)
                .HasColumnType("money")
                .HasColumnName("it_opbal");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("it_pgl");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(20)
                .HasColumnName("keyfield");
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("PARTY");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("PRTY_NAME");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("TR_FR");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("TR_OTHER");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_Qty");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("WO_DESC");
        });

        modelBuilder.Entity<VwEmailCompaign>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmailCompaign");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CustomerType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Msg)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Subject).HasMaxLength(500);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TypeID");
        });

        modelBuilder.Entity<VwEmailCompaignDetailBookingForm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmailCompaignDetailBookingForm");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<VwEmailCompaignDetailLead>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmailCompaignDetailLeads");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Customer)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwEmailCompaignDetailProjectSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmailCompaignDetailProjectSale");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<VwEmployeeAttendanceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployeeAttendanceDetail");

            entity.Property(e => e.CheckTime).HasColumnType("datetime");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReaderId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ReaderID");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwEmployeeAttendanceDetailZkt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployeeAttendanceDetailZKT");

            entity.Property(e => e.AttendanceDate).HasColumnType("datetime");
            entity.Property(e => e.Checkin)
                .HasColumnType("datetime")
                .HasColumnName("checkin");
            entity.Property(e => e.Checkout)
                .HasColumnType("datetime")
                .HasColumnName("checkout");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Zkid).HasColumnName("ZKID");
        });

        modelBuilder.Entity<VwEmployeeBalance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployeeBalances");

            entity.Property(e => e.Cr).HasColumnName("cr");
            entity.Property(e => e.Dr).HasColumnName("dr");
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Opcr).HasColumnName("opcr");
            entity.Property(e => e.Opdr).HasColumnName("opdr");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Tcr).HasColumnName("tcr");
            entity.Property(e => e.Tdr).HasColumnName("tdr");
        });

        modelBuilder.Entity<VwEmployeeBenifit>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployeeBenifit");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CreditAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Criteria)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DebitAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RuleLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwEmployeeBenifitDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployeeBenifitDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Provision)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProvisionFrequency)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwEmployeeFingerPrintDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployeeFingerPrintDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Data).HasColumnType("text");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwEmployeeOfMonth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployeeOfMonth");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ImagePath)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Month)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnType("image");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwEmployeeRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployeeRegistration");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.AppointLetterNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Appoint_Letter_No");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BloodGroup)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DepttCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Deptt_Code");
            entity.Property(e => e.Dob).HasColumnName("DOB");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Email_Address");
            entity.Property(e => e.EmployeeAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeBankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmployeeBankID");
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.EmploymentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FatherName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JobPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Job_position");
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Marital_Status");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Nationality)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinContactNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Next_To_Kin_ContactNo");
            entity.Property(e => e.NextToKinName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Next_To_Kin_Name");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PostalAddress)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Postal_Address");
            entity.Property(e => e.Referedby)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Religion)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Scale)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_no");
            entity.Property(e => e.Signature).HasColumnType("image");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserIds).HasColumnName("UserIDs");
            entity.Property(e => e.UserNam)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WorkStation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Zkid).HasColumnName("ZKID");
        });

        modelBuilder.Entity<VwEmployeeRegistrationAssignmentPortable>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployee_Registration_AssignmentPortables");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Description");
            entity.Property(e => e.PackageDetail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Package_Detail");
            entity.Property(e => e.Remarks)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
        });

        modelBuilder.Entity<VwEmployeeRegistrationAssignmentTadum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployee_Registration_AssignmentTADA");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
        });

        modelBuilder.Entity<VwEmployeeRegistrationAssignmentVehicle>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployee_Registration_AssignmentVehicles");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FuelAllowedLtr).HasColumnName("Fuel_Allowed_Ltr");
            entity.Property(e => e.MeterReading).HasColumnName("Meter_Reading");
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.UseType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Vehicle)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwEmployeeRegistrationJobDescription>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployee_Registration_JobDescription");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.AppointLetterNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Appoint_Letter_No");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BloodGroup)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DepttCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Deptt_Code");
            entity.Property(e => e.Dob)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DOB");
            entity.Property(e => e.EmailAddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Email_Address");
            entity.Property(e => e.EmployeeAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.FatherName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JobDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Job_Description");
            entity.Property(e => e.JobPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Job_position");
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Marital_Status");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Nationality)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinContactNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Next_To_Kin_ContactNo");
            entity.Property(e => e.NextToKinName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Next_To_Kin_Name");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PostalAddress)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Postal_Address");
            entity.Property(e => e.Referedby)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Religion)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReportTo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Report_to");
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.Scale)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Type)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WorkStation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwEmployeeResgistrationDesignation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployee_Resgistration_Designation");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.Segment)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwEmployeeResgistrationLeaveManagement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployee_Resgistration_LeaveManagement");

            entity.Property(e => e.AllowedLeave)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Allowed_Leave");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.LeaveEncashment).HasColumnName("Leave_Encashment");
            entity.Property(e => e.LeaveType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Leave_Type");
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.StandardLeave)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Standard_leave");
        });

        modelBuilder.Entity<VwEmployeeResgistrationSalaryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployee_Resgistration_SalaryDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PayrollExpenses)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Per)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PerTitle)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PerquisitesCode)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProvisionForTaxtation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SalaryPayables)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalaryTaxExpense)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.TaxPayableCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwEmployeeVoucherDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmployeeVoucherDetail");

            entity.Property(e => e.BpCode)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BudgetCode)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Budget_Code");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.LoanAdvanceCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LoanAdvanceTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Site).HasMaxLength(4000);
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentId1).HasColumnName("SubSegment_ID_");
            entity.Property(e => e.SubSegmentL1Id).HasColumnName("SubSegment_L_1_ID");
            entity.Property(e => e.SubSegmentL2Id).HasColumnName("SubSegment_L_2_ID");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwFacebookLead>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFacebookLeads");

            entity.Property(e => e.AddFromId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AddFromID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Occupation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OrganicStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectRegistrationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectRegistrationSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.WhatsappNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFaq>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFAQ");

            entity.Property(e => e.Answer)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Question)
                .HasMaxLength(5000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFileDeliveryConfirmation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFileDeliveryConfirmation");

            entity.Property(e => e.BookingFormSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Dealer)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DeliveredFromLocation)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ReceiverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwFileInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFileInventory");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwFileInventoryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFileInventoryDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwFileInventoryReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFileInventoryReport");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFilePurchasing>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFilePurchasing");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.RemarksMain)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sp2code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP2Code");
            entity.Property(e => e.Sp2name)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SP2Name");
            entity.Property(e => e.Sp3code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP3Code");
            entity.Property(e => e.Sp3name)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SP3Name");
            entity.Property(e => e.Sp4code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP4Code");
            entity.Property(e => e.Sp4name)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SP4Name");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFilePurchasingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFilePurchasingDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Area)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockType).HasMaxLength(100);
            entity.Property(e => e.BlockTypeId).HasColumnName("BlockTypeID");
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.Category)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gpafee).HasColumnName("GPAFee");
            entity.Property(e => e.PlotDetail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RemarksMain)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Spafee).HasColumnName("SPAFee");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFileReceiving>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFileReceiving");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PlotNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentFromName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentToName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwFileSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFileSales");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.RemarksMain)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sp2code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP2Code");
            entity.Property(e => e.Sp2name)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SP2Name");
            entity.Property(e => e.Sp3code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP3Code");
            entity.Property(e => e.Sp3name)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SP3Name");
            entity.Property(e => e.Sp4code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP4Code");
            entity.Property(e => e.Sp4name)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SP4Name");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFileSalesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFileSalesDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Area)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockType).HasMaxLength(100);
            entity.Property(e => e.BlockTypeId).HasColumnName("BlockTypeID");
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.Category)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FilePurchasingSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FileStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RemarksMain)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Sp2code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP2Code");
            entity.Property(e => e.Sp2name)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SP2Name");
            entity.Property(e => e.Sp3code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP3Code");
            entity.Property(e => e.Sp3name)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SP3Name");
            entity.Property(e => e.Sp4code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SP4Code");
            entity.Property(e => e.Sp4name)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SP4Name");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFileTradingReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFileTradingReport");

            entity.Property(e => e.Area)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlockType).HasMaxLength(100);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BpcodePurchasedBy)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCodePurchasedBy");
            entity.Property(e => e.BpcodeSoldBy)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCodeSoldBy");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Gp).HasColumnName("GP");
            entity.Property(e => e.PlotDetail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PurchaseBpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PurchaseBPName");
            entity.Property(e => e.PurchaseNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PurchasedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PurchasingPerson)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RemarksMain)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesBpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("SalesBPName");
            entity.Property(e => e.SalesPerson)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SalesRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SoldBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFollowupDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFollowupDetail");

            entity.Property(e => e.City)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName).HasMaxLength(500);
            entity.Property(e => e.Fdate).HasColumnName("fdate");
            entity.Property(e => e.FollowUpdate).HasMaxLength(4000);
            entity.Property(e => e.Followuptime).HasMaxLength(4000);
            entity.Property(e => e.Ftime)
                .HasColumnType("datetime")
                .HasColumnName("ftime");
            entity.Property(e => e.Latitude).HasColumnName("latitude");
            entity.Property(e => e.Longitude).HasColumnName("longitude");
            entity.Property(e => e.NextActivity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NextFollowuptime).HasColumnType("datetime");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.SizeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SizeID");
            entity.Property(e => e.SizeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
        });

        modelBuilder.Entity<VwFormsIssuance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFormsIssuance");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFormsIssuanceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFormsIssuanceDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Property)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwFormsReceiving>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFormsReceiving");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Vendor)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFormsReceivingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFormsReceivingDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Property)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFormsReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFormsReturn");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwFormsReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwFormsReturnDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Property)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwGeneralLedger>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_GeneralLedger");

            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.Coaob).HasColumnName("COAOB");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ObvDetail).HasColumnName("OBvDETAIL");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwGeneralLedgerSubSegmentWise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_GeneralLedger_SubSegmentWise");

            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.Coaob).HasColumnName("COAOB");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ObvDetail).HasColumnName("OBvDETAIL");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwGetConfirmationPayement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGetConfirmationPayement");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bank)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CashBankOnline)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ConfirmationAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationPayment)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealerCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Instrument)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesManCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwGetSocietyInstallment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGetSocietyInstallment");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SocietyInstallmentPayment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwGlAllCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGlAllCode");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
        });

        modelBuilder.Entity<VwGlreceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGLReceipts");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BankAccountB)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankAccountC)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankNameB)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankNameC)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Branch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchB)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BranchC)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.ModeOfPayment)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.OnAccountOf)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phase)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Prefix)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Sector)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VoucherNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VoucherType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwGrnapproval>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGRNApproval");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwGrncomparison>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGRNComparison");

            entity.Property(e => e.ActualQty).HasColumnName("Actual_Qty");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BuiltyAmount)
                .HasColumnType("decimal(18, 4)")
                .HasColumnName("Builty_Amount");
            entity.Property(e => e.BuiltyDate).HasColumnName("Builty_Date");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Builty_No");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.CreationDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("creationDate");
            entity.Property(e => e.DcDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DC Date");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dept_Code");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.ExciseValue).HasColumnName("Excise_Value");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.GoodsCompanyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.GrnDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("GRN_DATE");
            entity.Property(e => e.GrnReturnNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRN_Return_No");
            entity.Property(e => e.Grndate1).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRNNO");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IgpDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IGP Date");
            entity.Property(e => e.IgpKeys)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IGP_keys");
            entity.Property(e => e.Igpno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("igpno");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NetPurchaseRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Net Purchase Rate");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Party_type");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PO Date");
            entity.Property(e => e.PoNpr)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("PO_NPR");
            entity.Property(e => e.PoRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("PO_RATE");
            entity.Property(e => e.PoUom)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("PO_UOM");
            entity.Property(e => e.PoValue)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("po_Value");
            entity.Property(e => e.Pono)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pono");
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase_Qty");
            entity.Property(e => e.QtyInStock).HasColumnName("Qty_In_Stock");
            entity.Property(e => e.Rate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("rate");
            entity.Property(e => e.RemainingQty).HasColumnName("Remaining_Qty");
            entity.Property(e => e.RemainingRate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Rate");
            entity.Property(e => e.RemainingValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Value");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxReceivable).HasColumnName("Sales Tax Receivable");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status).HasMaxLength(5);
            entity.Property(e => e.SubSegmentCode).HasColumnName("Sub Segment Code");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentName1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TotalValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_Value");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Value)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("VALUE");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwGrnmasterDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwGRNMasterData");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwGrnmasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGRNMasterDetail");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Builty_No");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("creationDate");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dept_Code");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.ExciseValue).HasColumnName("Excise_Value");
            entity.Property(e => e.ExpiryDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Expiry Date");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.FreightAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.GrnDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("GRN_DATE");
            entity.Property(e => e.GrnReturnNo).HasColumnName("GRN_Return_No");
            entity.Property(e => e.Grndate1).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IgpDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IGP Date");
            entity.Property(e => e.Igpno).HasColumnName("igpno");
            entity.Property(e => e.Igptype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IGPType");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NetPurchaseRate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Net Purchase Rate");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.OtherOverheads).HasColumnName("Other_Overheads");
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Party_type");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PO Date");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase_Qty");
            entity.Property(e => e.QtyInStock).HasColumnName("Qty_In_Stock");
            entity.Property(e => e.Rate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("rate");
            entity.Property(e => e.Recievername)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemainingQty).HasColumnName("Remaining_Qty");
            entity.Property(e => e.RemainingRate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Rate");
            entity.Property(e => e.RemainingValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Value");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxReceivable).HasColumnName("Sales Tax Receivable");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentCode).HasColumnName("Sub Segment Code");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentName1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.ToWareHouseNo).HasColumnName("To_WareHouse_No");
            entity.Property(e => e.ToWareHouseSubSegmentId).HasColumnName("To_WareHouse_SubSegment_ID");
            entity.Property(e => e.ToWhName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("To WH Name");
            entity.Property(e => e.TotalValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_Value");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.TransportationCharges).HasColumnName("Transportation_Charges");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Value)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("VALUE");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwGrnmasterDetailForDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwGRNMasterDetailForData");

            entity.Property(e => e.ActualRate).HasColumnType("decimal(28, 14)");
            entity.Property(e => e.ActualUom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ActualUOM");
            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Dcdate).HasColumnName("dcdate");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.DemandQty).HasColumnName("Demand_Qty");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dept_Code");
            entity.Property(e => e.DetailSno).HasColumnName("Detail_Sno");
            entity.Property(e => e.DetailSrno).HasColumnName("Detail_Srno");
            entity.Property(e => e.DrRequisition)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DR_Requisition");
            entity.Property(e => e.DrRequisitionDate).HasColumnName("DR_Requisition_Date");
            entity.Property(e => e.DrRequistionKeys)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DR_Requistion_Keys");
            entity.Property(e => e.ExciseValue).HasColumnName("Excise_Value");
            entity.Property(e => e.GrnDate).HasColumnName("GRN_Date");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IgpKeys)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IGP_keys");
            entity.Property(e => e.Igpdate).HasColumnName("igpdate");
            entity.Property(e => e.Igpno).HasColumnName("igpno");
            entity.Property(e => e.Igpsno).HasColumnName("IGPSNo");
            entity.Property(e => e.IssueQty).HasColumnName("Issue_Qty");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NetPurchaseRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Net_Purchase_Rate");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.OtherOverheads).HasColumnName("Other_Overheads");
            entity.Property(e => e.Podate).HasColumnName("podate");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase_Qty");
            entity.Property(e => e.QtyInStock).HasColumnName("Qty_In_Stock");
            entity.Property(e => e.Rate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("rate");
            entity.Property(e => e.RemainingQty).HasColumnName("Remaining_Qty");
            entity.Property(e => e.RemainingRate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Rate");
            entity.Property(e => e.RemainingValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Value");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.ToWareHouseNo).HasColumnName("To_WareHouse_No");
            entity.Property(e => e.ToWareHouseSubSegmentId).HasColumnName("To_WareHouse_SubSegment_ID");
            entity.Property(e => e.TotalValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_Value");
            entity.Property(e => e.TotalValueSin)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_Value_SIN");
            entity.Property(e => e.TransportationCharges).HasColumnName("Transportation_Charges");
            entity.Property(e => e.Type)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("VALUE");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.VehicleRegistration)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_registration");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.WarehouseSubsegmentId).HasColumnName("warehouse_Subsegment_ID");
            entity.Property(e => e.Whtkey)
                .IsUnicode(false)
                .HasColumnName("WHTKey");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwGrnmasterDetailNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwGRNMasterDetailNew");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BpCode1)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Builty_No");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Dcdate).HasColumnName("dcdate");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.DemandQty).HasColumnName("Demand_Qty");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dept_Code");
            entity.Property(e => e.DetailSno).HasColumnName("Detail_Sno");
            entity.Property(e => e.DetailSrno).HasColumnName("Detail_Srno");
            entity.Property(e => e.DrRequisition)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DR_Requisition");
            entity.Property(e => e.DrRequisitionDate).HasColumnName("DR_Requisition_Date");
            entity.Property(e => e.DrRequistionKeys)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DR_Requistion_Keys");
            entity.Property(e => e.ExciseValue).HasColumnName("Excise_Value");
            entity.Property(e => e.FreightAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FreightType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrnDate1).HasColumnName("GRN_Date");
            entity.Property(e => e.GrnReturnNo).HasColumnName("GRN_Return_No");
            entity.Property(e => e.GrnVoucherKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRN_Voucher_Key");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IgpKeys)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IGP_keys");
            entity.Property(e => e.Igpdate).HasColumnName("igpdate");
            entity.Property(e => e.Igpno).HasColumnName("igpno");
            entity.Property(e => e.Igpsno).HasColumnName("IGPSNo");
            entity.Property(e => e.Igptype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IGPType");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.IssueQty).HasColumnName("Issue_Qty");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.NetPurchaseRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Net_Purchase_Rate");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.OtherOverheads).HasColumnName("Other_Overheads");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Podate).HasColumnName("podate");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.PrimaryRate).HasColumnType("numeric(28, 14)");
            entity.Property(e => e.PrimaryUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PrimaryUOM");
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase_Qty");
            entity.Property(e => e.QtyInStock).HasColumnName("Qty_In_Stock");
            entity.Property(e => e.Rate)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("rate");
            entity.Property(e => e.Recievername)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemainingQty).HasColumnName("Remaining_Qty");
            entity.Property(e => e.RemainingRate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Rate");
            entity.Property(e => e.RemainingValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Value");
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.ToWareHouseNo).HasColumnName("To_WareHouse_No");
            entity.Property(e => e.ToWareHouseSubSegmentId).HasColumnName("To_WareHouse_SubSegment_ID");
            entity.Property(e => e.TotalValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_Value");
            entity.Property(e => e.TotalValueSin)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_Value_SIN");
            entity.Property(e => e.TransportationCharges).HasColumnName("Transportation_Charges");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("VALUE");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.VehicleRegistration)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_registration");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.WarehouseSubsegmentId).HasColumnName("warehouse_Subsegment_ID");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whtkey)
                .IsUnicode(false)
                .HasColumnName("WHTKey");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwGrnrate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGRNRATE");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IssueQty).HasColumnName("Issue_Qty");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.Rate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("rate");
        });

        modelBuilder.Entity<VwGrnreturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwGRNReturnDetail");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Grnkeys)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRNKeys");
            entity.Property(e => e.Grnsno).HasColumnName("GRNSNo");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whno).HasColumnName("WHNo");
        });

        modelBuilder.Entity<VwGrnreturnMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwGRNReturnMaster");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Grndate).HasColumnName("GRNDate");
            entity.Property(e => e.Grnno).HasColumnName("GRNNo");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReturnType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwGrnreturnMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGRNReturnMasterDetail");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Grndate).HasColumnName("GRNDate");
            entity.Property(e => e.Grnno).HasColumnName("GRNNo");
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReturnType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whno).HasColumnName("WHNo");
        });

        modelBuilder.Entity<VwGrnsubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGRNSubSegment");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Grnno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRNNO");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status).HasMaxLength(5);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwGrnwithIgp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwGRNwithIGP");

            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.Igpdate).HasColumnName("igpdate");
            entity.Property(e => e.Igpno).HasColumnName("igpno");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.Podate).HasColumnName("podate");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.Reqdate).HasColumnName("reqdate");
            entity.Property(e => e.Reqno).HasColumnName("reqno");
            entity.Property(e => e.Supliercode)
                .HasMaxLength(50)
                .HasColumnName("supliercode");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("TR_Accept");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("TR_QTY");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("TR_VALUE");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(25)
                .HasColumnName("uom");
        });

        modelBuilder.Entity<VwIgpdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwIGPDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeliveryChallanNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GateInNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Podate).HasColumnName("PODate");
            entity.Property(e => e.Pono).HasColumnName("PONo");
            entity.Property(e => e.Posno).HasColumnName("POSno");
            entity.Property(e => e.Ppqty).HasColumnName("PPQty");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalValue).HasColumnType("decimal(28, 7)");
            entity.Property(e => e.Type)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TypePo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TypePO");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Value).HasColumnType("decimal(28, 7)");
        });

        modelBuilder.Entity<VwIgpmaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwIGPMaster");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CarriageType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DriverCellNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Podate).HasColumnName("PODate");
            entity.Property(e => e.Pokey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POKey");
            entity.Property(e => e.Pono).HasColumnName("PONo");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwIgpmasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIGPMasterDetail");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.Barcode)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CellNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Cell_no");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DlCode)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DL_code");
            entity.Property(e => e.DlDate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("DL_date");
            entity.Property(e => e.DriverName)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Driver_name");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GinDate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("GIN_date");
            entity.Property(e => e.GinNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("GIN_no");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group Code");
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Group Name");
            entity.Property(e => e.IgpDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Igp_date");
            entity.Property(e => e.IgpDate1).HasColumnName("IGP Date");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Item Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Ownership)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PoDate)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("PO_date");
            entity.Property(e => e.Pono).HasColumnName("PONo");
            entity.Property(e => e.Posno).HasColumnName("POSno");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.StatusMain)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status_Main");
            entity.Property(e => e.SubSegmentCode).HasColumnName("Sub Segment Code");
            entity.Property(e => e.SubSegmentIgp).HasColumnName("SubSegmentIGP");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.SubSegmentNameIgp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegmentNameIGP");
            entity.Property(e => e.TotalValue).HasColumnType("decimal(28, 7)");
            entity.Property(e => e.Type)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
            entity.Property(e => e.Value).HasColumnType("decimal(28, 7)");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("Vehicle_No");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwIgpmasterSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIGPMasterSubSegment");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarriageType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DriverCellNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Podate).HasColumnName("PODate");
            entity.Property(e => e.Pokey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POKey");
            entity.Property(e => e.Pono).HasColumnName("PONo");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwIgpstandered>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIGPStandered");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CarriageType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeliveryChallanNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverCellNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GateInNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Podate).HasColumnName("PODate");
            entity.Property(e => e.Pokey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("POKey");
            entity.Property(e => e.Pono).HasColumnName("PONo");
            entity.Property(e => e.Posno).HasColumnName("POSno");
            entity.Property(e => e.Ppqty).HasColumnName("PPQty");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwIgpsubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIGPSubSegment");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.IgpDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Igp_date");
            entity.Property(e => e.IgpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Igp_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwInBoundInventoryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInBoundInventoryDetail");

            entity.Property(e => e.Area)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ExpectedReturn)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Qty)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SizeId).HasColumnName("SizeID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwInboundInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInboundInventory");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Investor)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.InvestorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwIncentiveManagementInvoice>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIncentiveManagementInvoice");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.SalesMan)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesManName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwIncentiveManagementInvoiceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIncentiveManagementInvoiceDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.Ipsrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPSrno");
            entity.Property(e => e.IpsubSegment).HasColumnName("IPSubSegment");
            entity.Property(e => e.IpsubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPSubSegmentName");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwInstallmentPlan>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInstallmentPlan");

            entity.Property(e => e.Advance)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AmountOrPercentage)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Confirmation)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DevelopmentCharges)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DevelopmentChargesSchedule)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Due)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.DuePlan)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Excavation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExcavationDab).HasColumnName("ExcavationDAB");
            entity.Property(e => e.Installment)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentPlans)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.LateChargesPerDay)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OnPossession)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PlanName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwInstallmentPlanDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInstallmentPlanDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ExtraChargesTitle).HasMaxLength(100);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<VwInstallmentPlanNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInstallmentPlanNew");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.PlanName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwInstallmentReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInstallmentReceipt");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwInstallmentReceiptDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInstallmentReceiptDelivery");

            entity.Property(e => e.ClientRepresentativeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeliveredFromLocation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Expr1)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwInstrument>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInstrument");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwInstrumentInOut>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInstrumentInOut");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstrumentNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvestorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestorName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.SocietyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SocietyName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwInterBankTransferDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_InterBankTransfer_Detail");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.ChequeDate).HasColumnName("cheque_date");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheque_no");
            entity.Property(e => e.ChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("chequebook_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.FromAcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("from_acno");
            entity.Property(e => e.FromBank)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("from_bank");
            entity.Property(e => e.FromBankid).HasColumnName("from_bankid");
            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("narration");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.ToAcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("to_acno");
            entity.Property(e => e.ToBank)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("to_bank");
            entity.Property(e => e.ToBankid).HasColumnName("to_bankid");
        });

        modelBuilder.Entity<VwInterBankTransferMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_InterBankTransfer_Main");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwInventoryConsumption>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInventoryConsumption");

            entity.Property(e => e.Boqqty).HasColumnName("BOQQty");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubProjectId).HasColumnName("SubProjectID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwInventoryMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInventoryMasterDetail");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.GrnDate1).HasColumnName("GRN_Date");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.IssueQty).HasColumnName("Issue_Qty");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase_Qty");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.ToWareHouseNo).HasColumnName("To_WareHouse_No");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwInventoryPending>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInventoryPending");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwInvestmentReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInvestmentReturn");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Investor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwInvestorDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInvestorDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CustomerBankAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileData).IsUnicode(false);
            entity.Property(e => e.FileName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InvestmentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PartyName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ReferredBy)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ReferredCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SecurityChequeBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecurityChequeBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SecurityChequeNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwInvestorRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwInvestorRegistration");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealPurchaseSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReturnType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReturnValue)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwIpPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIP_Purchase");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AdvanceBal)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Advance Bal");
            entity.Property(e => e.AdvanceBal1).HasColumnName("Advance_Bal");
            entity.Property(e => e.ApAccuralBal)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("AP Accural_Bal");
            entity.Property(e => e.ApaccuralBal1)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("APAccural_Bal");
            entity.Property(e => e.BatchNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BpEmail)
                .HasMaxLength(50)
                .HasColumnName("BP_Email");
            entity.Property(e => e.BpFax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BP_Fax");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.Cellno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cellno");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DebitMemoAmount).HasColumnName("Debit Memo Amount");
            entity.Property(e => e.DebitMemoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Debit Memo Date");
            entity.Property(e => e.DebitMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Debit Memo No");
            entity.Property(e => e.DocDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Doc Date");
            entity.Property(e => e.DocKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Doc No");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Doc Type");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Expr1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceBal)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Invoice Bal");
            entity.Property(e => e.InvoiceBal1).HasColumnName("Invoice_Bal");
            entity.Property(e => e.IpDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IP Date");
            entity.Property(e => e.IpDate1).HasColumnName("IP_Date");
            entity.Property(e => e.IpNo).HasColumnName("IP_no");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PartyType).HasMaxLength(50);
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Posted By");
            entity.Property(e => e.RegisteredOfficeAdress)
                .IsUnicode(false)
                .HasColumnName("Registered_Office_Adress");
            entity.Property(e => e.RemainingAmount).HasColumnName("Remaining_Amount");
            entity.Property(e => e.SNo).HasColumnName("S No");
            entity.Property(e => e.SalesTaxReceivable).HasColumnName("Sales Tax Receivable");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SecurityBal)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Security Bal");
            entity.Property(e => e.SecurityBal1)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Security_Bal");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Strn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("STRN");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentId1).HasColumnName("Sub Segment ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentName1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.Tel1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_1");
            entity.Property(e => e.TotalNetValue).HasColumnName("Total Net Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Vid).HasColumnName("vid");
            entity.Property(e => e.Vin)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vin");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whno).HasColumnName("WHNo");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwIppurchasingForPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIPPurchasingForPayment");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DocDate).HasColumnName("Doc_Date");
            entity.Property(e => e.Docno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCNo");
            entity.Property(e => e.Docsrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCSrno");
            entity.Property(e => e.Doctype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOCType");
            entity.Property(e => e.Ipdate).HasColumnName("IPDate");
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.IpsubSegment).HasColumnName("IPSubSegment");
            entity.Property(e => e.IpsubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPSubSegmentName");
            entity.Property(e => e.PartyType).HasMaxLength(50);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.Vin)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vin");
            entity.Property(e => e.Vindate).HasColumnName("VINDate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwIpsalesMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIPSalesMasterDetail");

            entity.Property(e => e.ApaccuralBalance).HasColumnName("APAccuralBalance");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bptype)
                .HasMaxLength(50)
                .HasColumnName("BPType");
            entity.Property(e => e.Brand)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Cgsvalue).HasColumnName("CGSValue");
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CreditMemono)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DeliveryAddress).IsUnicode(false);
            entity.Property(e => e.DispatchInvoices).HasMaxLength(50);
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Freight).IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Ipdate).HasColumnName("IPDate");
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Itemname)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEMName");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedUserId).HasColumnName("ModifiedUserID");
            entity.Property(e => e.ModifiedUsername).HasMaxLength(50);
            entity.Property(e => e.ModifiedWorkstation).HasMaxLength(50);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RegionId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegionName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.Sinkey)
                .HasMaxLength(50)
                .HasColumnName("SINKey");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentIddetail).HasColumnName("SubSegmentIDDetail");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Username).HasMaxLength(50);
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("VehicleID");
            entity.Property(e => e.VoucherKey).HasMaxLength(50);
            entity.Property(e => e.WorkSation).HasMaxLength(50);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwIpsubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIPSubSegment");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DispatchInvoices)
                .HasMaxLength(50)
                .HasColumnName("Dispatch_Invoices");
            entity.Property(e => e.IpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IP_no");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwIssueOpeningQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIssueOpeningQty");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.OpeningValue).HasColumnType("numeric(38, 14)");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
        });

        modelBuilder.Entity<VwIssueRunningQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwIssueRunningQty");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.OpeningValue).HasColumnType("numeric(38, 14)");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
        });

        modelBuilder.Entity<VwItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItem_");

            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.OpeningQty).HasColumnName("Opening_Qty");
            entity.Property(e => e.OpeningValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_Value");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
        });

        modelBuilder.Entity<VwItemBom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Item_BOM");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCodeRaw)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code_Raw");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemCodeRaw)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code_Raw");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwItemBom1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItem_BOM");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemCodeRaw)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code_Raw");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwItemBom2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemBOM");

            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwItemBoqplan>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemBOQPlan");

            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubProjectName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwItemBoqplanDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemBOQPlanDetail");

            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubProjectName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwItemCcwcomp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemCCWComp");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_Desc");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.Main)
                .HasMaxLength(50)
                .HasColumnName("main");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwItemCodeAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemCodeAll");

            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("it_loc");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("it_partno");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
        });

        modelBuilder.Entity<VwItemConsRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemConsRate");

            entity.Property(e => e.GrndateLastCons).HasColumnName("grndateLastCons");
            entity.Property(e => e.ItemCons)
                .HasMaxLength(50)
                .HasColumnName("itemCons");
            entity.Property(e => e.MaxGrncons)
                .HasMaxLength(5)
                .HasColumnName("maxGRNCons");
            entity.Property(e => e.Trrate)
                .HasColumnType("money")
                .HasColumnName("trrate");
        });

        modelBuilder.Entity<VwItemConsRate1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemConsRate1");

            entity.Property(e => e.Gdate).HasColumnName("gdate");
            entity.Property(e => e.MGrncons)
                .HasMaxLength(5)
                .HasColumnName("mGRNCons");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Trrate)
                .HasColumnType("money")
                .HasColumnName("trrate");
        });

        modelBuilder.Entity<VwItemConsRate2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemConsRate2");

            entity.Property(e => e.GrndateLastCons).HasColumnName("grndateLastCons");
            entity.Property(e => e.Item).HasMaxLength(50);
        });

        modelBuilder.Entity<VwItemFinalQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemFinalQty");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.OpeningValue).HasColumnType("numeric(38, 14)");
            entity.Property(e => e.PurchasedQtyProducedQty).HasColumnName("PurchasedQty/ProducedQty");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHName");
            entity.Property(e => e.Whno).HasColumnName("WHNo");
        });

        modelBuilder.Entity<VwItemLedger>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwITEM_LEDGER");

            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dept_Code");
            entity.Property(e => e.GrnDate1).HasColumnName("GRN_DATE");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRNNO");
            entity.Property(e => e.IssueQty).HasColumnName("Issue Qty");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OpeningCgsQty).HasColumnName("Opening_CGS_Qty");
            entity.Property(e => e.OpeningCgsValue).HasColumnName("Opening_CGS_Value");
            entity.Property(e => e.OpeningCgsrQty).HasColumnName("Opening_CGSR_Qty");
            entity.Property(e => e.OpeningCgsrValue).HasColumnName("Opening_CGSR_Value");
            entity.Property(e => e.OpeningDcgsQty).HasColumnName("Opening_DCGS_Qty");
            entity.Property(e => e.OpeningDcgsValue).HasColumnName("Opening_DCGS_Value");
            entity.Property(e => e.OpeningDcgsrQty).HasColumnName("Opening_DCGSR_Qty");
            entity.Property(e => e.OpeningDcgsrValue).HasColumnName("Opening_DCGSR_Value");
            entity.Property(e => e.OpeningDwcgsQty).HasColumnName("Opening_DWCGS_Qty");
            entity.Property(e => e.OpeningDwcgsValue).HasColumnName("Opening_DWCGS_Value");
            entity.Property(e => e.OpeningDwcgsrQty).HasColumnName("Opening_DWCGSR_Qty");
            entity.Property(e => e.OpeningDwcgsrValue).HasColumnName("Opening_DWCGSR_Value");
            entity.Property(e => e.OpeningGrnQty).HasColumnName("Opening_GRN_Qty");
            entity.Property(e => e.OpeningGrnValue).HasColumnName("Opening_GRN_Value");
            entity.Property(e => e.OpeningGrnrQty).HasColumnName("Opening_GRNR_Qty");
            entity.Property(e => e.OpeningGrnrValue).HasColumnName("Opening_GRNR_Value");
            entity.Property(e => e.OpeningPinQty).HasColumnName("Opening_PIN_Qty");
            entity.Property(e => e.OpeningPinValue).HasColumnName("Opening_PIN_Value");
            entity.Property(e => e.OpeningPrnQty).HasColumnName("Opening_PRN_Qty");
            entity.Property(e => e.OpeningPrnValue).HasColumnName("Opening_PRN_Value");
            entity.Property(e => e.OpeningSinQty).HasColumnName("Opening_SIN_Qty");
            entity.Property(e => e.OpeningSinValue).HasColumnName("Opening_SIN_Value");
            entity.Property(e => e.OpeningSinrQty).HasColumnName("Opening_SINR_Qty");
            entity.Property(e => e.OpeningSinrValue).HasColumnName("Opening_SINR_Value");
            entity.Property(e => e.OpeningWcgsQty).HasColumnName("Opening_WCGS_Qty");
            entity.Property(e => e.OpeningWcgsValue).HasColumnName("Opening_WCGS_Value");
            entity.Property(e => e.OpeningWcgsrQty).HasColumnName("Opening_WCGSR_Qty");
            entity.Property(e => e.OpeningWcgsrValue).HasColumnName("Opening_WCGSR_Value");
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase Qty");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentNameMain)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name Main");
            entity.Property(e => e.TotalSinValue).HasColumnName("Total_SIN_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total Value");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value).HasColumnName("VALUE");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwItemMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwITEM_Master");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.BarCodeTwo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BarCode_Two");
            entity.Property(e => e.BomUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("BOM_UOM");
            entity.Property(e => e.CaCash)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_CASH");
            entity.Property(e => e.CaCashName).HasColumnName("CA_CASH_NAME");
            entity.Property(e => e.CaConsumption)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Consumption");
            entity.Property(e => e.CaConsumptionName).HasColumnName("CA_ConsumptionName");
            entity.Property(e => e.CaConsumptionReturn)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Consumption_Return");
            entity.Property(e => e.CaConsumptionReturnName).HasColumnName("CA_Consumption_ReturnName");
            entity.Property(e => e.CaConsumptionReturnWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Consumption_Return_WS");
            entity.Property(e => e.CaConsumptionReturnWsname).HasColumnName("CA_Consumption_Return_WSName");
            entity.Property(e => e.CaConsumptionWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Consumption_WS");
            entity.Property(e => e.CaConsumptionWsname).HasColumnName("CA_Consumption_WSName");
            entity.Property(e => e.CaDiscountAllowed)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Discount_Allowed");
            entity.Property(e => e.CaDiscountAllowedName).HasColumnName("CA_Discount_AllowedName");
            entity.Property(e => e.CaDiscountAllowedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Discount_Allowed_WS");
            entity.Property(e => e.CaDiscountAllowedWsname).HasColumnName("CA_Discount_Allowed_WSName");
            entity.Property(e => e.CaDn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_DN");
            entity.Property(e => e.CaDnName).HasColumnName("CA_DN_Name");
            entity.Property(e => e.CaProduction)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Production");
            entity.Property(e => e.CaProductionName).HasColumnName("CA_ProductionName");
            entity.Property(e => e.CaProductionReturn)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Production_Return");
            entity.Property(e => e.CaProductionReturnName).HasColumnName("CA_Production_ReturnName");
            entity.Property(e => e.CaPurchase)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Purchase");
            entity.Property(e => e.CaPurchaseName).HasColumnName("CA_PurchaseName");
            entity.Property(e => e.CaPurchaseReturn)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Purchase_Return");
            entity.Property(e => e.CaPurchaseReturnName).HasColumnName("CA_Purchase_ReturnName");
            entity.Property(e => e.CaSales)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Sales");
            entity.Property(e => e.CaSalesName).HasColumnName("CA_SalesName");
            entity.Property(e => e.CaSalesReturn)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("CA_Sales_Return");
            entity.Property(e => e.CaSalesReturnName).HasColumnName("CA_Sales_ReturnName");
            entity.Property(e => e.CaSalesReturnWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Sales_Return_WS");
            entity.Property(e => e.CaSalesReturnWsname).HasColumnName("CA_Sales_Return_WSName");
            entity.Property(e => e.CaSalesWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_Sales_WS");
            entity.Property(e => e.CaSalesWsname).HasColumnName("CA_Sales_WSName");
            entity.Property(e => e.CaWci)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CA_WCI");
            entity.Property(e => e.CaWciName).HasColumnName("CA_WCI_Name");
            entity.Property(e => e.CalabourCharges)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CALabourCharges");
            entity.Property(e => e.CalabourChargesPayable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CALabourChargesPayable");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ConversionCost).HasColumnName("Conversion_Cost");
            entity.Property(e => e.DrugLicense)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FixedAssets).HasColumnName("Fixed_Assets");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Description");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemInventory).HasColumnName("ITEM_Inventory");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.ItemPurchase).HasColumnName("ITEM_Purchase");
            entity.Property(e => e.ItemSales).HasColumnName("ITEM_Sales");
            entity.Property(e => e.ItemStatus)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ITEM_Status");
            entity.Property(e => e.LeadTime)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Lead_Time");
            entity.Property(e => e.LeadTimePer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Lead_Time_Per");
            entity.Property(e => e.MinOrder1).HasColumnName("Min_Order");
            entity.Property(e => e.OrderInterval)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Order_Interval");
            entity.Property(e => e.OrderIntervalPer)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("Order_Interval_Per");
            entity.Property(e => e.ProcurmentMethod)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("Procurment_Method");
            entity.Property(e => e.ReOrder).HasColumnName("Re_Order");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.ValutionMethods)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("Valution_Methods");
            entity.Property(e => e.ValutionSystem)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Valution_System");
        });

        modelBuilder.Entity<VwItemMonthConsComp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemMonthConsComp");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_Desc");
            entity.Property(e => e.Moth).HasColumnName("moth");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwItemOpeningQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemOpeningQty");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.OpeningValue).HasColumnType("numeric(38, 14)");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
        });

        modelBuilder.Entity<VwItemPurchaseRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemPurchaseRate");

            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.Item)
                .HasMaxLength(50)
                .HasColumnName("item");
            entity.Property(e => e.MaxGrn)
                .HasMaxLength(5)
                .HasColumnName("maxGRN");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.Rate)
                .HasColumnType("money")
                .HasColumnName("rate");
        });

        modelBuilder.Entity<VwItemPurchaseRate1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemPurchaseRate1");

            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.MGrn)
                .HasMaxLength(5)
                .HasColumnName("mGRN");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<VwItemPurchaseRate2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemPurchaseRate2");

            entity.Property(e => e.Item).HasMaxLength(50);
            entity.Property(e => e.MaxGrn)
                .HasMaxLength(5)
                .HasColumnName("maxGRN");
        });

        modelBuilder.Entity<VwItemPurchaseRateAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemPurchaseRateAll");

            entity.Property(e => e.Abbr)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.Item)
                .HasMaxLength(50)
                .HasColumnName("item");
            entity.Property(e => e.MaxGrn)
                .HasMaxLength(5)
                .HasColumnName("maxGRN");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("party");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.Rate)
                .HasColumnType("money")
                .HasColumnName("rate");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
        });

        modelBuilder.Entity<VwItemPurchaseRateAll1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemPurchaseRateAll1");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.MGrn)
                .HasMaxLength(5)
                .HasColumnName("mGRN");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("party");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<VwItemPurchaseRateAll2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemPurchaseRateAll2");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Item).HasMaxLength(50);
            entity.Property(e => e.MaxGrn)
                .HasMaxLength(5)
                .HasColumnName("maxGRN");
        });

        modelBuilder.Entity<VwItemRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemRate");

            entity.Property(e => e.Code)
                .HasMaxLength(50)
                .HasColumnName("code");
            entity.Property(e => e.Desc)
                .HasMaxLength(250)
                .HasColumnName("desc");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.Rate)
                .HasColumnType("money")
                .HasColumnName("RATE");
            entity.Property(e => e.Unit)
                .HasMaxLength(10)
                .HasColumnName("unit");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwItemRate1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemRate1");

            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwItemRateHist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemRateHist");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("grnno");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("party");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
        });

        modelBuilder.Entity<VwItemRateHistView>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemRateHistView");

            entity.Property(e => e.DocNo)
                .HasMaxLength(5)
                .HasColumnName("Doc No");
            entity.Property(e => e.Item).HasMaxLength(50);
            entity.Property(e => e.Party).HasMaxLength(50);
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwItemReconcilation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemReconcilation");

            entity.Property(e => e.CgsQty).HasColumnName("CGS_Qty");
            entity.Property(e => e.CgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("CGS_Value");
            entity.Property(e => e.CgsrQty).HasColumnName("CGSR_Qty");
            entity.Property(e => e.CgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("CGSR_Value");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.DcgsQty).HasColumnName("DCGS_Qty");
            entity.Property(e => e.DcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DCGS_Value");
            entity.Property(e => e.DcgsrQty).HasColumnName("DCGSR_Qty");
            entity.Property(e => e.DcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DCGSR_Value");
            entity.Property(e => e.DsQty).HasColumnName("DS_Qty");
            entity.Property(e => e.DsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DS_Value");
            entity.Property(e => e.DwcgsQty).HasColumnName("DWCGS_Qty");
            entity.Property(e => e.DwcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DWCGS_Value");
            entity.Property(e => e.DwcgsrQty).HasColumnName("DWCGSR_Qty");
            entity.Property(e => e.DwcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DWCGSR_Value");
            entity.Property(e => e.GrnQty).HasColumnName("GRN_Qty");
            entity.Property(e => e.GrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("GRN_Value");
            entity.Property(e => e.GrnrQty).HasColumnName("GRNR_Qty");
            entity.Property(e => e.GrnrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("GRNR_Value");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.OpeningCgsQty).HasColumnName("Opening_CGS_Qty");
            entity.Property(e => e.OpeningCgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_CGS_Value");
            entity.Property(e => e.OpeningCgsrQty).HasColumnName("Opening_CGSR_Qty");
            entity.Property(e => e.OpeningCgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_CGSR_Value");
            entity.Property(e => e.OpeningDcgsQty).HasColumnName("Opening_DCGS_Qty");
            entity.Property(e => e.OpeningDcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DCGS_Value");
            entity.Property(e => e.OpeningDcgsrQty).HasColumnName("Opening_DCGSR_Qty");
            entity.Property(e => e.OpeningDcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DCGSR_Value");
            entity.Property(e => e.OpeningDsQty).HasColumnName("Opening_DS_Qty");
            entity.Property(e => e.OpeningDsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DS_Value");
            entity.Property(e => e.OpeningDwcgsQty).HasColumnName("Opening_DWCGS_Qty");
            entity.Property(e => e.OpeningDwcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DWCGS_Value");
            entity.Property(e => e.OpeningDwcgsrQty).HasColumnName("Opening_DWCGSR_Qty");
            entity.Property(e => e.OpeningDwcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DWCGSR_Value");
            entity.Property(e => e.OpeningGrnQty).HasColumnName("Opening_GRN_Qty");
            entity.Property(e => e.OpeningGrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_GRN_Value");
            entity.Property(e => e.OpeningGrnrQty).HasColumnName("Opening_GRNR_Qty");
            entity.Property(e => e.OpeningGrnrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_GRNR_Value");
            entity.Property(e => e.OpeningPinQty).HasColumnName("Opening_PIN_Qty");
            entity.Property(e => e.OpeningPinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_PIN_Value");
            entity.Property(e => e.OpeningPrnQty).HasColumnName("Opening_PRN_Qty");
            entity.Property(e => e.OpeningPrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_PRN_Value");
            entity.Property(e => e.OpeningSinQty).HasColumnName("Opening_SIN_Qty");
            entity.Property(e => e.OpeningSinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_SIN_Value");
            entity.Property(e => e.OpeningSinrQty).HasColumnName("Opening_SINR_Qty");
            entity.Property(e => e.OpeningSinrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_SINR_Value");
            entity.Property(e => e.OpeningWcgsQty).HasColumnName("Opening_WCGS_Qty");
            entity.Property(e => e.OpeningWcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_WCGS_Value");
            entity.Property(e => e.OpeningWcgsrQty).HasColumnName("Opening_WCGSR_Qty");
            entity.Property(e => e.OpeningWcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_WCGSR_Value");
            entity.Property(e => e.PinQty).HasColumnName("PIN_Qty");
            entity.Property(e => e.PinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("PIN_Value");
            entity.Property(e => e.PrnQty).HasColumnName("PRN_Qty");
            entity.Property(e => e.PrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("PRN_Value");
            entity.Property(e => e.SinQty).HasColumnName("SIN_Qty");
            entity.Property(e => e.SinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("SIN_Value");
            entity.Property(e => e.SinrQty).HasColumnName("SINR_Qty");
            entity.Property(e => e.SinrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("SINR_Value");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WcgsQty).HasColumnName("WCGS_Qty");
            entity.Property(e => e.WcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("WCGS_Value");
            entity.Property(e => e.WcgsrQty).HasColumnName("WCGSR_Qty");
            entity.Property(e => e.WcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("WCGSR_Value");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
        });

        modelBuilder.Entity<VwItemReconciliation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemReconciliation");

            entity.Property(e => e.CgsQty).HasColumnName("CGS_Qty");
            entity.Property(e => e.CgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("CGS_Value");
            entity.Property(e => e.CgsrQty).HasColumnName("CGSR_Qty");
            entity.Property(e => e.CgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("CGSR_Value");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.DcgsQty).HasColumnName("DCGS_Qty");
            entity.Property(e => e.DcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DCGS_Value");
            entity.Property(e => e.DcgsrQty).HasColumnName("DCGSR_Qty");
            entity.Property(e => e.DcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DCGSR_Value");
            entity.Property(e => e.DwcgsQty).HasColumnName("DWCGS_Qty");
            entity.Property(e => e.DwcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DWCGS_Value");
            entity.Property(e => e.DwcgsrQty).HasColumnName("DWCGSR_Qty");
            entity.Property(e => e.DwcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DWCGSR_Value");
            entity.Property(e => e.GrnQty).HasColumnName("GRN_Qty");
            entity.Property(e => e.GrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("GRN_Value");
            entity.Property(e => e.GrnrQty).HasColumnName("GRNR_Qty");
            entity.Property(e => e.GrnrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("GRNR_Value");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Opening).HasColumnType("numeric(38, 14)");
            entity.Property(e => e.OpeningCgsQty).HasColumnName("Opening_CGS_Qty");
            entity.Property(e => e.OpeningCgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_CGS_Value");
            entity.Property(e => e.OpeningCgsrQty).HasColumnName("Opening_CGSR_Qty");
            entity.Property(e => e.OpeningCgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_CGSR_Value");
            entity.Property(e => e.OpeningDcgsQty).HasColumnName("Opening_DCGS_Qty");
            entity.Property(e => e.OpeningDcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DCGS_Value");
            entity.Property(e => e.OpeningDcgsrQty).HasColumnName("Opening_DCGSR_Qty");
            entity.Property(e => e.OpeningDcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DCGSR_Value");
            entity.Property(e => e.OpeningDwcgsQty).HasColumnName("Opening_DWCGS_Qty");
            entity.Property(e => e.OpeningDwcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DWCGS_Value");
            entity.Property(e => e.OpeningDwcgsrQty).HasColumnName("Opening_DWCGSR_Qty");
            entity.Property(e => e.OpeningDwcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DWCGSR_Value");
            entity.Property(e => e.OpeningGrnQty).HasColumnName("Opening_GRN_Qty");
            entity.Property(e => e.OpeningGrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_GRN_Value");
            entity.Property(e => e.OpeningGrnrQty).HasColumnName("Opening_GRNR_Qty");
            entity.Property(e => e.OpeningGrnrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_GRNR_Value");
            entity.Property(e => e.OpeningPinQty).HasColumnName("Opening_PIN_Qty");
            entity.Property(e => e.OpeningPinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_PIN_Value");
            entity.Property(e => e.OpeningPrnQty).HasColumnName("Opening_PRN_Qty");
            entity.Property(e => e.OpeningPrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_PRN_Value");
            entity.Property(e => e.OpeningSinQty).HasColumnName("Opening_SIN_Qty");
            entity.Property(e => e.OpeningSinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_SIN_Value");
            entity.Property(e => e.OpeningSinrQty).HasColumnName("Opening_SINR_Qty");
            entity.Property(e => e.OpeningSinrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_SINR_Value");
            entity.Property(e => e.OpeningWcgsQty).HasColumnName("Opening_WCGS_Qty");
            entity.Property(e => e.OpeningWcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_WCGS_Value");
            entity.Property(e => e.OpeningWcgsrQty).HasColumnName("Opening_WCGSR_Qty");
            entity.Property(e => e.OpeningWcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_WCGSR_Value");
            entity.Property(e => e.PinQty).HasColumnName("PIN_Qty");
            entity.Property(e => e.PinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("PIN_Value");
            entity.Property(e => e.PrnQty).HasColumnName("PRN_Qty");
            entity.Property(e => e.PrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("PRN_Value");
            entity.Property(e => e.SinQty).HasColumnName("SIN_Qty");
            entity.Property(e => e.SinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("SIN_Value");
            entity.Property(e => e.SinrQty).HasColumnName("SINR_Qty");
            entity.Property(e => e.SinrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("SINR_Value");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WcgsQty).HasColumnName("WCGS_Qty");
            entity.Property(e => e.WcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("WCGS_Value");
            entity.Property(e => e.WcgsrQty).HasColumnName("WCGSR_Qty");
            entity.Property(e => e.WcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("WCGSR_Value");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwItemReconciliationGroupWise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemReconciliationGroupWise");

            entity.Property(e => e.CgsQty).HasColumnName("CGS_Qty");
            entity.Property(e => e.CgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("CGS_Value");
            entity.Property(e => e.CgsrQty).HasColumnName("CGSR_Qty");
            entity.Property(e => e.CgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("CGSR_Value");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DcgsQty).HasColumnName("DCGS_Qty");
            entity.Property(e => e.DcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DCGS_Value");
            entity.Property(e => e.DcgsrQty).HasColumnName("DCGSR_Qty");
            entity.Property(e => e.DcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DCGSR_Value");
            entity.Property(e => e.DsQty).HasColumnName("DS_Qty");
            entity.Property(e => e.DsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DS_Value");
            entity.Property(e => e.DwcgsQty).HasColumnName("DWCGS_Qty");
            entity.Property(e => e.DwcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DWCGS_Value");
            entity.Property(e => e.DwcgsrQty).HasColumnName("DWCGSR_Qty");
            entity.Property(e => e.DwcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("DWCGSR_Value");
            entity.Property(e => e.GrnQty).HasColumnName("GRN_Qty");
            entity.Property(e => e.GrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("GRN_Value");
            entity.Property(e => e.GrnrQty).HasColumnName("GRNR_Qty");
            entity.Property(e => e.GrnrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("GRNR_Value");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.OpeningCgsQty).HasColumnName("Opening_CGS_Qty");
            entity.Property(e => e.OpeningCgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_CGS_Value");
            entity.Property(e => e.OpeningCgsrQty).HasColumnName("Opening_CGSR_Qty");
            entity.Property(e => e.OpeningCgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_CGSR_Value");
            entity.Property(e => e.OpeningDcgsQty).HasColumnName("Opening_DCGS_Qty");
            entity.Property(e => e.OpeningDcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DCGS_Value");
            entity.Property(e => e.OpeningDcgsrQty).HasColumnName("Opening_DCGSR_Qty");
            entity.Property(e => e.OpeningDcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DCGSR_Value");
            entity.Property(e => e.OpeningDsQty).HasColumnName("Opening_DS_Qty");
            entity.Property(e => e.OpeningDsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DS_Value");
            entity.Property(e => e.OpeningDwcgsQty).HasColumnName("Opening_DWCGS_Qty");
            entity.Property(e => e.OpeningDwcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DWCGS_Value");
            entity.Property(e => e.OpeningDwcgsrQty).HasColumnName("Opening_DWCGSR_Qty");
            entity.Property(e => e.OpeningDwcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_DWCGSR_Value");
            entity.Property(e => e.OpeningGrnQty).HasColumnName("Opening_GRN_Qty");
            entity.Property(e => e.OpeningGrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_GRN_Value");
            entity.Property(e => e.OpeningGrnrQty).HasColumnName("Opening_GRNR_Qty");
            entity.Property(e => e.OpeningGrnrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_GRNR_Value");
            entity.Property(e => e.OpeningPinQty).HasColumnName("Opening_PIN_Qty");
            entity.Property(e => e.OpeningPinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_PIN_Value");
            entity.Property(e => e.OpeningPrnQty).HasColumnName("Opening_PRN_Qty");
            entity.Property(e => e.OpeningPrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_PRN_Value");
            entity.Property(e => e.OpeningSinQty).HasColumnName("Opening_SIN_Qty");
            entity.Property(e => e.OpeningSinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_SIN_Value");
            entity.Property(e => e.OpeningSinrQty).HasColumnName("Opening_SINR_Qty");
            entity.Property(e => e.OpeningSinrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_SINR_Value");
            entity.Property(e => e.OpeningWcgsQty).HasColumnName("Opening_WCGS_Qty");
            entity.Property(e => e.OpeningWcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_WCGS_Value");
            entity.Property(e => e.OpeningWcgsrQty).HasColumnName("Opening_WCGSR_Qty");
            entity.Property(e => e.OpeningWcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Opening_WCGSR_Value");
            entity.Property(e => e.PinQty).HasColumnName("PIN_Qty");
            entity.Property(e => e.PinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("PIN_Value");
            entity.Property(e => e.PrnQty).HasColumnName("PRN_Qty");
            entity.Property(e => e.PrnValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("PRN_Value");
            entity.Property(e => e.SinQty).HasColumnName("SIN_Qty");
            entity.Property(e => e.SinValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("SIN_Value");
            entity.Property(e => e.SinrQty).HasColumnName("SINR_Qty");
            entity.Property(e => e.SinrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("SINR_Value");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WcgsQty).HasColumnName("WCGS_Qty");
            entity.Property(e => e.WcgsValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("WCGS_Value");
            entity.Property(e => e.WcgsrQty).HasColumnName("WCGSR_Qty");
            entity.Property(e => e.WcgsrValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("WCGSR_Value");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
        });

        modelBuilder.Entity<VwItemRunningQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemRunningQty");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IssueValue).HasColumnType("numeric(38, 14)");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.PurchaseValueProducedValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("PurchaseValue/ProducedValue");
            entity.Property(e => e.PurchasedQtyProducedQty).HasColumnName("PurchasedQty/ProducedQty");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
        });

        modelBuilder.Entity<VwItemUom>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemUOM");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.BarCodeTwo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BarCode_Two");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.IsPrimary).HasColumnName("isPrimary");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Description");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.ItemStatus)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ITEM_Status");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WholeSaleRate).HasColumnName("WholeSale_Rate");
        });

        modelBuilder.Entity<VwItemUomsubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemUOMSubSegment");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.BarCodeTwo)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BarCode_Two");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.IsPrimary).HasColumnName("isPrimary");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Description");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.ItemStatus)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ITEM_Status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WholeSaleRate).HasColumnName("WholeSale_Rate");
        });

        modelBuilder.Entity<VwItemWarehouseNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwItemWarehouseNew");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.IsPrimary).HasColumnName("isPrimary");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemDescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Description");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.ItemStatus)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ITEM_Status");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SKU");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whno).HasColumnName("WHNo");
            entity.Property(e => e.WholeSaleRate).HasColumnName("WholeSale_Rate");
        });

        modelBuilder.Entity<VwItemWiseConsSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemWiseConsSum");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_Desc");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("it_partno");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwItemWridetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemWRIDetail");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("grnno");
            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("issuev");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Opdate).HasColumnName("opdate");
            entity.Property(e => e.Party)
                .HasMaxLength(50)
                .HasColumnName("party");
            entity.Property(e => e.Receipt)
                .HasColumnType("money")
                .HasColumnName("receipt");
            entity.Property(e => e.ReceiptV)
                .HasColumnType("money")
                .HasColumnName("receiptV");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("type");
        });

        modelBuilder.Entity<VwItemchart>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwITEMCHART");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
        });

        modelBuilder.Entity<VwItemledger1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwItemledger");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.CreationDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("creationDate");
            entity.Property(e => e.DcDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DC Date");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dept_Code");
            entity.Property(e => e.DetailSno).HasColumnName("Detail_Sno");
            entity.Property(e => e.GrnDate1).HasColumnName("GRN_Date");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno).HasColumnName("GRNNO");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IgpDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IGP Date");
            entity.Property(e => e.Igpno).HasColumnName("igpno");
            entity.Property(e => e.IssueQty).HasColumnName("Issue Qty");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.PoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PO Date");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase Qty");
            entity.Property(e => e.Rate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("rate");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.SubSegmentCode).HasColumnName("Sub Segment Code");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.SubSegmentNameMain)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name Main");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TotalSinValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_SIN_Value");
            entity.Property(e => e.TotalValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total Value");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("VALUE");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.WarehouseFromToName)
                .HasMaxLength(104)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwItemwarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwITEMWarehouse");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Whaddress)
                .IsUnicode(false)
                .HasColumnName("whaddress");
            entity.Property(e => e.Whlocation)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("whlocation");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whno).HasColumnName("whno");
        });

        modelBuilder.Entity<VwJobOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJobOrder");

            entity.Property(e => e.Code)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Contact_no");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwJobOrderSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJobOrderSubSegment");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.JobOrderDate)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwJoborderDriverLoader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwJoborder_Driver_Loader");

            entity.Property(e => e.DriverCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Driver Code");
            entity.Property(e => e.DriverLicenseExpiryDate).HasColumnName("Driver License Expiry Date");
            entity.Property(e => e.DriverLicenseType)
                .IsUnicode(false)
                .HasColumnName("Driver License Type");
            entity.Property(e => e.DriverName)
                .IsUnicode(false)
                .HasColumnName("Driver Name");
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Driver Phone No");
        });

        modelBuilder.Entity<VwLatePaymentCharge>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLatePaymentCharges");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Dealer)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferringType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwLatePaymentChargesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLatePaymentChargesDetail");

            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DueAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LateChargesPaid).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesPayable).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LatePaymentChargesStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwLcCfLandedCost>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLC_CF_LandedCost");

            entity.Property(e => e.ActualPayable).HasColumnName("Actual_Payable");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CfDate).HasColumnName("CF_date");
            entity.Property(e => e.CfDesc)
                .IsUnicode(false)
                .HasColumnName("CF_desc");
            entity.Property(e => e.CfLccode).HasColumnName("CF_LCCode");
            entity.Property(e => e.CfPartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CF_PartyCode");
            entity.Property(e => e.CfsrNo).HasColumnName("CFSr_no");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LcName)
                .IsUnicode(false)
                .HasColumnName("LC_Name");
            entity.Property(e => e.ProvisionalPayable).HasColumnName("Provisional_Payable");
        });

        modelBuilder.Entity<VwLcLandedCost1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLC_LandedCost");

            entity.Property(e => e.AmountPayable).HasColumnName("Amount_payable");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.Description)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("description");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.LcCode).HasColumnName("LC_Code");
            entity.Property(e => e.LcName)
                .IsUnicode(false)
                .HasColumnName("LC_Name");
            entity.Property(e => e.LccsrNo).HasColumnName("LCCSr_no");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Party_Code");
        });

        modelBuilder.Entity<VwLcwithPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLCWithPO");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderedQty).HasColumnName("Ordered_Qty");
            entity.Property(e => e.PoDate).HasColumnName("PO_DATE");
            entity.Property(e => e.PoExchangerate).HasColumnName("PO_exchangerate");
            entity.Property(e => e.PoNo).HasColumnName("PO_NO");
            entity.Property(e => e.PoQty).HasColumnName("PO_QTY");
            entity.Property(e => e.PoRate).HasColumnName("PO_RATE");
            entity.Property(e => e.PoSrno1).HasColumnName("PO_Srno");
            entity.Property(e => e.Popivusd).HasColumnName("POPIVusd");
            entity.Property(e => e.PosrNo).HasColumnName("POSr_no");
            entity.Property(e => e.PosubSegmentId).HasColumnName("POSubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwLead>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLeads");

            entity.Property(e => e.ActivityType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.AssignUserId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("AssignUserID");
            entity.Property(e => e.BookingType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BookingTypeId).HasColumnName("BookingTypeID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Company)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.Customer).HasMaxLength(500);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateOnly).HasColumnType("datetime");
            entity.Property(e => e.DropComment).HasMaxLength(500);
            entity.Property(e => e.DropComments)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ManualSize)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.NextActivity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Occupation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PlserialNo).HasColumnName("PLSerialNo");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SizeId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SizeID");
            entity.Property(e => e.SourceOfReference)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.WhatsAppNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwLeaderUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLeaderUsers");

            entity.Property(e => e.LeaderUserId).HasColumnName("LeaderUserID");
            entity.Property(e => e.LeaderUserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("User_id");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
        });

        modelBuilder.Entity<VwLeadsActivitySummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLeadsActivitySummary");

            entity.Property(e => e.ActiveDropRatio).HasMaxLength(4000);
            entity.Property(e => e.Assigned).HasMaxLength(4000);
            entity.Property(e => e.AvgSalesDays).HasMaxLength(4000);
            entity.Property(e => e.AvgVisitDays).HasMaxLength(4000);
            entity.Property(e => e.AvgvisitFinalized)
                .HasMaxLength(4000)
                .HasColumnName("avgvisitFinalized");
            entity.Property(e => e.ConversionRatio).HasMaxLength(4000);
            entity.Property(e => e.FollowupDays)
                .HasMaxLength(4000)
                .HasColumnName("followupDays");
            entity.Property(e => e.PendingDropRatio).HasMaxLength(4000);
            entity.Property(e => e.ResponseTime).HasMaxLength(4000);
            entity.Property(e => e.Tmleads)
                .HasMaxLength(4000)
                .HasColumnName("TMLeads");
            entity.Property(e => e.TotalAssignedLeads).HasMaxLength(4000);
            entity.Property(e => e.TotalLeads).HasMaxLength(4000);
            entity.Property(e => e.UnRegistered).HasMaxLength(4000);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwLeadsAssignmentSetup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLeadsAssignmentSetup");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Project)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwLeadsAssignmentSetupDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLeadsAssignmentSetupDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<VwLeadsHisotry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLeadsHisotry");

            entity.Property(e => e.BookingType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingTypeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BookingTypeID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.Customer)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DropComment)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ProjectID");
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SizeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SizeID");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<VwLeaveApplication>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLeaveApplication");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwLeaveApplicationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLeaveApplicationDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LeaveType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LeaveTypeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwLeaveRulesSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLeaveRulesSubSegments");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwLedgOpening>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLedgOpening");

            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Opdate)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("opdate");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
        });

        modelBuilder.Entity<VwLoanAndAdvance>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLoanAndAdvances");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BranchCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Branch Code");
            entity.Property(e => e.ChequeSlipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LoanAndAdvanceSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LoanAndAdvanceTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwLoanAndAdvanceDeductionMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLoanAndAdvanceDeductionMainDetail");

            entity.Property(e => e.AdjustmentParameterCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AdjustmentRule)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<VwLoanAndAdvanceDeductionSetupDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLoanAndAdvanceDeductionSetupDetail");

            entity.Property(e => e.AdjustmentParameter)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AdjustmentParameterCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AdjustmentRule)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwLoanAndAdvanceDeductionSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLoanAndAdvanceDeductionSubSegment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwLoanAndAdvancesDeductionRule>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLoanAndAdvancesDeductionRules");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.LatypeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LATypeCode");
            entity.Property(e => e.LatypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LATypeTitle");
            entity.Property(e => e.RuleLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwLoanAndAdvancesDeductionRulesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLoanAndAdvancesDeductionRulesDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeductionFrequency)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwLoanAndAdvancesSetup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLoanAndAdvancesSetup");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Glcode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GLCode");
            entity.Property(e => e.Gldescription).HasColumnName("GLDescription");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwLoansAndAdvanceSetup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwLoansAndAdvanceSetups");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.GlCode)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Title)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwMainStoreOpening>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMainStoreOpening");

            entity.Property(e => e.Mainstore)
                .HasMaxLength(13)
                .HasColumnName("mainstore");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
        });

        modelBuilder.Entity<VwMainStoreOpeningall>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMainStoreOpeningall");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Mainstore)
                .HasMaxLength(13)
                .HasColumnName("mainstore");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
        });

        modelBuilder.Entity<VwMainStoreYearOpening>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMainStoreYearOpening");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Mainstore)
                .HasMaxLength(13)
                .HasColumnName("MAINSTORE");
            entity.Property(e => e.Opqty)
                .HasColumnType("money")
                .HasColumnName("OPQty");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("OPVALUE");
        });

        modelBuilder.Entity<VwMappingLeadsVsBooking>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMappingLeadsVsBookings");

            entity.Property(e => e.Booking)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Leads)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMaster");

            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("GRNNO");
            entity.Property(e => e.KeyField).HasMaxLength(20);
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MPono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("PARTY");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<VwMasterNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMasterNew");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("GRNNO");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(20)
                .HasColumnName("keyfield");
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .IsFixedLength()
                .HasColumnName("PARTY");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("PRTY_NAME");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<VwMaxRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMaxRate");

            entity.Property(e => e.MaxRate).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<VwMaxRateHist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMaxRateHist");

            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("grnno");
            entity.Property(e => e.MaxRate).HasColumnType("money");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<VwMaxRateHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMaxRateHistory");

            entity.Property(e => e.Grndatemax).HasColumnName("grndatemax");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Maxrate)
                .HasColumnType("money")
                .HasColumnName("maxrate");
            entity.Property(e => e.Partymax)
                .HasMaxLength(31)
                .IsFixedLength()
                .HasColumnName("partymax");
            entity.Property(e => e.TrGrnnomaxx)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("tr_grnnomaxx");
        });

        modelBuilder.Entity<VwMchWmonthComp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMchWMonthComp");

            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("mch_desc");
            entity.Property(e => e.Moth).HasColumnName("moth");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("tr_mch");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwMchWmonthComp1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMchWMonthComp1");

            entity.Property(e => e.Main)
                .HasMaxLength(5)
                .HasColumnName("main");
            entity.Property(e => e.Moth).HasColumnName("moth");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwMchconsSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMCHConsSum");

            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("mch_desc");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("tr_mch");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwMchitemWisSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMCHItemWisSum");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("mch_desc");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("tr_mch");
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwMchwisSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMCHWisSum");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("it_partno");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwMinMaxRateHist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMinMaxRateHist");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Maxgrndate).HasColumnName("maxgrndate");
            entity.Property(e => e.Maxgrnno)
                .HasMaxLength(5)
                .HasColumnName("maxgrnno");
            entity.Property(e => e.Maxpname)
                .HasMaxLength(50)
                .HasColumnName("maxpname");
            entity.Property(e => e.Maxrate)
                .HasColumnType("money")
                .HasColumnName("maxrate");
            entity.Property(e => e.Mingrndate).HasColumnName("mingrndate");
            entity.Property(e => e.Mingrnno)
                .HasMaxLength(5)
                .HasColumnName("mingrnno");
            entity.Property(e => e.Minpname)
                .HasMaxLength(50)
                .HasColumnName("minpname");
            entity.Property(e => e.Minrate)
                .HasColumnType("money")
                .HasColumnName("minrate");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<VwMinMaxRateHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMinMaxRateHistory");

            entity.Property(e => e.Grndatemax).HasColumnName("grndatemax");
            entity.Property(e => e.Grndateminn).HasColumnName("grndateminn");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Maxrateact)
                .HasColumnType("money")
                .HasColumnName("maxrateact");
            entity.Property(e => e.Minrateact)
                .HasColumnType("money")
                .HasColumnName("minrateact");
            entity.Property(e => e.Partymax)
                .HasMaxLength(31)
                .HasColumnName("partymax");
            entity.Property(e => e.Partymin)
                .HasMaxLength(31)
                .HasColumnName("partymin");
            entity.Property(e => e.TrGrnnomaxx)
                .HasMaxLength(5)
                .HasColumnName("tr_grnnomaxx");
            entity.Property(e => e.TrGrnnominn)
                .HasMaxLength(5)
                .HasColumnName("tr_grnnominn");
        });

        modelBuilder.Entity<VwMinRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMinRate");

            entity.Property(e => e.MinRate).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<VwMinRateHist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMinRateHist");

            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("grnno");
            entity.Property(e => e.MinRate).HasColumnType("money");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<VwMinRateHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMinRateHistory");

            entity.Property(e => e.GrndateMinn).HasColumnName("grndateMinn");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Minrate)
                .HasColumnType("money")
                .HasColumnName("minrate");
            entity.Property(e => e.PartyMin)
                .HasMaxLength(31)
                .IsFixedLength()
                .HasColumnName("partyMin");
            entity.Property(e => e.TrGrnnoMinn)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("tr_grnnoMinn");
        });

        modelBuilder.Entity<VwMisDailyStsum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMisDailySTSum");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.Mainstore).HasMaxLength(13);
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
            entity.Property(e => e.Receipt).HasColumnType("money");
        });

        modelBuilder.Entity<VwMisDailyStsum1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMisDailySTSum1");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.Main).HasMaxLength(13);
            entity.Property(e => e.Receipt).HasColumnType("money");
        });

        modelBuilder.Entity<VwMisDailyStsum1Oth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMisDailyStsum1Oth");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.Main).HasMaxLength(50);
            entity.Property(e => e.Receipt).HasColumnType("money");
        });

        modelBuilder.Entity<VwMisOverStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMisOverStock");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwMisOverStock1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMisOverStock1");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwMisStockSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMisStockSum");

            entity.Property(e => e.Capitalized).HasColumnType("money");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Consumpumtion).HasColumnType("money");
            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("ISSUE");
            entity.Property(e => e.Main)
                .HasMaxLength(13)
                .HasColumnName("MAIN");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("OPVALUE");
            entity.Property(e => e.Receipt)
                .HasColumnType("money")
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Sale)
                .HasColumnType("money")
                .HasColumnName("SALE");
        });

        modelBuilder.Entity<VwMisStockSum1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMisStockSum1");

            entity.Property(e => e.Capitalized).HasColumnType("money");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Consumpumtion).HasColumnType("money");
            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("ISSUE");
            entity.Property(e => e.Mainstore)
                .HasMaxLength(13)
                .HasColumnName("MAINSTORE");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("OPVALUE");
            entity.Property(e => e.Receipt)
                .HasColumnType("money")
                .HasColumnName("RECEIPT");
            entity.Property(e => e.Sale)
                .HasColumnType("money")
                .HasColumnName("SALE");
        });

        modelBuilder.Entity<VwMonth1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMonth1");

            entity.Property(e => e.Issueing)
                .HasColumnType("money")
                .HasColumnName("ISSUEING");
            entity.Property(e => e.Main)
                .HasMaxLength(13)
                .HasColumnName("MAIN");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("OPENING");
            entity.Property(e => e.Purchase)
                .HasColumnType("money")
                .HasColumnName("PURCHASE");
        });

        modelBuilder.Entity<VwMonth2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMonth2");

            entity.Property(e => e.Issueing)
                .HasColumnType("money")
                .HasColumnName("ISSUEING");
            entity.Property(e => e.Main)
                .HasMaxLength(13)
                .HasColumnName("MAIN");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("OPENING");
            entity.Property(e => e.Purchase)
                .HasColumnType("money")
                .HasColumnName("PURCHASE");
        });

        modelBuilder.Entity<VwMonthCon>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMonthCons");

            entity.Property(e => e.Grmonth).HasColumnName("grmonth");
            entity.Property(e => e.Mqty).HasColumnType("money");
            entity.Property(e => e.Mvalue).HasColumnType("money");
        });

        modelBuilder.Entity<VwNewOpportunity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwNewOpportunity");

            entity.Property(e => e.AssignedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CampaignName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompanyName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CustomerName).HasMaxLength(500);
            entity.Property(e => e.DropComments)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Responded)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(14)
                .IsUnicode(false);
            entity.Property(e => e.UploadedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwOfferForSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOfferForSales");

            entity.Property(e => e.Address)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasMaxLength(4000);
            entity.Property(e => e.OriginalDate).HasColumnType("datetime");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PropertyType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwOnlineBooking>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOnlineBooking");

            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingCategory)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Date)
                .HasMaxLength(4000)
                .HasColumnName("date");
            entity.Property(e => e.Imgurl)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("imgurl");
            entity.Property(e => e.OriginalDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwOpenTrading>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOpenTrading");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractFy)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ContractFY");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.OtserialNo).HasColumnName("OTSerialNo");
            entity.Property(e => e.Otsrno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OTSrno");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PurchaserCNIC");
            entity.Property(e => e.PurchaserDob).HasColumnName("PurchaserDOB");
            entity.Property(e => e.PurchaserFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonThree)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonThreeName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonTwo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonTwoName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SellerAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SellerCNIC");
            entity.Property(e => e.SellerDob).HasColumnName("SellerDOB");
            entity.Property(e => e.SellerFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Share)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Strno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STRNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Types)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwOpenTradingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOpenTradingDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookingType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContractFy)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ContractFY");
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MainRemarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MainType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OtserialNo).HasColumnName("OTSerialNo");
            entity.Property(e => e.Otsrno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OTSrno");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PurchaserCNIC");
            entity.Property(e => e.PurchaserDob).HasColumnName("PurchaserDOB");
            entity.Property(e => e.PurchaserFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PurchaserType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferingPersonName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonThree)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonThreeName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonTwo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonTwoName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SellerAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCellNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SellerCNIC");
            entity.Property(e => e.SellerDob).HasColumnName("SellerDOB");
            entity.Property(e => e.SellerFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerResidentStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SellerType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Share)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Strno)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("STRNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Types)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwOutstandingChartBp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOutstandingChartBP");

            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Party_type");
        });

        modelBuilder.Entity<VwOverConsumption>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwOverConsumption");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Qty).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwPartialAdjustment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartialAdjustments");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwPartialAdjustmentPaymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartialAdjustmentPaymentDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AdjustmentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequesSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClearingSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DishonouredChequeBankId).HasColumnName("DishonouredChequeBankID");
            entity.Property(e => e.DishonouredChequeBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DishonouredChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Narration)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPartialAdjustmentReceiptDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartialAdjustmentReceiptDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.AdjustmentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequesNewSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChequesSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClearingSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DishonouredChequeBankId).HasColumnName("DishonouredChequeBankID");
            entity.Property(e => e.DishonouredChequeBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DishonouredChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Narration)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPartialReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartialReceipts");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DocumentNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocumentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PaymentTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalesManId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SalesManID");
            entity.Property(e => e.SalesManName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPartyAging>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartyAging");

            entity.Property(e => e.Accept)
                .HasColumnType("money")
                .HasColumnName("accept");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .IsFixedLength()
                .HasColumnName("party");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
        });

        modelBuilder.Entity<VwPartyDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwParty_Detail");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUser).HasColumnName("Modified_User");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vtype)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPartyDetail1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartyDetail");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("GRNNO");
            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("it_avgval");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("it_cgl");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasColumnType("ntext")
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval)
                .HasColumnType("money")
                .HasColumnName("it_opagval");
            entity.Property(e => e.ItOpbal)
                .HasColumnType("money")
                .HasColumnName("it_opbal");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("it_pgl");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(20)
                .HasColumnName("keyfield");
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MPono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("PARTY");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("PRTY_NAME");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrCartrage)
                .HasColumnType("money")
                .HasColumnName("tr_cartrage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("tr_fr");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("tr_other");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_Qty");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("WO_DESC");
        });

        modelBuilder.Entity<VwPartyDetailCashPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwParty_Detail_CashPayment");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUser).HasColumnName("Modified_User");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vkey)
                .HasMaxLength(56)
                .IsUnicode(false)
                .HasColumnName("vkey");
            entity.Property(e => e.Vtype)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPartyPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartyPayment");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApaccrualBalance).HasColumnName("APAccrualBalance");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.Bptype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPType");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentAgainst)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SlipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwPartyPaymentCheque>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartyPaymentCheques");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Docno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOCNo");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaidVia)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPartyPaymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartyPaymentDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Ipdate).HasColumnName("IPDate");
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.Ipsno).HasColumnName("IPSNo");
            entity.Property(e => e.Ipsrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPSrno");
            entity.Property(e => e.IpsubSegment).HasColumnName("IPSubSegment");
            entity.Property(e => e.IpsubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IPSubSegmentName");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Vin)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VIN");
            entity.Property(e => e.Vindate).HasColumnName("VINDATE");
        });

        modelBuilder.Entity<VwPartyPaymentMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Party_Payment_MainDetail");

            entity.Property(e => e.AcNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ac_no");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AdvanceBal).HasColumnName("advance_bal");
            entity.Property(e => e.AdvanceIncomeTax).HasColumnName("advance_income_tax");
            entity.Property(e => e.AmountPaid).HasColumnName("amount_paid");
            entity.Property(e => e.AmountPayable).HasColumnName("amount_payable");
            entity.Property(e => e.AmountToBePaid).HasColumnName("Amount_To_Be_Paid");
            entity.Property(e => e.ApAccuralBal).HasColumnName("ap_accural_bal");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.BpType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bp_type");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bpcode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CashDiscount).HasColumnName("cash_discount");
            entity.Property(e => e.CheqAmount).HasColumnName("cheq_amount");
            entity.Property(e => e.CheqSlipDate).HasColumnName("cheq_slip_date");
            entity.Property(e => e.CheqSlipNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheq_slip_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.DocDate).HasColumnName("doc_date");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("doc_no");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("doc_type");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.Expr1).HasMaxLength(50);
            entity.Property(e => e.Expr2).HasMaxLength(50);
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InvoiceBal).HasColumnName("invoice_bal");
            entity.Property(e => e.InvoiceValue).HasColumnName("invoice_value");
            entity.Property(e => e.IpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IP_No");
            entity.Property(e => e.NetBal).HasColumnName("net_bal");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.PaymentAgainst)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("payment_against");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("payment_mode");
            entity.Property(e => e.PaymentOnAccount).HasColumnName("payment_on_account");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PostingDate).HasColumnName("posting_date");
            entity.Property(e => e.RegisteredOfficeAdress)
                .IsUnicode(false)
                .HasColumnName("Registered_Office_Adress");
            entity.Property(e => e.SalesTax).HasColumnName("sales_tax");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SecurityBal).HasColumnName("security_bal");
            entity.Property(e => e.Select).HasColumnName("select_");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Tel1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_1");
            entity.Property(e => e.TotalPayment).HasColumnName("total_payment");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
        });

        modelBuilder.Entity<VwPartyPaymentMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartyPaymentMasterDetail");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApaccrualBalance).HasColumnName("APAccrualBalance");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bptype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BPType");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentAgainst)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SlipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentName1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegmentName");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwPartyPaymentSecurity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartyPaymentSecurity");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Spc).HasColumnName("SPC");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwPartySecurity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwParty_Security");

            entity.Property(e => e.AcNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ac_no");
            entity.Property(e => e.BpType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bp_type");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bpcode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CheqAmount).HasColumnName("cheq_amount");
            entity.Property(e => e.CheqSlipDate).HasColumnName("cheq_slip_date");
            entity.Property(e => e.CheqSlipNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cheq_slip_no");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.PaymentAgainst)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("payment_against");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("payment_mode");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.Spc).HasColumnName("SPC");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("srno");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwPartyVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartyVoucher");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CreditLimitAmount).HasColumnName("Credit_limit_Amount");
            entity.Property(e => e.Expr1).HasMaxLength(50);
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.Vtype)
                .HasMaxLength(12)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPartyVoucherDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPartyVoucherDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwPaymentPlan>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPaymentPlan");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.Bank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CDueAmount).HasColumnName("cDueAmount");
            entity.Property(e => e.CDueDate).HasColumnName("cDueDate");
            entity.Property(e => e.CPaidAmount).HasColumnName("cPaidAmount");
            entity.Property(e => e.CPaidDate).HasColumnName("cPaidDate");
            entity.Property(e => e.CPaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cPaymentMode");
            entity.Property(e => e.CReferenceNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cReferenceNo");
            entity.Property(e => e.CRemarks)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cRemarks");
            entity.Property(e => e.CType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cType");
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentDescription)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleDescription)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Psdsuk)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("psdsuk");
            entity.Property(e => e.ReceiptFrom)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPaymentPlanReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPaymentPlanReport");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DueAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NetPayableAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Psdsuk)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("psdsuk");
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalPaidAmount).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<VwPaymentVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPayment_Voucher");

            entity.Property(e => e.BpCode)
                .HasMaxLength(50)
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUser).HasColumnName("Modified_User");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vtype).HasMaxLength(10);
        });

        modelBuilder.Entity<VwPendingDeliveryOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingDeliveryOrder");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CgsValue).HasColumnName("CGS_Value");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.DeliveryAddress).IsUnicode(false);
            entity.Property(e => e.DeliveryAddress2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Do_Date");
            entity.Property(e => e.DoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.Dodate1).HasColumnName("DODate");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_Per_Unit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Particulars)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.QytCylinder).HasColumnName("Qyt_Cylinder");
            entity.Property(e => e.QytKg).HasColumnName("Qyt_Kg");
            entity.Property(e => e.QytLiter).HasColumnName("Qyt_liter");
            entity.Property(e => e.QytM3).HasColumnName("Qyt_m3");
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsFixedLength()
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdDetail).HasColumnName("SubSegment_ID_Detail");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentNameDetail)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name_Detail");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_Invoice_Value");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_ID");
        });

        modelBuilder.Entity<VwPendingFollowup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingFollowup");

            entity.Property(e => e.City)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName).HasMaxLength(500);
            entity.Property(e => e.Fdate).HasColumnName("fdate");
            entity.Property(e => e.Fdatetimes)
                .HasColumnType("datetime")
                .HasColumnName("fdatetimes");
            entity.Property(e => e.FollowUpdate).HasMaxLength(4000);
            entity.Property(e => e.Followuptime).HasMaxLength(4000);
            entity.Property(e => e.Ftime)
                .HasColumnType("datetime")
                .HasColumnName("ftime");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.SizeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SizeID");
            entity.Property(e => e.SizeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPendingGrn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingGRN");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.DocDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Doc Date");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Doc No");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Doc Type");
            entity.Property(e => e.SalesTaxReceivable).HasColumnName("Sales Tax Receivable");
            entity.Property(e => e.Status).HasMaxLength(5);
            entity.Property(e => e.SubSegmentId).HasColumnName("Sub Segment ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.TotalValue)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Total Value");
            entity.Property(e => e.Value)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPendingGrnnew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwPendingGRNNew");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BpCode1)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.BuiltyNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Builty_No");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Dcdate).HasColumnName("dcdate");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.DemandQty).HasColumnName("Demand_Qty");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dept_Code");
            entity.Property(e => e.DetailSno).HasColumnName("Detail_Sno");
            entity.Property(e => e.DetailSrno).HasColumnName("Detail_Srno");
            entity.Property(e => e.DocDate).HasColumnName("Doc Date");
            entity.Property(e => e.DocKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DocNo).HasColumnName("Doc No");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Doc Type");
            entity.Property(e => e.DrRequisition)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DR_Requisition");
            entity.Property(e => e.DrRequisitionDate).HasColumnName("DR_Requisition_Date");
            entity.Property(e => e.DrRequistionKeys)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DR_Requistion_Keys");
            entity.Property(e => e.ExciseValue).HasColumnName("Excise_Value");
            entity.Property(e => e.FreightAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.FreightType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GrnDate).HasColumnName("GRN_Date");
            entity.Property(e => e.GrnReturnNo).HasColumnName("GRN_Return_No");
            entity.Property(e => e.GrnVoucherKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRN_Voucher_Key");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.IgpKeys)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IGP_keys");
            entity.Property(e => e.Igpdate).HasColumnName("igpdate");
            entity.Property(e => e.Igpno).HasColumnName("igpno");
            entity.Property(e => e.Igpsno).HasColumnName("IGPSNo");
            entity.Property(e => e.InvoiceNo)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.IssueQty).HasColumnName("Issue_Qty");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.NetPurchaseRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Net_Purchase_Rate");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.OtherOverheads).HasColumnName("Other_Overheads");
            entity.Property(e => e.PaidBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Podate).HasColumnName("podate");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.PrimaryRate).HasColumnType("numeric(28, 14)");
            entity.Property(e => e.PrimaryUom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PrimaryUOM");
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase_Qty");
            entity.Property(e => e.QtyInStock).HasColumnName("Qty_In_Stock");
            entity.Property(e => e.Rate)
                .HasColumnType("decimal(28, 14)")
                .HasColumnName("rate");
            entity.Property(e => e.Recievername)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RemainingQty).HasColumnName("Remaining_Qty");
            entity.Property(e => e.RemainingRate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Rate");
            entity.Property(e => e.RemainingValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Value");
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("Sub Segment ID");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.ToWareHouseNo).HasColumnName("To_WareHouse_No");
            entity.Property(e => e.ToWareHouseSubSegmentId).HasColumnName("To_WareHouse_SubSegment_ID");
            entity.Property(e => e.TotalValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total Value");
            entity.Property(e => e.TotalValueSin)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_Value_SIN");
            entity.Property(e => e.TransportationCharges).HasColumnName("Transportation_Charges");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("VALUE");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.VehicleRegistration)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_registration");
            entity.Property(e => e.WarehouseSubsegmentId).HasColumnName("warehouse_Subsegment_ID");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whno).HasColumnName("WHNo");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPendingIgp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingIGP");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DiscountValue).HasColumnName("Discount_Value");
            entity.Property(e => e.DlCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DL_code");
            entity.Property(e => e.DlDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DL_date");
            entity.Property(e => e.ExciseDuty).HasColumnName("Excise_Duty");
            entity.Property(e => e.ExciseDutyValue).HasColumnName("Excise_Duty_Value");
            entity.Property(e => e.ExtraDiscount).HasColumnName("Extra_Discount");
            entity.Property(e => e.ExtraDiscountValue).HasColumnName("Extra_Discount_Value");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.IgpDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Igp_date");
            entity.Property(e => e.IgpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Igp_no");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.PoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PO_date");
            entity.Property(e => e.PoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PO_NO");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.SalesTaxValue).HasColumnName("Sales_Tax_Value");
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIgp).HasColumnName("SubSegmentIGP");
            entity.Property(e => e.SubSegmentIgpname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegmentIGPName");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TotalValue)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Total_Value");
            entity.Property(e => e.TypePo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Type_PO");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Value).HasColumnType("decimal(28, 7)");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<VwPendingIp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingIP");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Docdate).HasColumnName("DOCDate");
            entity.Property(e => e.Docno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCNo");
            entity.Property(e => e.Doctype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOCType");
            entity.Property(e => e.Freight).IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Ipdate).HasColumnName("IPDate");
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.SubSegmentIddetail).HasColumnName("SubSegmentIDDetail");
            entity.Property(e => e.SubSegmentNameDetail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPendingIpPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingIP_Purchase");

            entity.Property(e => e.AmountToBePaid).HasColumnName("Amount To Be Paid");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DebitMemoAmount).HasColumnName("Debit Memo Amount");
            entity.Property(e => e.DebitMemoDate).HasColumnName("Debit Memo Date");
            entity.Property(e => e.DebitMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Debit Memo No");
            entity.Property(e => e.DocDate).HasColumnName("Doc Date");
            entity.Property(e => e.DocNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Doc No");
            entity.Property(e => e.DocType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Doc Type");
            entity.Property(e => e.IPDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("I.P Date");
            entity.Property(e => e.IPNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("I.P No");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice Value");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Posted By");
            entity.Property(e => e.SalesTaxPayable).HasColumnName("Sales Tax Payable");
            entity.Property(e => e.SrNo1).HasColumnName("Sr No");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.SubSegmentCode).HasColumnName("SubSegment Code");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment Name");
            entity.Property(e => e.TotalNetValue).HasColumnName("Total Net Value");
            entity.Property(e => e.Vin)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vin");
            entity.Property(e => e.Vindate).HasColumnName("vindate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPendingJobOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingJobOrder");

            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.DeliveryAddress).HasColumnName("Delivery_Address");
            entity.Property(e => e.DeliveryDate)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DetailBpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Detail_BP_Code");
            entity.Property(e => e.Freight).HasMaxLength(50);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.JobOrderDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("JobOrder_Date");
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Route_id");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SaleTax).HasColumnName("Sale_Tax");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_no");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPendingJobOrderWh>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingJobOrderWH");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQty).HasColumnName("Cylinders_Qty");
            entity.Property(e => e.FWarehouseCode).HasColumnName("F_WarehouseCode");
            entity.Property(e => e.FWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_WarehouseName");
            entity.Property(e => e.FWarehouseSubSegmentCode).HasColumnName("F_WarehouseSubSegmentCode");
            entity.Property(e => e.FWarehouseSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_WarehouseSubSegmentName");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.JobOrderDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("JobOrder_Date");
            entity.Property(e => e.JobOrderNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("JobOrder_no");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TWarehouseCode).HasColumnName("T_WarehouseCode");
            entity.Property(e => e.TWarehouseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_WarehouseName");
            entity.Property(e => e.TWarehouseSubSegmentCode).HasColumnName("T_WarehouseSubSegmentCode");
            entity.Property(e => e.TWarehouseSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("T_WarehouseSubSegmentName");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPendingLead>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingLeads");

            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationTime).HasColumnType("datetime");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.Project)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SourceOfReference)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
            entity.Property(e => e.UpdationTime).HasColumnType("datetime");
            entity.Property(e => e.WhatsAppNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPendingLeadsNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingLeadsNew");

            entity.Property(e => e.AssignedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CampaignName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasMaxLength(4000);
            entity.Property(e => e.CustomerName).HasMaxLength(500);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DeviceId)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DeviceID");
            entity.Property(e => e.DropComments)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("Drop_Comments");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.FormId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("FormID");
            entity.Property(e => e.LeadType)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.Occupation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OrganicStatus)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.QueueTeamId).HasColumnName("QueueTeamID");
            entity.Property(e => e.Reference)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("reference");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RespondedRemarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Source)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamId).HasColumnName("TeamID");
            entity.Property(e => e.TypeName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UploadedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Whatsapp)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPendingPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingPO");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ConsumedQty).HasColumnName("Consumed_Qty");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.DiscountValue).HasColumnName("Discount_Value");
            entity.Property(e => e.ExciseDuty).HasColumnName("Excise_Duty");
            entity.Property(e => e.ExciseDutyValue).HasColumnName("Excise_Duty_Value");
            entity.Property(e => e.ExtraDiscount).HasColumnName("Extra_Discount");
            entity.Property(e => e.ExtraDiscountValue).HasColumnName("Extra_Discount_Value");
            entity.Property(e => e.Import).HasColumnName("import");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PO_DATE");
            entity.Property(e => e.PoNo).HasColumnName("PO_NO");
            entity.Property(e => e.PoQtyord).HasColumnName("PO_QTYORD");
            entity.Property(e => e.PoRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("PO_RATE");
            entity.Property(e => e.PoValue)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("po_Value");
            entity.Property(e => e.SalesTaxValue).HasColumnName("Sales_Tax_Value");
            entity.Property(e => e.Srno).HasColumnName("srno");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Stax).HasColumnName("stax");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentIdpomaster).HasColumnName("SubSegment_IDPOMaster");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalValue)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Total_Value");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPendingPonew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingPONew");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Import).HasColumnName("import");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PO_DATE");
            entity.Property(e => e.PoNo).HasColumnName("PO_NO");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentIdpomaster).HasColumnName("SubSegment_IDPOMaster");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPendingRecovry>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PendingRecovries");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BpName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BP_Name");
            entity.Property(e => e.IpDate).HasColumnName("IP_Date");
            entity.Property(e => e.IpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IP_no");
            entity.Property(e => e.RemainingAmount).HasColumnName("Remaining_Amount");
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<VwPendingSaleOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingSaleOrders");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.DeliveryAddress).HasColumnName("Delivery_Address");
            entity.Property(e => e.Freight).HasMaxLength(50);
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SaleDate).HasColumnName("Sale_Date");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.SaleTax).HasColumnName("Sale_Tax");
            entity.Property(e => e.SalesDate)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StatusDetail)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPendingSalesOrderReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingSalesOrderReport");

            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SaleDate).HasColumnName("Sale_Date");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.SaleTax).HasColumnName("Sale_Tax");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwPendingVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPendingVouchers");

            entity.Property(e => e.AccountCode)
                .HasMaxLength(50)
                .HasColumnName("Account Code");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.ChequeDate).HasColumnName("Cheque Date");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(100)
                .HasColumnName("Cheque No");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Credit)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Debit)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubsegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Subsegment Name");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwPl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPL");

            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
        });

        modelBuilder.Entity<VwPl12month>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPL12Month");

            entity.Property(e => e.Amount01).HasColumnName("AMOUNT_01");
            entity.Property(e => e.Amount02).HasColumnName("AMOUNT_02");
            entity.Property(e => e.Amount03).HasColumnName("AMOUNT_03");
            entity.Property(e => e.Amount04).HasColumnName("AMOUNT_04");
            entity.Property(e => e.Amount05).HasColumnName("AMOUNT_05");
            entity.Property(e => e.Amount06).HasColumnName("AMOUNT_06");
            entity.Property(e => e.Amount07).HasColumnName("AMOUNT_07");
            entity.Property(e => e.Amount08).HasColumnName("AMOUNT_08");
            entity.Property(e => e.Amount09).HasColumnName("AMOUNT_09");
            entity.Property(e => e.Amount10).HasColumnName("AMOUNT_10");
            entity.Property(e => e.Amount11).HasColumnName("AMOUNT_11");
            entity.Property(e => e.Amount12).HasColumnName("AMOUNT_12");
            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
        });

        modelBuilder.Entity<VwPlfor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPLFOR");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
        });

        modelBuilder.Entity<VwPlforprev>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPLFORPrev");

            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
        });

        modelBuilder.Entity<VwPlnote>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPLNotes");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
        });

        modelBuilder.Entity<VwPlnotes2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPLNotes2");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
        });

        modelBuilder.Entity<VwPlnotesComplete>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPLNotesComplete");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.Heading)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Note)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPlotAllocationReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPlotAllocationReceipt");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Location)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RefNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPlotAllocationReceiptDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPlotAllocationReceiptDelivery");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Courier)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeliveredFrom)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceivedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPlupto>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPLUPTO");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlPlcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_plcode");
        });

        modelBuilder.Entity<VwPluptocomplete>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPLUPTOComplete");

            entity.Property(e => e.Figurbold).HasColumnName("figurbold");
            entity.Property(e => e.Headingbold).HasColumnName("headingbold");
            entity.Property(e => e.Pbox).HasColumnName("pbox");
            entity.Property(e => e.Pdbunderline).HasColumnName("pdbunderline");
            entity.Property(e => e.Pdownline).HasColumnName("pdownline");
            entity.Property(e => e.Pfig).HasColumnName("pfig");
            entity.Property(e => e.Pheading)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("pheading");
            entity.Property(e => e.PlCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Pl_code");
            entity.Property(e => e.PlineNo)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("plineNo");
            entity.Property(e => e.Pnote)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pnote");
            entity.Property(e => e.Pupline).HasColumnName("pupline");
        });

        modelBuilder.Entity<VwPocomparison>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_POComparison");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.NetPurchaseRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Net_Purchase_Rate");
            entity.Property(e => e.PoDate).HasColumnName("PO_DATE");
            entity.Property(e => e.PoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PO_NO");
            entity.Property(e => e.Uom)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwPomasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPOMasterDetail");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BalanceQty).HasColumnName("Balance Qty");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Contact_person");
            entity.Property(e => e.ContactPersonEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Contact_Person_Email");
            entity.Property(e => e.DelivryDate).HasColumnName("delivry_date");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.DiscountValue).HasColumnName("Discount Value");
            entity.Property(e => e.Email).HasMaxLength(50);
            entity.Property(e => e.ExciseDuty).HasColumnName("Excise Duty(%)");
            entity.Property(e => e.ExciseDutyValue).HasColumnName("Excise Duty Value");
            entity.Property(e => e.Expr1).HasMaxLength(50);
            entity.Property(e => e.ExtraDiscount).HasColumnName("Extra Discount (%)");
            entity.Property(e => e.ExtraDiscountValue).HasColumnName("Extra Discount Value");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ForeignCurrency)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Foreign_Currency");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group Code");
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Group Name");
            entity.Property(e => e.Import).HasColumnName("import");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("Item Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ModeofPacking)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modeof_packing");
            entity.Property(e => e.Mop)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("MOP");
            entity.Property(e => e.NetPurchaseRate)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Net Purchase Rate");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NTN");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PoDate).HasColumnName("PO_DATE");
            entity.Property(e => e.PoDiscountper).HasColumnName("po_discountper");
            entity.Property(e => e.PoNo).HasColumnName("PO_NO");
            entity.Property(e => e.PoStaxper).HasColumnName("po_staxper");
            entity.Property(e => e.PoSubSegmentId).HasColumnName("PO_SubSegment_ID");
            entity.Property(e => e.PoSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PO_SubSegment_Name");
            entity.Property(e => e.Rate).HasColumnType("decimal(28, 7)");
            entity.Property(e => e.RegisteredOfficeAdress)
                .IsUnicode(false)
                .HasColumnName("Registered_Office_Adress");
            entity.Property(e => e.Remarks).HasColumnType("text");
            entity.Property(e => e.RequisitionDate).HasColumnName("Requisition Date");
            entity.Property(e => e.RequisitionDate1).HasColumnName("RequisitionDate");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Requisition_key");
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Requisition No");
            entity.Property(e => e.RequisitionNo1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RequisitionNo");
            entity.Property(e => e.RequisitionSno).HasColumnName("Requisition_Sno");
            entity.Property(e => e.SNo).HasColumnName("S No");
            entity.Property(e => e.SUer).HasColumnName("sUer");
            entity.Property(e => e.SalesTaxValue).HasColumnName("Sales Tax Value");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.Stax).HasColumnName("stax");
            entity.Property(e => e.SubSegmentCode).HasColumnName("Sub Segment Code");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.Tel1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tel_1");
            entity.Property(e => e.Terms)
                .HasColumnType("text")
                .HasColumnName("terms");
            entity.Property(e => e.TotalValue)
                .HasColumnType("decimal(28, 7)")
                .HasColumnName("Total_Value");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(22)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Value).HasColumnType("decimal(28, 7)");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPostDatedCheq>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPostDatedCheq");

            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwPostVoucher>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPostVoucher");

            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Type");
        });

        modelBuilder.Entity<VwPosubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPOSubSegment");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ForeignCurrency)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Foreign_Currency");
            entity.Property(e => e.Import).HasColumnName("import");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PO_DATE");
            entity.Property(e => e.PoNo).HasColumnName("PO_NO");
            entity.Property(e => e.Remarks).HasColumnType("text");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Tax)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TotalValue)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPreviousTankStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPreviousTankStatus");

            entity.Property(e => e.Chartkg).HasColumnName("chartkg");
            entity.Property(e => e.Chartm3).HasColumnName("chartm3");
            entity.Property(e => e.DecantingDate).HasColumnName("Decanting_date");
            entity.Property(e => e.GasStored).HasColumnName("Gas_stored");
            entity.Property(e => e.TankNo)
                .HasMaxLength(50)
                .HasColumnName("Tank_no");
        });

        modelBuilder.Entity<VwPriceList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPriceList");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.PricePlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<VwPriceListDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPriceListDetail");

            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwPriorityQueue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPriorityQueue");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.TeamName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("User_id");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
        });

        modelBuilder.Entity<VwProductPricingPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProductPricingPurchase");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WholeSalesRate).HasColumnName("WholeSales_Rate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwProjectExchange>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectExchange");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
        });

        modelBuilder.Entity<VwProjectExchangeFingerPrint>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectExchangeFingerPrint");

            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Data).HasColumnType("text");
        });

        modelBuilder.Entity<VwProjectInventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectInventory");

            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InventoryType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwProjectInventoryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectInventoryDetail");

            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BlocksDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyDetailsTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<VwProjectInventoryDetailNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectInventoryDetailNew");

            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BlocksDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.InventoryType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyDetailsTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectReschedule>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectReschedule");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectReversal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectReversal");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSale");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ChequeInHandSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.Commission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CommissionType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Confirmation)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationPayment)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBankId).HasColumnName("CustomerBankID");
            entity.Property(e => e.CustomerBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dealer)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExtraChargesSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExtraChargesTitle).HasMaxLength(100);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileReceiving)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentPlanSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LateChargesPerDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.NextToKin)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NextToKinCNIC");
            entity.Property(e => e.NextToKinContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartyPaymentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PlanName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PlanType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PosessionCertificateDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleReceipts)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PslateChargesPerDay)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PSLateChargesPerDay");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReferringType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RentalPlan)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Smscode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SMSCode");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TaxStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferCity1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferCity2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferCnic1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransferCNIC1");
            entity.Property(e => e.TransferCnic2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransferCNIC2");
            entity.Property(e => e.TransferCode1)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferCode2)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferContact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferContact1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferContact2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferEmail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferEmail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferName1)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferName2)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferNextToKin)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferNextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferNextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TransferNextToKinCNIC");
            entity.Property(e => e.TransferRelationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VendorName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.WebLink).HasMaxLength(50);
        });

        modelBuilder.Entity<VwProjectSaleCrd>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSaleCRD");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ClientRepresentativeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.WebLink).HasMaxLength(50);
        });

        modelBuilder.Entity<VwProjectSaleDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSaleDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ChequeInHandSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.Commission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CommissionType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Confirmation)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationPayment)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBankId).HasColumnName("CustomerBankID");
            entity.Property(e => e.CustomerBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dealer)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DueAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExtraChargesSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExtraChargesTitle).HasMaxLength(100);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileReceiving)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentPlanSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LateChargesPaid).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesPayable).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesPerDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LateChargesTotal).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LatePaymentChargesStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MainRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.NetPayableAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.NextToKin)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NextToKinCNIC");
            entity.Property(e => e.NextToKinContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaidAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.PartyPaymentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PlanName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PosessionCertificateDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleReceipts)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PslateChargesPerDay)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PSLateChargesPerDay");
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReferringType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RentalPlan)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Smscode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SMSCode");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TotalPaidAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.TransferCity1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferCity2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferCnic1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransferCNIC1");
            entity.Property(e => e.TransferCnic2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransferCNIC2");
            entity.Property(e => e.TransferCode1)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferCode2)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferContact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferContact1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferContact2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferEmail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferEmail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferName1)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferName2)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferNextToKin)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VendorName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.WebLink).HasMaxLength(50);
        });

        modelBuilder.Entity<VwProjectSaleDetailPaymentPlan>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSaleDetailPaymentPlan");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ChequeInHandSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.Commission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CommissionType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Confirmation)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationPayment)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBankId).HasColumnName("CustomerBankID");
            entity.Property(e => e.CustomerBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dealer)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DueAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExtraChargesSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExtraChargesTitle).HasMaxLength(100);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileReceiving)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentPlanSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LateChargesPayable).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesPerDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MainRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.NextToKin)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NextToKinCNIC");
            entity.Property(e => e.NextToKinContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartyPaymentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PlanName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PosessionCertificateDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleReceipts)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PsdpaidDate).HasColumnName("PSDPaidDate");
            entity.Property(e => e.ReceiptFrom)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReferringType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RentalPlan)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Smscode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SMSCode");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferCity1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferCity2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferCnic1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransferCNIC1");
            entity.Property(e => e.TransferCnic2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransferCNIC2");
            entity.Property(e => e.TransferCode1)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferCode2)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferContact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferContact1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferContact2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferEmail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferEmail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferName1)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferName2)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferNextToKin)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VendorName)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectSaleFileDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSaleFileDelivery");

            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Dealer)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReceiverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwProjectSaleFingerPrint>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSaleFingerPrint");

            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Data).HasColumnType("text");
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectSalePcd>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSalePCD");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PosessionCertificateNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwProjectSaleReceiptsDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSaleReceiptsDelivery");

            entity.Property(e => e.ClientRepresentativeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Expr1)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwProjectSaleTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectSaleTransfer");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CashBank)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NextToKin)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinContact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectTranferSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Tcity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TCity");
            entity.Property(e => e.TclientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TClientCode");
            entity.Property(e => e.TclientName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TClientName");
            entity.Property(e => e.Tcnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TCNIC");
            entity.Property(e => e.Tcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TContact");
            entity.Property(e => e.Temail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TEmail");
            entity.Property(e => e.TfatherName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TFatherName");
            entity.Property(e => e.TnextToKin)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TNextToKin");
            entity.Property(e => e.TnextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TNextToKinAddress");
            entity.Property(e => e.TnextToKinContact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TNextToKinContact");
            entity.Property(e => e.Tpic).HasColumnName("TPic");
            entity.Property(e => e.TransfererVerified)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Trelationship)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TRelationship");
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectTransfer>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectTransfer");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.CashBank)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.NextToKin)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NextToKinCNIC");
            entity.Property(e => e.NextToKinContact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.ProjectAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferName1)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferName2)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransfereeAddress).IsUnicode(false);
            entity.Property(e => e.TransfereeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransfereeName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransfererAddress).IsUnicode(false);
            entity.Property(e => e.TransfererBioMatricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TransfererBioMatricID");
            entity.Property(e => e.TransfererCnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TransfererCNIC");
            entity.Property(e => e.TransfererCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransfererContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransfererFatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransfererName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransfererNextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TransfererNextToKinCNIC");
            entity.Property(e => e.TransfererVerified)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectTransferFingerPrint>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectTransferFingerPrint");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Data).HasColumnType("text");
            entity.Property(e => e.FormName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferName1)
                .HasMaxLength(80)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectTransferReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectTransferReport");

            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.CashBank)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClientCnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("ClientCNIC");
            entity.Property(e => e.ClientContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.NextToKin)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NextToKinCNIC");
            entity.Property(e => e.NextToKinContact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.ProjectAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Tcity)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TCity");
            entity.Property(e => e.TclientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TClientCode");
            entity.Property(e => e.TclientName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("TClientName");
            entity.Property(e => e.Tcnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TCNIC");
            entity.Property(e => e.Tcontact)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TContact");
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Temail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TEmail");
            entity.Property(e => e.TransferName1)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferName2)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransfereeCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransfereeName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransfererBioMatricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("TransfererBioMatricID");
            entity.Property(e => e.TransfererCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransfererName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransfererVerified)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProjectWiseGl>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProjectWiseGL");

            entity.Property(e => e.Apaccural)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("APAccural");
            entity.Property(e => e.ApaccuralDesc).HasColumnName("APAccuralDesc");
            entity.Property(e => e.BookingPayable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.Cash)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.Chequesinhand)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.CommissionExpense)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.CommissionIncome)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ConfirmationPayable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.Discount)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.FileInventory)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.General)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.InstallmentPayable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.InstrumentReceivable)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.OtherIncome)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RentalExpense)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Token)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.TradingIncome)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.TradingReceivable)
                .HasMaxLength(31)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwProvisionalSalePurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwProvisionalSalePurchase");

            entity.Property(e => e.Amount).HasMaxLength(4000);
            entity.Property(e => e.ApproveStatus)
                .HasMaxLength(7)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.Area)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingTypeId).HasColumnName("BookingTypeID");
            entity.Property(e => e.Date).HasMaxLength(4000);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.SizeId).HasColumnName("SizeID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
        });

        modelBuilder.Entity<VwPsdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPSDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BookingType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CategoryTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ChequeInHandSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ChequeStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ChequeTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.Commission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.CommissionType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CompanyChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompanyChequebookNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Confirmation)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationPayment)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceipt)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ConfirmationReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerBankId).HasColumnName("CustomerBankID");
            entity.Property(e => e.CustomerBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dealer)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Description)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DueAmount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ExtraChargesSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ExtraChargesTitle).HasMaxLength(100);
            entity.Property(e => e.FatherName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FileDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileReceiving)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentPlanSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InstallmentType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LateChargesPaid).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesPayable).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LateChargesPerDay)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LateChargesTotal).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.LatePaymentChargesStatus)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MainRemarks)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MembershipNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.NextToKin)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NextToKinCnic)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NextToKinCNIC");
            entity.Property(e => e.NextToKinContact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartyPaymentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PlanName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PosessionCertificateDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleReceipts)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleReceiptsDelivery)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProjectStatus)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ReferringType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Relationship)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RentalPlan)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Smscode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SMSCode");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TaxStatus)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferCity1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferCity2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferCnic1)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransferCNIC1");
            entity.Property(e => e.TransferCnic2)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TransferCNIC2");
            entity.Property(e => e.TransferCode1)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferCode2)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TransferContact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.TransferContact1)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferContact2)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TransferEmail1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferEmail2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TransferName1)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferName2)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TransferNextToKin)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VendorName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.WebLink).HasMaxLength(50);
        });

        modelBuilder.Entity<VwPurchaseDiscountBpReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PurchaseDiscountBP_Report");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Levels)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("levels");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Vdate).HasColumnName("vdate");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPurchaseDiscountMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPurchaseDiscountMasterDetail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.PdNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PD_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPurchaseDiscountsBpDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PurchaseDiscountsBP_Detail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPurchaseDiscountsBpMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_PurchaseDiscountsBP_Main");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.PpNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PP_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwPurchaseOpeningQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPurchaseOpeningQty");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.OpeningValue).HasColumnType("numeric(38, 14)");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
        });

        modelBuilder.Entity<VwPurchasePartyWise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPurchasePartyWise");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("GL_CODE");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("GL_DESC");
            entity.Property(e => e.Invno)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("INVNO");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NARRATION");
            entity.Property(e => e.Qty1).HasColumnName("QTY1");
            entity.Property(e => e.Qty2).HasColumnName("QTY2");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UNIT1");
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UNIT2");
            entity.Property(e => e.Vdate).HasColumnName("VDATE");
            entity.Property(e => e.Vkey)
                .HasMaxLength(50)
                .HasColumnName("vkey");
        });

        modelBuilder.Entity<VwPurchasePartyWiseSumm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPurchasePartyWiseSUMM");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("GL_CODE");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("GL_DESC");
            entity.Property(e => e.Qty1).HasColumnName("qty1");
            entity.Property(e => e.Qty2).HasColumnName("qty2");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UNIT1");
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UNIT2");
        });

        modelBuilder.Entity<VwPurchaseRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPurchaseRates");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwPurchaseRatesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPurchaseRatesDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwPurchaseRatesMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPurchaseRatesMasterDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentIddetail).HasColumnName("SubSegmentIDDetail");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwPurchaseRatesSubSegmentsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPurchaseRatesSubSegmentsDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwPurchaseRunningQty>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwPurchaseRunningQty");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.OpeningValue).HasColumnType("numeric(38, 14)");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
        });

        modelBuilder.Entity<VwQtyInStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQty_in_Stock");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.RemainingQty).HasColumnName("Remaining_Qty");
            entity.Property(e => e.RemainingRate).HasColumnName("Remaining_Rate");
            entity.Property(e => e.RemainingValue).HasColumnName("Remaining_Value");
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwQuantativeSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQuantativeSales");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("route_id");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.SalesName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwQueryForPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQueryForPurchase");

            entity.Property(e => e.Address)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasMaxLength(4000);
            entity.Property(e => e.OriginalDate).HasColumnType("datetime");
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Size)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwQuotaAllocation>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQuotaAllocation");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DpserialNo).HasColumnName("DPSerialNo");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwQuotaAllocationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQuotaAllocationDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DpserialNo).HasColumnName("DPSerialNo");
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Property)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Rebate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwQuotaAllocationModified>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQuotaAllocationModified");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DpserialNo).HasColumnName("DPSerialNo");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwQuotaAllocationModifiedDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQuotaAllocationModifiedDetail");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FormNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Pbpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PBPCode");
            entity.Property(e => e.Pbpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("PBPName");
            entity.Property(e => e.Pdiscount).HasColumnName("PDiscount");
            entity.Property(e => e.PownAmount).HasColumnName("POwnAmount");
            entity.Property(e => e.Prebate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PRebate");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Property)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Rebate)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwQuotaFile>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQuotaFiles");

            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwQuotationBusinessPartner>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQuotation_BusinessPartner");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.QuotationNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Quotation No");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.SubSegmentNo).HasColumnName("Sub Segment No");
        });

        modelBuilder.Entity<VwQuotationDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQuotationDetail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.FurtherTax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Further Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group Code");
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Group Name");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Item Name");
            entity.Property(e => e.Purity)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("purity");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.Rpu).HasColumnName("rpu");
            entity.Property(e => e.SNo).HasColumnName("S No");
            entity.Property(e => e.SalesTax)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Sales Tax");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("specification");
            entity.Property(e => e.SrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sr_no");
            entity.Property(e => e.TotalValue)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Total Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwQuotationMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQuotationMasterDetail");

            entity.Property(e => e.Address)
                .IsUnicode(false)
                .HasColumnName("address");
            entity.Property(e => e.Attention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("attention");
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("bp_code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ComplimentaryClose)
                .HasColumnType("text")
                .HasColumnName("complimentary_close");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("contact_no");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Designation)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("designation");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.FurtherTax).HasColumnName("Further Tax");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group Code");
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("Group Name");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Item Name");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Purity)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("purity");
            entity.Property(e => e.Qty).HasColumnName("qty");
            entity.Property(e => e.RefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref_no");
            entity.Property(e => e.Rpu).HasColumnName("rpu");
            entity.Property(e => e.SNo).HasColumnName("S No");
            entity.Property(e => e.SalesTax).HasColumnName("Sales Tax");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("specification");
            entity.Property(e => e.SrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sr_no");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Subject)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("subject");
            entity.Property(e => e.Terms)
                .HasColumnType("text")
                .HasColumnName("terms");
            entity.Property(e => e.TotalValue).HasColumnName("Total Value");
            entity.Property(e => e.Uom)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<VwQuotationSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwQuotationSubSegment");

            entity.Property(e => e.Address)
                .IsUnicode(false)
                .HasColumnName("address");
            entity.Property(e => e.Attention)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("attention");
            entity.Property(e => e.BusinessPartnersCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Business_Partners_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ComplimentaryClose)
                .HasColumnType("text")
                .HasColumnName("complimentary_close");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("contact_no");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Designation)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("designation");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.RefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ref_no");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("serial_no");
            entity.Property(e => e.SrNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("sr_no");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Subject)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("subject");
            entity.Property(e => e.Terms)
                .HasColumnType("text")
                .HasColumnName("terms");
        });

        modelBuilder.Entity<VwRawMaterialIssuanceDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwRawMaterialIssuanceDetail");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BatchNumber)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RequisitionSubSegmentId).HasColumnName("RequisitionSubSegmentID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnameFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameFrom");
            entity.Property(e => e.WhnameTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameTo");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");
        });

        modelBuilder.Entity<VwRawMaterialIssuanceMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwRawMaterialIssuanceMaster");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DriverName).HasMaxLength(50);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.ToSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
        });

        modelBuilder.Entity<VwRawMaterialIssuanceMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRawMaterialIssuanceMasterDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRawMaterialIssuanceReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwRawMaterialIssuanceReport");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DriverName).HasMaxLength(50);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.ToSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnameFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameFrom");
            entity.Property(e => e.WhnameTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameTo");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");
        });

        modelBuilder.Entity<VwRawMaterialReturnDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwRawMaterialReturnDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionSubSegmentId).HasColumnName("RequisitionSubSegmentID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");
        });

        modelBuilder.Entity<VwRawMaterialReturnMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwRawMaterialReturnMaster");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DriverName).HasMaxLength(50);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IssuanceNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.IssuanceSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
        });

        modelBuilder.Entity<VwRcptItemWiseDet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRcptItemWiseDet");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("grnno");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_Desc");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("it_partno");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("party");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("tr_fr");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
        });

        modelBuilder.Entity<VwRcptItemWiseSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRcptItemWiseSum");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwRcptMonthComp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRcptMonthComp");

            entity.Property(e => e.Cdate).HasColumnName("cdate");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.Main).HasMaxLength(13);
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwRcptMonthComp1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRcptMonthComp1");

            entity.Property(e => e.Cdate).HasColumnName("cdate");
            entity.Property(e => e.Main).HasMaxLength(13);
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwRebateDefinition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRebateDefinition");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.PlanName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ProjectRegistrationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VendorRebate)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRebateDefinitionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRebateDefinitionDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.RebateOffered)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonRebate)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwReceiptMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReceiptMain");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.Bptype).HasColumnName("BPType");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RecoveryAgent)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwReceiptMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReceiptMasterDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bptype).HasColumnName("BPType");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BranchName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Brand)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Category)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasColumnType("datetime");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Ipdate).HasColumnName("IPDate");
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.Ipsrno).HasColumnName("IPSrno");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Itemname)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEMName");
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.ModifiedUserId).HasColumnName("ModifiedUserID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartyType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReceiptNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RegionId)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RegionName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SelectIpno).HasColumnName("SelectIPNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TelephoneNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e._15SalesTax).HasColumnName("1/5 SalesTax");
        });

        modelBuilder.Entity<VwReceiptSecurity>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReceipt_Security");

            entity.Property(e => e.CompId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Spc).HasColumnName("SPC");
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("year");
        });

        modelBuilder.Entity<VwReceiptsDelivery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReceiptsDelivery");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientRepresentativeName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeliveredFromLocation)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwReceiptsMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwReceiptsMasterDetail");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Account_Title");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("Bank_Name");
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPNAME");
            entity.Property(e => e.Bptype).HasColumnName("BPType");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Branch_Code");
            entity.Property(e => e.BranchName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Branch_Name");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CreditMemoNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Docdate).HasColumnName("DOCDate");
            entity.Property(e => e.Docno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DOCNo");
            entity.Property(e => e.Doctype)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOCType");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Freight)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Ipdate).HasColumnName("IPDate");
            entity.Property(e => e.Ipno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("IPNo");
            entity.Property(e => e.Ipsrno).HasColumnName("IPSrno");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.KgQty).HasColumnName("KG_Qty");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PostedBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SelectIpno).HasColumnName("SelectIPNo");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentIddetail).HasColumnName("SubSegmentIDDetail");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentNameDetail)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Whtax).HasColumnName("WHTax");
        });

        modelBuilder.Entity<VwRecoveryAlert>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_RecoveryAlerts");

            entity.Property(e => e.IpDate).HasColumnName("IP_Date");
            entity.Property(e => e.IpDateTwo).HasColumnName("IP_Date_two");
            entity.Property(e => e.SalesDate).HasColumnName("Sales_date");
            entity.Property(e => e.SalesDateTwo).HasColumnName("Sales_Date_two");
            entity.Property(e => e.Status).HasMaxLength(50);
        });

        modelBuilder.Entity<VwRegionRight>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRegionRights");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRegionRightsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRegionRightsDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.RegionId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RegionID");
            entity.Property(e => e.RegionName).IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<VwRental>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRental");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ClientCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectSaleSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectSaleSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PropertyTitle).HasMaxLength(100);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwRentalStructure>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRentalStructure");

            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRequisition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Requisition");

            entity.Property(e => e.ActualQty).HasColumnName("Actual_Qty");
            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CcCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CC_CODE");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.PiDate).HasColumnName("PI_DATE");
            entity.Property(e => e.PiDate1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PI_DATE1");
            entity.Property(e => e.PiNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PI_NO");
            entity.Property(e => e.PiQty).HasColumnName("PI_QTY");
            entity.Property(e => e.PiReqdate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PI_REQDATE");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.Remarks)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ReqType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("req_type");
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SrNo1)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwRequisition1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRequisition");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Department)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FormulationTitle)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ProductionType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwRequisitionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRequisitionDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwRequisitionReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRequisitionReport");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Department)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.Expr1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
        });

        modelBuilder.Entity<VwRiswtran>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRISWtrans");

            entity.Property(e => e.Issue).HasColumnType("money");
            entity.Property(e => e.IssueV).HasColumnType("money");
            entity.Property(e => e.Receipt).HasColumnType("money");
            entity.Property(e => e.ReceiptV).HasColumnType("money");
            entity.Property(e => e.Sale)
                .HasColumnType("money")
                .HasColumnName("sale");
            entity.Property(e => e.SaleV)
                .HasColumnType("money")
                .HasColumnName("saleV");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<VwRiswtransStSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRISWtransStSum");

            entity.Property(e => e.Capitalized).HasColumnType("money");
            entity.Property(e => e.CapitalizedV).HasColumnType("money");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Consumption).HasColumnType("money");
            entity.Property(e => e.ConsumptionV).HasColumnType("money");
            entity.Property(e => e.Issue).HasColumnType("money");
            entity.Property(e => e.IssueV).HasColumnType("money");
            entity.Property(e => e.Receipt).HasColumnType("money");
            entity.Property(e => e.ReceiptV).HasColumnType("money");
            entity.Property(e => e.Sale)
                .HasColumnType("money")
                .HasColumnName("sale");
            entity.Property(e => e.SaleV)
                .HasColumnType("money")
                .HasColumnName("saleV");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<VwRiwmonthComp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRIWMonthComp");

            entity.Property(e => e.Issues).HasColumnType("money");
            entity.Property(e => e.MMonth).HasColumnName("mMonth");
            entity.Property(e => e.Receipts).HasColumnType("money");
        });

        modelBuilder.Entity<VwRiwyearComp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRIWYearComp");

            entity.Property(e => e.Issues).HasColumnType("money");
            entity.Property(e => e.Receipts).HasColumnType("money");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<VwRouteRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRouteRegistration");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.CustomerType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("customer_type");
            entity.Property(e => e.DriverExpense).HasColumnName("driver_expense");
            entity.Property(e => e.LoaderExpense).HasColumnName("loader_expense");
            entity.Property(e => e.LoadingExpense).HasColumnName("loading_expense");
            entity.Property(e => e.Mileage)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("mileage");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("route_id");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("route_name");
            entity.Property(e => e.Time)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("time");
            entity.Property(e => e.TimeType).HasColumnName("time_type");
            entity.Property(e => e.TollTax).HasColumnName("toll_tax");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("vehicle_type");
        });

        modelBuilder.Entity<VwRptPidateWise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRptPIDateWise");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.PiDate)
                .HasColumnType("datetime")
                .HasColumnName("PI_DATE");
            entity.Property(e => e.PiItemno)
                .HasMaxLength(13)
                .IsFixedLength()
                .HasColumnName("PI_ITEMNO");
            entity.Property(e => e.PiNo)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("PI_NO");
            entity.Property(e => e.PiQtY)
                .HasColumnType("money")
                .HasColumnName("PI_QtY");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwRptPipurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRptPIPurchase");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<VwRrwiseRcpt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwRRWiseRcpt");

            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("grnno");
            entity.Property(e => e.Main).HasMaxLength(2);
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("tr_fr");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwSalaryDispersement>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalaryDispersement");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.SalarySheetNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalarySheetSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwSalaryDispersementBankDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalaryDispersementBankDetail");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeBankId).HasColumnName("EmployeeBankID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSalaryDispersementDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalaryDispersementDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeBankId).HasColumnName("EmployeeBankID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromPaidBankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.HandlerName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.HandlingOfficer)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaidFromBankAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Signature)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSalaryDispersementSetup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalaryDispersementSetup");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwSalaryPerquisitesMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalary_PerquisitesMainDetail");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.PayrollExpense)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Per)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PerTitle)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProvisionForTaxtation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalaryPayable)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SalaryTaxExpense)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Title)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSalaryScaleMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalary_ScaleMainDetail");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Grade)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PayrollExpense)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Per)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.PerquisitesCode)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SNo).HasColumnName("S_no");
            entity.Property(e => e.SalaryPayable)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SrNo)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sr_no");
            entity.Property(e => e.Title)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("title");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSalarySheet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalarySheet");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwSalarySheetDeductionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalarySheetDeductionDetail");

            entity.Property(e => e.Code)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<VwSalarySheetDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalarySheetDetail");

            entity.Property(e => e.BioMetricId)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BioMetricID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeAccount)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeBankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmploymentType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwSalarySlip>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalarySlip");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountTitle)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ChequeSlipNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DesignationCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.SalarySheetSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalarySheetSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_Sales");

            entity.Property(e => e.Expr1)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.SAccountskey)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_accountskey");
            entity.Property(e => e.SAvgRate).HasColumnName("s_AvgRate");
            entity.Property(e => e.SAvgValue).HasColumnName("s_AvgValue");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SChallanNo).HasColumnName("s_challanNo");
            entity.Property(e => e.SCount)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_count");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SIncValue).HasColumnName("s_IncValue");
            entity.Property(e => e.SInvdate)
                .HasColumnType("datetime")
                .HasColumnName("s_invdate");
            entity.Property(e => e.SInvno).HasColumnName("s_invno");
            entity.Property(e => e.SInvsub)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_invsub");
            entity.Property(e => e.SMainKey)
                .HasMaxLength(18)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_MainKey");
            entity.Property(e => e.SNo).HasColumnName("s_no");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SOwgpDate)
                .HasColumnType("datetime")
                .HasColumnName("s_OwgpDate");
            entity.Property(e => e.SOwgpNo).HasColumnName("s_OwgpNo");
            entity.Property(e => e.SPipes).HasColumnName("s_Pipes");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SSaleRate).HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SSalesTaxValue).HasColumnName("s_SalesTaxValue");
            entity.Property(e => e.SSerial).HasColumnName("s_serial");
            entity.Property(e => e.SSfed).HasColumnName("s_SFED");
            entity.Property(e => e.SStper).HasColumnName("s_stper");
            entity.Property(e => e.SSupplier)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Supplier");
            entity.Property(e => e.SType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_type");
            entity.Property(e => e.SUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Unit");
            entity.Property(e => e.SYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_year");
        });

        modelBuilder.Entity<VwSale1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSales");

            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.NetBalance).HasColumnName("Net Balance");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SegmentName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Segment_name");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VType)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("vType");
            entity.Property(e => e.VType1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<VwSaleOrderComparison>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_SaleOrderComparison");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.SaleDate).HasColumnName("Sale_Date");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Sale_no");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwSaleOrderMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSaleOrderMainDetail");

            entity.Property(e => e.Brand)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.Category)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SaleDate).HasColumnName("Sale_Date");
            entity.Property(e => e.SaleNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSalePartyWise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalePartyWise");

            entity.Property(e => e.Amount).HasColumnName("amount");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.Itemcode)
                .HasMaxLength(50)
                .HasColumnName("itemcode");
            entity.Property(e => e.Itemdesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("itemdesc");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
        });

        modelBuilder.Entity<VwSalePartyWiseSumm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalePartyWiseSUMM");

            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("GL_CODE");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("GL_DESC");
            entity.Property(e => e.Qty1).HasColumnName("qty1");
            entity.Property(e => e.Qty2).HasColumnName("qty2");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("unit1");
        });

        modelBuilder.Entity<VwSalePurchaseRate>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_SalePurchaseRates");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.RetailRate).HasColumnName("Retail_Rate");
            entity.Property(e => e.SupplierRate).HasColumnName("Supplier_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WholeSalesRate).HasColumnName("WholeSales_Rate");
        });

        modelBuilder.Entity<VwSaleWithCg>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSale_with_CGS");

            entity.Property(e => e.CgsRate).HasColumnName("CGS_RATE");
            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.ReturnQty).HasColumnName("Return_Qty");
            entity.Property(e => e.ReturnValue).HasColumnName("Return_Value");
            entity.Property(e => e.SalesDate).HasColumnName("Sales_date");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubsegmentId).HasColumnName("Subsegment_id");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSalemenSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalemenSale");

            entity.Property(e => e.Bname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BName");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SChallanNo).HasColumnName("s_challanNo");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SSaleRate).HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_year");
        });

        modelBuilder.Entity<VwSalemenSaleF>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalemenSaleF");

            entity.Property(e => e.Bname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("BName");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(50)
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SChallanNo).HasColumnName("s_challanNo");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SSaleRate).HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_year");
            entity.Property(e => e.Scode)
                .HasMaxLength(50)
                .HasColumnName("SCode");
            entity.Property(e => e.Sname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("SName");
        });

        modelBuilder.Entity<VwSalesGroup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalesGroup");

            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_code");
            entity.Property(e => e.SalesDate).HasColumnName("Sales_date");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwSalesGroupReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalesGroupReturn");

            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_code");
            entity.Property(e => e.SireturnDate).HasColumnName("SIReturn_date");
        });

        modelBuilder.Entity<VwSalesInvoiceComparison>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_SalesInvoiceComparison");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.SalesDate).HasColumnName("Sales_date");
            entity.Property(e => e.SalesInvoiceNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesType)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("Sales_Type");
        });

        modelBuilder.Entity<VwSalesInvoiceService>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_SalesInvoice_Services");

            entity.Property(e => e.CompId).HasColumnName("Comp_id");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.SNo).HasColumnName("S_No");
            entity.Property(e => e.ServiceCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Service_Code");
            entity.Property(e => e.ServiceLine).HasMaxLength(100);
            entity.Property(e => e.ServiceType)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSalesIp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSales_IP");

            entity.Property(e => e.Expr1)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Expr2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwSalesManDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalesManDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.RouteId)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RouteID");
            entity.Property(e => e.RouteName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwSalesOrderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_SalesOrder_Detail");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylindersQyt).HasColumnName("Cylinders_Qyt");
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight_PerUnit");
            entity.Property(e => e.FurtherTax).HasColumnName("Further_Tax");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice_Value");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.KgQty).HasColumnName("Kg_Qty");
            entity.Property(e => e.LtrQty).HasColumnName("Ltr_Qty");
            entity.Property(e => e.M3Qty).HasColumnName("M3_Qty");
            entity.Property(e => e.Remarks)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SaleTax).HasColumnName("Sale_Tax");
            entity.Property(e => e.Specification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalFreight).HasColumnName("Total_Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total_InvoiceValue");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.UnitRate).HasColumnName("Unit_Rate");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSalesOrderItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalesOrder_Item");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CylinderQuantity).HasColumnName("Cylinder Quantity");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.FreightPerUnit).HasColumnName("Freight Per Unit");
            entity.Property(e => e.InvoiceValue).HasColumnName("Invoice Value");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Item Name");
            entity.Property(e => e.Kg).HasColumnName("KG");
            entity.Property(e => e.M3).HasColumnName("m3");
            entity.Property(e => e.SNo).HasColumnName("S No");
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.TotalFreight).HasColumnName("Total Freight");
            entity.Property(e => e.TotalInvoiceValue).HasColumnName("Total Invoice Value");
            entity.Property(e => e.UnitOfMeasurement)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Unit Of Measurement");
            entity.Property(e => e.UnitRate).HasColumnName("Unit Rate");
        });

        modelBuilder.Entity<VwSalesValue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSales_value");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GrnDate).HasColumnName("GRN_Date");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.SalesValue).HasColumnName("Sales_Value");
            entity.Property(e => e.TotalValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total_Value");
        });

        modelBuilder.Entity<VwSalesWithCg>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSalesWithCGS");

            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Prate).HasColumnName("PRate");
            entity.Property(e => e.SalesDate).HasColumnName("Sales_date");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwSalesgroupwise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSALESGROUPWISE");

            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
        });

        modelBuilder.Entity<VwService>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwServices");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwServiceBoqplan>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwServiceBOQPlan");

            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwServiceBoqplanDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwServiceBOQPlanDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ServicesName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwServiceRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_ServiceRegistration");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_No");
            entity.Property(e => e.ServiceLine).HasMaxLength(100);
            entity.Property(e => e.ServiceType)
                .HasMaxLength(9)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwSin>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSIN");

            entity.Property(e => e.AccountsKey)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Billdate)
                .HasColumnType("datetime")
                .HasColumnName("billdate");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Dcdate).HasColumnName("dcdate");
            entity.Property(e => e.Dcno).HasColumnName("dcno");
            entity.Property(e => e.DoNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("do_no");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("GRNNO");
            entity.Property(e => e.Igpdate).HasColumnName("igpdate");
            entity.Property(e => e.Igpno).HasColumnName("igpno");
            entity.Property(e => e.IsLocal).HasColumnName("is_local");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.KeyField).HasMaxLength(20);
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("m_desc");
            entity.Property(e => e.MPono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.Misc).HasColumnType("money");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("PARTY");
            entity.Property(e => e.Podate).HasColumnName("podate");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.Posted).HasMaxLength(1);
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.Reqdate).HasColumnName("reqdate");
            entity.Property(e => e.Reqno).HasColumnName("reqno");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .HasColumnName("sUser");
            entity.Property(e => e.StCode)
                .HasMaxLength(10)
                .HasColumnName("st_code");
            entity.Property(e => e.Staxcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("staxcode");
            entity.Property(e => e.Supliercode)
                .HasMaxLength(50)
                .HasColumnName("supliercode");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("TR_Accept");
            entity.Property(e => e.TrCartrage)
                .HasColumnType("money")
                .HasColumnName("tr_cartrage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("TR_FR");
            entity.Property(e => e.TrGrnno)
                .HasMaxLength(5)
                .HasColumnName("tr_Grnno");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrMode)
                .HasMaxLength(1)
                .HasColumnName("tr_Mode");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("TR_OTHER");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPino)
                .HasMaxLength(5)
                .HasColumnName("tr_Pino");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("TR_QTY");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrType)
                .HasMaxLength(2)
                .HasColumnName("tr_Type");
            entity.Property(e => e.TrUserid).HasColumnName("tr_userid");
            entity.Property(e => e.TrUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_username");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("TR_VALUE");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_workstation");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(25)
                .HasColumnName("uom");
            entity.Property(e => e.Vdate).HasColumnType("datetime");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSinmasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSINMasterDetail");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.CAbber).HasColumnName("C_abber");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.CreationDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("creationDate");
            entity.Property(e => e.DemandQty).HasColumnName("Demand_Qty");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Dept_Code");
            entity.Property(e => e.DetailSrno).HasColumnName("Detail_Srno");
            entity.Property(e => e.DrRequisition)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DR_Requisition");
            entity.Property(e => e.DrRequisitionDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DR_Requisition_Date");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.GrnDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("GRN_DATE");
            entity.Property(e => e.GrnReturnNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRN_Return_No");
            entity.Property(e => e.Grndate1).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRNNO");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IssueQty)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Issue_Qty");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.OtherOverheads).HasColumnName("Other_Overheads");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase_Qty");
            entity.Property(e => e.Rate)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RemainingQty)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Remaining_Qty");
            entity.Property(e => e.RemainingQtys).HasColumnName("Remaining_Qtys");
            entity.Property(e => e.RemainingRate)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Rate");
            entity.Property(e => e.RemainingValue)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Remaining_Value");
            entity.Property(e => e.Remarks).IsUnicode(false);
            entity.Property(e => e.Saletax).HasMaxLength(20);
            entity.Property(e => e.SerialNo).HasColumnName("Serial_No");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentCode).HasColumnName("Sub Segment Code");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentName1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name");
            entity.Property(e => e.SubSegmentNameMain)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Sub Segment Name Main");
            entity.Property(e => e.ToWareHouseNo).HasColumnName("To_WareHouse_No");
            entity.Property(e => e.ToWareHouseSubSegmentId).HasColumnName("To_WareHouse_SubSegment_ID");
            entity.Property(e => e.ToWhName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("To WH Name");
            entity.Property(e => e.TotalValue)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Total_Value");
            entity.Property(e => e.TotalValue1)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("Total Value");
            entity.Property(e => e.TotalValues)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Total Values");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.TransportationCharges).HasColumnName("Transportation_Charges");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.Value)
                .HasColumnType("numeric(28, 14)")
                .HasColumnName("VALUE");
            entity.Property(e => e.VehicleId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Vehicle_ID");
            entity.Property(e => e.VehicleRegistration)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Vehicle_registration");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSinsubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSINSubSegment");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Date)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Grnno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRNNO");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status).HasMaxLength(5);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwSkipedLead>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSkipedLeads");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
        });

        modelBuilder.Entity<VwSmsapiIntegration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSMSApiIntegration");

            entity.Property(e => e.Apikey)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APIKey");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmailPassword)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmailPort)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.EmailUserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Masking)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SmtpClients)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwSmscompaign>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSMSCompaign");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CustomerType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Msg)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("TypeID");
        });

        modelBuilder.Entity<VwSmscompaignDetailBookingForm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSMSCompaignDetailBookingForm");

            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<VwSmscompaignDetailLead>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSMSCompaignDetailLeads");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Customer)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwSmscompaignDetailProjectSale>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSMSCompaignDetailProjectSale");

            entity.Property(e => e.AreaTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("CNIC");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<VwSocietyInstallment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSocietyInstallment");

            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.Bank)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CashBankOnline)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CdealerCommission)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CDealerCommission");
            entity.Property(e => e.ChequeNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ConfirmationAgainst)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CsalesManCommission)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CSalesManCommission");
            entity.Property(e => e.CteamLeaderCommission)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CTeamLeaderCommission");
            entity.Property(e => e.DealName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealPurchaseSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Dealer)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.DealerCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DealerCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DealerOldCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Instrument)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferringPerson)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReferringPersonOldCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SalesManCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TeamLeader)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderCommission)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.TeamLeaderOldCommission)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwSocietyPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSocietyPayment");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwSocietyPaymentDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSocietyPaymentDetail");

            entity.Property(e => e.BankAccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BookingFormNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DealNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SocietyInstallmentSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.VendorCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwStatementOfFinancialPosition>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStatementOfFinancialPosition");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwStatementOfProfitAndLoss>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStatementOfProfitAndLoss");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwStockAdustmentMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStockAdustmentMasterDetail");

            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Date).HasColumnName("DATE");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_UserID");
            entity.Property(e => e.ModifiedUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Username");
            entity.Property(e => e.ModifiedWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_Workstation");
            entity.Property(e => e.Reason)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SUser).HasColumnName("sUser");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_no");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.TrUserid).HasColumnName("tr_userid");
            entity.Property(e => e.TrUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_username");
            entity.Property(e => e.TrWorkstation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tr_workstation");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whno).HasColumnName("whno");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwStockGroupWise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStock_Group_Wise");

            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.PurchaseValue)
                .HasColumnType("numeric(38, 14)")
                .HasColumnName("Purchase_Value");
            entity.Property(e => e.SalesValue).HasColumnName("Sales_Value");
        });

        modelBuilder.Entity<VwStockIssue>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStockIssue");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubProjectId).HasColumnName("SubProjectID");
            entity.Property(e => e.SubProjectName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
        });

        modelBuilder.Entity<VwStockIssueDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStockIssueDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubProjectId).HasColumnName("SubProjectID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwStockPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStockPurchases");

            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.NetBalance).HasColumnName("Net Balance");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SegmentName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Segment_name");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VType)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("vType");
            entity.Property(e => e.VType1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<VwStoreCcwcomp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStoreCCWComp");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_Desc");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.Main)
                .HasMaxLength(13)
                .HasColumnName("main");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwStoreCcwcomp1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStoreCCWComp1");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.Main)
                .HasMaxLength(13)
                .HasColumnName("main");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwStoreSecConsSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStoreSecConsSum");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.Item)
                .HasMaxLength(50)
                .HasColumnName("item");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_Qty");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwStoreSecWmonthComp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStoreSecWMonthComp");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.Main)
                .HasMaxLength(13)
                .HasColumnName("main");
            entity.Property(e => e.Moth).HasColumnName("moth");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwStoreSecWmonthComp1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStoreSecWMonthComp1");

            entity.Property(e => e.Main).HasMaxLength(13);
            entity.Property(e => e.Moth).HasColumnName("moth");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwStoreWmonthIr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwStoreWMonthIR");

            entity.Property(e => e.Issueing).HasColumnType("money");
            entity.Property(e => e.MDate).HasColumnName("mDATE");
            entity.Property(e => e.Main)
                .HasMaxLength(13)
                .HasColumnName("main");
            entity.Property(e => e.Purchase).HasColumnType("money");
        });

        modelBuilder.Entity<VwSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSubSegment");

            entity.Property(e => e.CaSubSegment)
                .HasMaxLength(50)
                .HasColumnName("CA_SubSegment");
            entity.Property(e => e.ClientOfficeCopyOnGlprint).HasColumnName("ClientOfficeCopyOnGLPrint");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CrprintWaterMark).HasColumnName("CRPrintWaterMark");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.Glrestriction).HasColumnName("GLRestriction");
            entity.Property(e => e.GlvoucherApprovedWaterMark).HasColumnName("GLVoucherApprovedWaterMark");
            entity.Property(e => e.Prefix)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SegmentName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Segment_name");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.WebLink).HasMaxLength(50);
        });

        modelBuilder.Entity<VwSublet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSublet");

            entity.Property(e => e.AmountPer)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.CompId1).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Fine)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RatePerSqft).HasColumnName("RatePerSQFT");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.TotalSqft).HasColumnName("TotalSQFT");
            entity.Property(e => e.UnitDetail)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwSubletService>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSubletServices");

            entity.Property(e => e.AmountPer)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Fine)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RatePerSqft).HasColumnName("RatePerSQFT");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalSqft).HasColumnName("TotalSQFT");
        });

        modelBuilder.Entity<VwSupportCharge>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSupportCharges");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwSupportChargesDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwSupportChargesDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTarget>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTargets");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Monthly)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTargetsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTargetsDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Month)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTargetvsAch>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTargetvsAch");

            entity.Property(e => e.Monthly)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTask>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTasks");

            entity.Property(e => e.AssignDate).HasColumnType("datetime");
            entity.Property(e => e.AssignedByUserId).HasColumnName("AssignedByUserID");
            entity.Property(e => e.AssignedByUserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LatestRemarks).HasMaxLength(1000);
            entity.Property(e => e.Step)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TargetDate).HasColumnType("datetime");
            entity.Property(e => e.TaskDescription).HasMaxLength(1000);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTeamKpi>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTeamKPI");

            entity.Property(e => e.JobPosition)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Job_position");
            entity.Property(e => e.LeaderName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.LeaderUserId).HasColumnName("LeaderUserID");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Sms).HasColumnName("SMS");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTeamLeader>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTeamLeader");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTeamLeaderDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTeamLeaderDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.LeaderUserId).HasColumnName("LeaderUserID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTeamMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTeamMasterDetail");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.TeamName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("User_id");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
        });

        modelBuilder.Entity<VwTeamSetup>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTeamSetup");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwTeamSetupMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTeamSetupMainDetail");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.MemberCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Project)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwTestCostCenter1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTestCostCenter");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.Compid1).HasColumnName("compid");
            entity.Property(e => e.Issue).IsUnicode(false);
        });

        modelBuilder.Entity<VwThirdPartyChequesForClearing>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwThirdPartyChequesForClearing");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.ChequeNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Docno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOCNo");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaidVia)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Remarks)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
        });

        modelBuilder.Entity<VwTmoveStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTmoveStock");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("issuev");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
            entity.Property(e => e.Receipt)
                .HasColumnType("money")
                .HasColumnName("receipt");
            entity.Property(e => e.Receiptv).HasColumnType("money");
            entity.Property(e => e.Sale)
                .HasColumnType("money")
                .HasColumnName("sale");
            entity.Property(e => e.Salev)
                .HasColumnType("money")
                .HasColumnName("salev");
        });

        modelBuilder.Entity<VwTmoveStock1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTmoveStock1");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("issuev");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
            entity.Property(e => e.Receipt)
                .HasColumnType("money")
                .HasColumnName("receipt");
            entity.Property(e => e.Receiptv).HasColumnType("money");
            entity.Property(e => e.Sale)
                .HasColumnType("money")
                .HasColumnName("sale");
            entity.Property(e => e.Salev)
                .HasColumnType("money")
                .HasColumnName("salev");
        });

        modelBuilder.Entity<VwTmoveStock2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTmoveStock2");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("issuev");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
            entity.Property(e => e.Receipt)
                .HasColumnType("money")
                .HasColumnName("receipt");
            entity.Property(e => e.Receiptv).HasColumnType("money");
            entity.Property(e => e.Sale)
                .HasColumnType("money")
                .HasColumnName("sale");
            entity.Property(e => e.Salev)
                .HasColumnType("money")
                .HasColumnName("salev");
        });

        modelBuilder.Entity<VwTokenReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTokenReceipt");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaDetailsSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.FileInventoryFileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileInventorySerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InventoryType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.ProjectInventorySerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TokenReturn)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTokenReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTokenReturn");

            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankIdonly).HasColumnName("BankIDOnly");
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Crcash).HasColumnName("CRCash");
            entity.Property(e => e.Crcheque).HasColumnName("CRCheque");
            entity.Property(e => e.Crdiscount).HasColumnName("CRDiscount");
            entity.Property(e => e.CrinstrumentAmount).HasColumnName("CRInstrumentAmount");
            entity.Property(e => e.CrmembershipFee).HasColumnName("CRMembershipFee");
            entity.Property(e => e.Cronline).HasColumnName("CROnline");
            entity.Property(e => e.CrownAmount).HasColumnName("CROwnAmount");
            entity.Property(e => e.CrtoBankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CRToBankName");
            entity.Property(e => e.CrtotalAmountReceived).HasColumnName("CRTotalAmountReceived");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.ToBankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToBankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TokenReceiptSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTokenTracking>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTokenTracking");

            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Crcash).HasColumnName("CRCash");
            entity.Property(e => e.Crcheque).HasColumnName("CRCheque");
            entity.Property(e => e.Crdiscount).HasColumnName("CRDiscount");
            entity.Property(e => e.CrinstrumentAmount).HasColumnName("CRInstrumentAmount");
            entity.Property(e => e.CrmembershipFee).HasColumnName("CRMembershipFee");
            entity.Property(e => e.Cronline).HasColumnName("CROnline");
            entity.Property(e => e.CrownAmount).HasColumnName("CROwnAmount");
            entity.Property(e => e.CrtoBankName)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CRToBankName");
            entity.Property(e => e.CrtotalAmountReceived).HasColumnName("CRTotalAmountReceived");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonCommission)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.ToBankCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToBankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.TokenReceiptSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTotCon>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTotCons");

            entity.Property(e => e.Itemcon)
                .HasMaxLength(50)
                .HasColumnName("itemcon");
            entity.Property(e => e.Qqty)
                .HasColumnType("money")
                .HasColumnName("qqty");
        });

        modelBuilder.Entity<VwTrading>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTrading");

            entity.Property(e => e.BlockId).HasColumnName("BlockID");
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingTypeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BookingTypeID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.FileNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Gpa).HasColumnName("GPA");
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.SizeId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SizeID");
            entity.Property(e => e.SizeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Sod).HasColumnName("SOD");
            entity.Property(e => e.TpserialNo).HasColumnName("TPSerialNo");
            entity.Property(e => e.TradingType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTradingClosing>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTradingClosing");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FileNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PreparedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonFive)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonFiveName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonFour)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonFourName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonOne)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonOneName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonThree)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonThreeName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SalesPersonTwo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SalesPersonTwoName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SubDealer)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubDealerName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradingSubSegmentId).HasColumnName("TradingSubSegmentID");
            entity.Property(e => e.TradingSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradingType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTradingListing>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTradingListing");

            entity.Property(e => e.Address)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ApartmentType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Bedrooms)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BlockId).HasColumnName("BlockID");
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookingTypeId).HasColumnName("BookingTypeID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CustomerType)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DeviceId)
                .HasMaxLength(5000)
                .IsUnicode(false)
                .HasColumnName("DeviceID");
            entity.Property(e => e.FileNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.HoldByUsername)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlotNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetail)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailId).HasColumnName("PropertyDetailID");
            entity.Property(e => e.PropertyKsp).HasColumnName("PropertyKSP");
            entity.Property(e => e.PropertyKspname)
                .HasMaxLength(100)
                .HasColumnName("PropertyKSPName");
            entity.Property(e => e.Remarks)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Sector)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SizeId)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("SizeID");
            entity.Property(e => e.SizeName)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StreetNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.TradingType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTradingPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTradingPayments");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentType)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PreparedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.SizeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTradingReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTradingReceipts");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApprovedByUserId).HasColumnName("ApprovedByUserID");
            entity.Property(e => e.ApprovedDate).HasColumnType("datetime");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.BookingType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PreparedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.SizeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TpserialNo).HasColumnName("TPSerialNo");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTradingReceiptsPayment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTradingReceiptsPayments");

            entity.Property(e => e.AccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AccountNoTwo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BankNameTwo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PartyName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ReceivedFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceNoTwo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TradingSerialNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradingSrno)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TradingYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Types)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTradingTokenReceipt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTradingTokenReceipt");

            entity.Property(e => e.AccountNumber)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.BlockName).HasMaxLength(100);
            entity.Property(e => e.ClientName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.FileInventoryFileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.InventoryType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.Ntn)
                .HasMaxLength(50)
                .HasColumnName("ntn");
            entity.Property(e => e.PartyCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PartyName)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.ProjectInventory)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProjectInventorySerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProjectInventoryStatusUpdationKey)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDescription)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PropertyDetailsTitle)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TokenReturn)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTradingTokenReturn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTradingTokenReturn");

            entity.Property(e => e.AreaId).HasColumnName("AreaID");
            entity.Property(e => e.AreaName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.ClientName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwTransactionlog>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTransactionlogs");

            entity.Property(e => e.DocumentNarration)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.DocumentNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DocumentType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
        });

        modelBuilder.Entity<VwTwoMonthComp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwTwoMonthComp");

            entity.Property(e => e.Issueing1)
                .HasColumnType("money")
                .HasColumnName("ISSUEING1");
            entity.Property(e => e.Issueing2)
                .HasColumnType("money")
                .HasColumnName("ISSUEING2");
            entity.Property(e => e.Main)
                .HasMaxLength(13)
                .HasColumnName("MAIN");
            entity.Property(e => e.Opening1)
                .HasColumnType("money")
                .HasColumnName("OPENING1");
            entity.Property(e => e.Opening2)
                .HasColumnType("money")
                .HasColumnName("OPENING2");
            entity.Property(e => e.Purchase1)
                .HasColumnType("money")
                .HasColumnName("PURCHASE1");
            entity.Property(e => e.Purchase2)
                .HasColumnType("money")
                .HasColumnName("PURCHASE2");
        });

        modelBuilder.Entity<VwUserAndPartyMaping>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwUserAndPartyMaping");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeSrno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<VwUserPendingLead>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwUserPendingLeads");

            entity.Property(e => e.AllocatedDate).HasMaxLength(4000);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreationDate).HasMaxLength(4000);
            entity.Property(e => e.CustomerName).HasMaxLength(500);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.FollowUpdate).HasMaxLength(4000);
            entity.Property(e => e.LeadDate).HasMaxLength(4000);
            entity.Property(e => e.LeadDrop)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.LeaderName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Nextfollowupdate).HasMaxLength(4000);
            entity.Property(e => e.PendingDrop)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ProjectName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Registered)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(5000)
                .IsUnicode(false);
            entity.Property(e => e.Responded)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.Source)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Step)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwUserPendingLeadsSummary>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwUserPendingLeadsSummary");

            entity.Property(e => e.ActiveDropRatio).HasMaxLength(4000);
            entity.Property(e => e.ConversionRatio).HasMaxLength(4000);
            entity.Property(e => e.Followedup)
                .HasMaxLength(4000)
                .HasColumnName("followedup");
            entity.Property(e => e.FollowupDays)
                .HasMaxLength(4000)
                .HasColumnName("followupDays");
            entity.Property(e => e.PendingDropRatio).HasMaxLength(4000);
            entity.Property(e => e.Pendingfollowup).HasMaxLength(4000);
            entity.Property(e => e.Project)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ResponseTime).HasMaxLength(4000);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.UserType)
                .HasMaxLength(7)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwVdetailVmainPnr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwVDetailVMainPNR");

            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate).HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedUserName1)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Modified_UserName");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubProjectId).HasColumnName("SubProjectID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("User_name");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
            entity.Property(e => e.VType1)
                .HasMaxLength(10)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<VwVehicleRegistration>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwVehicleRegistration");

            entity.Property(e => e.AllowedFuel).HasColumnName("Allowed_Fuel");
            entity.Property(e => e.AreaDepartmentOfAllocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Area_Department_of_Allocation");
            entity.Property(e => e.AssigningDate).HasColumnName("Assigning_Date");
            entity.Property(e => e.ChassissNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Chassiss_No");
            entity.Property(e => e.ClassOfVehicle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Class_ofVehicle");
            entity.Property(e => e.Color)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.FilterChange).HasColumnName("Filter_Change");
            entity.Property(e => e.FuelConsumption)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Fuel_Consumption");
            entity.Property(e => e.FuelConsumptionDesc).HasColumnName("Fuel_ConsumptionDesc");
            entity.Property(e => e.FuelUsed)
                .HasMaxLength(8)
                .IsUnicode(false)
                .HasColumnName("Fuel_Used");
            entity.Property(e => e.GreaseOil).HasColumnName("Grease_oil");
            entity.Property(e => e.HireDateEnd).HasColumnName("Hire_Date_End");
            entity.Property(e => e.HireDateStart).HasColumnName("Hire_Date_Start");
            entity.Property(e => e.HireFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Hire_From");
            entity.Property(e => e.HiredDate).HasColumnName("Hired_Date");
            entity.Property(e => e.HorsePower)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Horse_Power");
            entity.Property(e => e.Insurance)
                .HasMaxLength(31)
                .IsUnicode(false);
            entity.Property(e => e.LeasedDate).HasColumnName("Leased_Date");
            entity.Property(e => e.LeasedDateEnd).HasColumnName("Leased_Date_end");
            entity.Property(e => e.LeasedDateStart).HasColumnName("Leased_Date_start");
            entity.Property(e => e.LeasedFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Leased_From");
            entity.Property(e => e.Make)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MaximumLoad).HasColumnName("Maximum_Load");
            entity.Property(e => e.MeterReadingAtAssignment).HasColumnName("Meter_Reading_At_Assignment");
            entity.Property(e => e.NatureOfUse)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Nature_of_Use");
            entity.Property(e => e.OilChange).HasColumnName("Oil_Change");
            entity.Property(e => e.PaymentOfToken)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Payment_ofToken");
            entity.Property(e => e.PurchasedDate).HasColumnName("Purchased_Date");
            entity.Property(e => e.PurchasedFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Purchased_From");
            entity.Property(e => e.RegistrationNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Registration_No");
            entity.Property(e => e.RemarksCo)
                .IsUnicode(false)
                .HasColumnName("Remarks_CO");
            entity.Property(e => e.RemarksHire)
                .IsUnicode(false)
                .HasColumnName("Remarks_Hire");
            entity.Property(e => e.RemarksLeased)
                .IsUnicode(false)
                .HasColumnName("Remarks_Leased");
            entity.Property(e => e.RepairAndMaintenance)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Repair_And_Maintenance");
            entity.Property(e => e.RepairAndMaintenanceDesc).HasColumnName("Repair_And_MaintenanceDesc");
            entity.Property(e => e.ResponsiblePerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Responsible_Person");
            entity.Property(e => e.SUser).HasColumnName("sUser");
            entity.Property(e => e.ServiceOrTuning).HasColumnName("Service_or_Tuning");
            entity.Property(e => e.SittingCapacityWithDriver)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("Sitting_capacity_with_Driver");
            entity.Property(e => e.SrNo).HasColumnName("Sr_No");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TokenAmount).HasColumnName("Token_Amount");
            entity.Property(e => e.TollTax)
                .HasMaxLength(31)
                .IsUnicode(false)
                .HasColumnName("Toll_Tax");
            entity.Property(e => e.TollTaxDesc).HasColumnName("Toll_TaxDesc");
            entity.Property(e => e.TotalFuelTankCapacity).HasColumnName("Total_Fuel_Tank_Capacity");
            entity.Property(e => e.TypeOfBody)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Type_of_Body");
            entity.Property(e => e.TypeOfOwnership)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("Type_ofOwnership");
            entity.Property(e => e.TypeOfVehicle)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("Type_ofVehicle");
            entity.Property(e => e.Uid)
                .HasMaxLength(50)
                .HasColumnName("uid");
            entity.Property(e => e.ValidityDate).HasColumnName("Validity_Date");
            entity.Property(e => e.VehicleCost).HasColumnName("Vehicle_Cost");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.YearOfManufacturing)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Year_of_Manufacturing");
        });

        modelBuilder.Entity<VwVendorCommission>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwVendorCommission");

            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.Bpname)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BPName");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.PlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<VwVendorCommissionDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwVendorCommissionDetail");

            entity.Property(e => e.Area)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AreaSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.PlanName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwVendorCommissionMainDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwVendorCommissionMainDetail");

            entity.Property(e => e.AreaSerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Bpcode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BPCode");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
        });

        modelBuilder.Entity<VwVendorItemsDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_VendorItems_Detail");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Item_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.SNo).HasColumnName("S_No");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_No");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<VwVendorItemsMain>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vw_vendorItems_Main");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.BpName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("BP_Name");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.SerialNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Serial_No");
        });

        modelBuilder.Entity<VwVisitor>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwVisitor");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.Contact)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Poc).HasColumnName("POC");
            entity.Property(e => e.Pocname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("POCName");
            entity.Property(e => e.Purpose)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.RefferedBy)
                .HasMaxLength(80)
                .IsUnicode(false);
            entity.Property(e => e.RefferedById)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("RefferedByID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Source)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.TimeIn).HasColumnType("datetime");
            entity.Property(e => e.TimeOut).HasColumnType("datetime");
            entity.Property(e => e.Type)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Types)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VisitorName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwVmainPnr>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwVMainPNR");

            entity.Property(e => e.Address).HasColumnName("address");
            entity.Property(e => e.AgentCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .HasColumnName("fax");
            entity.Property(e => e.ModifiedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Modified_Date");
            entity.Property(e => e.ModifiedUserId).HasColumnName("Modified_User_ID");
            entity.Property(e => e.ModifiedUserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_User_Name");
            entity.Property(e => e.ModifiedWs)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Modified_WS");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(50)
                .HasColumnName("phoneno");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.ReviewedBy)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReviewedById).HasColumnName("ReviewedByID");
            entity.Property(e => e.ReviewedDate).HasColumnType("datetime");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.SubSegment)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Url)
                .HasMaxLength(50)
                .HasColumnName("url");
            entity.Property(e => e.UserName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.VCancel).HasColumnName("vCancel");
            entity.Property(e => e.VCheqDate).HasColumnName("vCheqDate");
            entity.Property(e => e.VCheqNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("vCheqNo");
            entity.Property(e => e.VConfirmedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vConfirmedBy");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VSuperwisedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vSuperwisedBy");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<VwVoucherPrint>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwVoucherPrint");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.GlCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_year");
            entity.Property(e => e.Invno)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("invno");
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.VCheqNo)
                .HasMaxLength(100)
                .HasColumnName("vCheqNo");
            entity.Property(e => e.VConfirmedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vConfirmedBy");
            entity.Property(e => e.VDate)
                .HasColumnType("datetime")
                .HasColumnName("vDate");
            entity.Property(e => e.VEnterDate)
                .HasColumnType("datetime")
                .HasColumnName("vEnterDate");
            entity.Property(e => e.VKey)
                .HasMaxLength(16)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("vKey");
            entity.Property(e => e.VNo)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("vType");
            entity.Property(e => e.VUserName)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vUserName");
            entity.Property(e => e.Vcheqdate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("VCHEQDATE");
            entity.Property(e => e.VoucherType)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Vpost).HasColumnName("VPOST");
        });

        modelBuilder.Entity<VwWarehouse>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWarehouse");

            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName).HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwWarehouseGrn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWarehouseGRN");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Item_Group");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Whaddress)
                .IsUnicode(false)
                .HasColumnName("whaddress");
            entity.Property(e => e.Whlocation)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("whlocation");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whno).HasColumnName("WHNo");
        });

        modelBuilder.Entity<VwWarehouseReceiptNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwWarehouseReceiptNew");

            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.ToSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
        });

        modelBuilder.Entity<VwWarehouseReceiptNewDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwWarehouseReceiptNewDetail");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BatchNumber)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RequisitionSubSegmentId).HasColumnName("RequisitionSubSegmentID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnameFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameFrom");
            entity.Property(e => e.WhnameTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameTo");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");
        });

        modelBuilder.Entity<VwWarehouseReceiptNewReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWarehouseReceiptNewReport");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.ToSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnameFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameFrom");
            entity.Property(e => e.WhnameTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameTo");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");
        });

        modelBuilder.Entity<VwWarehouseSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWarehouse_SubSegment");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName).HasColumnName("SubSegment_name");
            entity.Property(e => e.Whaddress)
                .IsUnicode(false)
                .HasColumnName("whaddress");
            entity.Property(e => e.Whincharge)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whincharge");
            entity.Property(e => e.Whinchargecontactno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("whinchargecontactno");
            entity.Property(e => e.Whlocation)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("whlocation");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whno).HasColumnName("whno");
            entity.Property(e => e.Whstotagecapacity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("whstotagecapacity");
        });

        modelBuilder.Entity<VwWarehouseTransferNew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwWarehouseTransferNew");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.ToSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
        });

        modelBuilder.Entity<VwWarehouseTransferNewDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwWarehouseTransferNewDetail");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.BatchNumber)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RequisitionSubSegmentId).HasColumnName("RequisitionSubSegmentID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnameFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameFrom");
            entity.Property(e => e.WhnameTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameTo");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");
        });

        modelBuilder.Entity<VwWarehouseTransferNewMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwWarehouseTransferNewMasterDetail");

            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
        });

        modelBuilder.Entity<VwWarehouseTransferNewReport>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWarehouseTransferNewReport");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentName).HasMaxLength(50);
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.FromSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.ToSubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnameFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameFrom");
            entity.Property(e => e.WhnameTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHNameTo");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");
        });

        modelBuilder.Entity<VwWarehouseWiseStock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWarehouseWiseStock");

            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.SubSegmentIdMain).HasColumnName("SubSegment_ID_Main");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
        });

        modelBuilder.Entity<VwWoconsSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWOConsSum");

            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("tr_wo");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("wo_desc");
        });

        modelBuilder.Entity<VwWodeptWise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWODeptWise");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("tr_wo");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("wo_desc");
        });

        modelBuilder.Entity<VwWodetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWODetail");

            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("grnno");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_qty");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("tr_wo");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("wo_desc");
        });

        modelBuilder.Entity<VwWorkingScheduleOvertiming>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWorkingSchedule_Overtiming");

            entity.Property(e => e.AtDesignation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtEmployee)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtScale)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Days)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Per)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RulesLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwWorkingScheduleWorkTiming>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWorkingSchedule_WorkTiming");

            entity.Property(e => e.AtDesignation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtEmployee)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtScale)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Days)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.EndTiming).HasColumnType("datetime");
            entity.Property(e => e.RulesLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTiming).HasColumnType("datetime");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwWorkingScheduleWorkingHour>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWorkingSchedule_WorkingHours");

            entity.Property(e => e.AtDesignation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtEmployee)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtScale)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Days)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.RulesLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
        });

        modelBuilder.Entity<VwWostoreSecWise>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWOStoreSecWise");

            entity.Property(e => e.StoreSec).HasMaxLength(13);
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("tr_wo");
            entity.Property(e => e.Value).HasColumnType("money");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("wo_desc");
        });

        modelBuilder.Entity<VwWosummery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWOsummery");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("tr_wo");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwWowridetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwWOWRIDetail");

            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("grnno");
            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.IssueV)
                .HasColumnType("money")
                .HasColumnName("issueV");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.Receipt)
                .HasColumnType("money")
                .HasColumnName("receipt");
            entity.Property(e => e.ReceiptV)
                .HasColumnType("money")
                .HasColumnName("receiptV");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("tr_wo");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("type");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("wo_desc");
        });

        modelBuilder.Entity<VwYearComparison>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwYearComparison");

            entity.Property(e => e.Keyfield)
                .HasMaxLength(20)
                .HasColumnName("keyfield");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("tr_constyp");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("tr_foc");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.Type).HasMaxLength(1);
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<VwYearlyRateComp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwYearlyRateComp");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.MRate)
                .HasColumnType("money")
                .HasColumnName("mRate");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<VwYearlyRateCompDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwYearlyRateCompDetail");

            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("grnno");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.MRate)
                .HasColumnType("money")
                .HasColumnName("mRate");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_ACCEPT");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<VwYearlyRicomp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwYearlyRIComp");

            entity.Property(e => e.Issues).HasColumnType("money");
            entity.Property(e => e.Receipts).HasColumnType("money");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<Vwcashandbank>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwcashandbanks");

            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.NetBalance).HasColumnName("Net Balance");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SegmentName)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("Segment_name");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VType)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("vType");
            entity.Property(e => e.VType1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<Vwccsumdet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwccsumdet");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Vwchallan>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwchallan");

            entity.Property(e => e.AdAddress1)
                .HasMaxLength(100)
                .HasColumnName("Ad_address1");
            entity.Property(e => e.AdStreg)
                .HasMaxLength(17)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ad_STReg");
            entity.Property(e => e.Bname)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("bname");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("gl_desc");
            entity.Property(e => e.SBilty)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Bilty");
            entity.Property(e => e.SBuyer)
                .HasMaxLength(50)
                .HasColumnName("s_Buyer");
            entity.Property(e => e.SDate)
                .HasColumnType("datetime")
                .HasColumnName("s_date");
            entity.Property(e => e.SDriver)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_driver");
            entity.Property(e => e.SIncValue).HasColumnName("s_IncValue");
            entity.Property(e => e.SInvno).HasColumnName("s_invno");
            entity.Property(e => e.SOrderDate)
                .HasColumnType("datetime")
                .HasColumnName("s_orderDate");
            entity.Property(e => e.SOrderNo)
                .HasMaxLength(50)
                .HasColumnName("s_orderNo");
            entity.Property(e => e.SPipes).HasColumnName("s_Pipes");
            entity.Property(e => e.SQtyBags).HasColumnName("s_Qty_bags");
            entity.Property(e => e.SRefDate)
                .HasColumnType("datetime")
                .HasColumnName("s_refDate");
            entity.Property(e => e.SRefNo)
                .HasMaxLength(50)
                .HasColumnName("s_refNo");
            entity.Property(e => e.SSaleRate)
                .HasMaxLength(53)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_SaleRate");
            entity.Property(e => e.SSaleValue).HasColumnName("s_SaleValue");
            entity.Property(e => e.SSalesTaxValue).HasColumnName("s_SalesTaxValue");
            entity.Property(e => e.SSerial).HasColumnName("s_serial");
            entity.Property(e => e.SSfed).HasColumnName("s_SFED");
            entity.Property(e => e.SStper).HasColumnName("s_stper");
            entity.Property(e => e.SType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_type");
            entity.Property(e => e.SUnit)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_Unit");
            entity.Property(e => e.SVehicle)
                .HasMaxLength(25)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("s_vehicle");
        });

        modelBuilder.Entity<Vwdo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwdo");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.DoBill)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_Bill");
            entity.Property(e => e.DoDate)
                .HasColumnType("datetime")
                .HasColumnName("DO_Date");
            entity.Property(e => e.DoDelby)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("DO_Delby");
            entity.Property(e => e.DoGrnno)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_Grnno");
            entity.Property(e => e.DoItdesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DO_ITDesc");
            entity.Property(e => e.DoItem)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("DO_Item");
            entity.Property(e => e.DoNo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_no");
            entity.Property(e => e.DoParty)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_Party");
            entity.Property(e => e.DoPi)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_PI");
            entity.Property(e => e.DoPo)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DO_PO");
            entity.Property(e => e.DoQty).HasColumnName("DO_Qty");
            entity.Property(e => e.DoRemarks)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("DO_Remarks");
            entity.Property(e => e.DoSrno).HasColumnName("DO_Srno");
            entity.Property(e => e.DoType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("DO_Type");
            entity.Property(e => e.DoUnit)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DO_Unit");
            entity.Property(e => e.DoValue).HasColumnName("DO_Value");
            entity.Property(e => e.DoVehicle)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DO_vehicle");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("Gl_Year");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("grnno");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("keyfield");
        });

        modelBuilder.Entity<Vweditinglist>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vweditinglist");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("GRNNO");
            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("it_avgval");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("IT_CGL");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasColumnType("ntext")
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval)
                .HasColumnType("money")
                .HasColumnName("it_opagval");
            entity.Property(e => e.ItOpbal)
                .HasColumnType("money")
                .HasColumnName("it_opbal");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("IT_PGL");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(20)
                .HasColumnName("keyfield");
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MPono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .IsFixedLength()
                .HasColumnName("PARTY");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("PRTY_NAME");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrCartrage)
                .HasColumnType("money")
                .HasColumnName("tr_cartrage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("TR_FR");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("TR_OTHER");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_Qty");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("WO_DESC");
        });

        modelBuilder.Entity<Vweditlisting>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vweditlisting");

            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("GRNNO");
            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("it_avgval");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("IT_CGL");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasColumnType("ntext")
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval)
                .HasColumnType("money")
                .HasColumnName("it_opagval");
            entity.Property(e => e.ItOpbal)
                .HasColumnType("money")
                .HasColumnName("it_opbal");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("IT_PGL");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.KeyField).HasMaxLength(20);
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MPono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("PARTY");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrCartrage)
                .HasColumnType("money")
                .HasColumnName("tr_cartrage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("TR_FR");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("TR_OTHER");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_Qty");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
        });

        modelBuilder.Entity<Vweditlistingall>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vweditlistingall");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("grnno");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_qty");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("type");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<Vwfacon>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwfacon");

            entity.Property(e => e.CName).HasColumnName("C_name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.FYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f_year");
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.NetBalance).HasColumnName("Net Balance");
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Segment_ID");
            entity.Property(e => e.SegmentName).HasColumnName("Segment_name");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.SubSegmentName).HasColumnName("SubSegment_name");
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.UserName).HasColumnName("User_name");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VPostedByDate).HasColumnName("vPostedByDate");
            entity.Property(e => e.VPostedByName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vPostedByName");
            entity.Property(e => e.VPostedId).HasColumnName("vPostedId");
            entity.Property(e => e.VType)
                .HasMaxLength(3)
                .IsFixedLength()
                .HasColumnName("vType");
            entity.Property(e => e.VType1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<VwgrnPo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwgrn_po");

            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("GRNNO");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.Podate).HasColumnName("podate");
            entity.Property(e => e.Pono).HasColumnName("pono");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.Reqdate).HasColumnName("reqdate");
            entity.Property(e => e.Reqno).HasColumnName("reqno");
            entity.Property(e => e.Supliercode)
                .HasMaxLength(50)
                .HasColumnName("supliercode");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("TR_Accept");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("TR_QTY");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("TR_VALUE");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(25)
                .HasColumnName("uom");
        });

        modelBuilder.Entity<Vwigp>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwigp");

            entity.Property(e => e.CellNo)
                .HasMaxLength(50)
                .HasColumnName("Cell_no");
            entity.Property(e => e.DlCode).HasColumnName("DL_code");
            entity.Property(e => e.DlDate).HasColumnName("DL_date");
            entity.Property(e => e.DriverName).HasColumnName("Driver_name");
            entity.Property(e => e.GateInDate).HasColumnName("GateIn_date");
            entity.Property(e => e.GateInNo).HasColumnName("GateIn_no");
            entity.Property(e => e.GinDate).HasColumnName("GIN_date");
            entity.Property(e => e.GinNo).HasColumnName("GIN_no");
            entity.Property(e => e.IgpDate).HasColumnName("Igp_date");
            entity.Property(e => e.IgpNo).HasColumnName("Igp_no");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ModeofPacking).HasColumnName("Modeof_packing");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.PoDate).HasColumnName("PO_date");
            entity.Property(e => e.PoNo).HasColumnName("PO_NO");
            entity.Property(e => e.ReceiveQty).HasColumnName("Receive_qty");
            entity.Property(e => e.SrNo).HasColumnName("Sr_no");
            entity.Property(e => e.SupplierCode).HasColumnName("Supplier_code");
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .HasColumnName("Vehicle_No");
        });

        modelBuilder.Entity<Vwigpstd>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwigpstd");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.DeliveryChallanNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GateInNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Posno).HasColumnName("POSno");
            entity.Property(e => e.Ppqty).HasColumnName("PPQty");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Status)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("status");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalValue).HasColumnType("decimal(28, 7)");
            entity.Property(e => e.Type)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.Value).HasColumnType("decimal(28, 7)");
        });

        modelBuilder.Entity<Vwinventory>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VWInventory");

            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
        });

        modelBuilder.Entity<Vwitemmmmm>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwitemmmmm");

            entity.Property(e => e.BarCode).HasMaxLength(50);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_CODE");
            entity.Property(e => e.ItemGroup)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ITEM_Group");
            entity.Property(e => e.ItemName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("ITEM_Name");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<Vwitemsum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VWITEMSUM");

            entity.Property(e => e.Cqty)
                .HasColumnType("money")
                .HasColumnName("CQTY");
            entity.Property(e => e.Cvalue)
                .HasColumnType("money")
                .HasColumnName("CVALUE");
            entity.Property(e => e.Issue).HasColumnType("money");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.Ivalue).HasColumnType("money");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.Rec)
                .HasColumnType("money")
                .HasColumnName("REC");
            entity.Property(e => e.Rvalue)
                .HasColumnType("money")
                .HasColumnName("RVALUE");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Vwitemsumoth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VWITEMSUMOTH");

            entity.Property(e => e.Cqty)
                .HasColumnType("money")
                .HasColumnName("CQTY");
            entity.Property(e => e.Cvalue)
                .HasColumnType("money")
                .HasColumnName("CVALUE");
            entity.Property(e => e.Issue).HasColumnType("money");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.Ivalue).HasColumnType("money");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
            entity.Property(e => e.Rec)
                .HasColumnType("money")
                .HasColumnName("REC");
            entity.Property(e => e.Rvalue)
                .HasColumnType("money")
                .HasColumnName("RVALUE");
        });

        modelBuilder.Entity<Vwitquery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwitquery");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("it_partno");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Vwledger>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwledger");

            entity.Property(e => e.Ccdesc)
                .HasMaxLength(50)
                .HasColumnName("ccdesc");
            entity.Property(e => e.Gdate).HasColumnName("gdate");
            entity.Property(e => e.Grnno).HasColumnName("grnno");
            entity.Property(e => e.Itdesc)
                .HasMaxLength(250)
                .HasColumnName("itdesc");
            entity.Property(e => e.Itunit)
                .HasMaxLength(10)
                .HasColumnName("itunit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("type");
        });

        modelBuilder.Entity<VwmainstoreopeningOth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwmainstoreopeningOth");

            entity.Property(e => e.Mainstore)
                .HasMaxLength(50)
                .HasColumnName("mainstore");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
        });

        modelBuilder.Entity<Vwmainstoresum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwmainstoresum");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Vwmainsum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VWMAINSUM");

            entity.Property(e => e.Main)
                .HasMaxLength(2)
                .HasColumnName("main");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Vwmaxrateact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwmaxrateact");

            entity.Property(e => e.Itemcode)
                .HasMaxLength(50)
                .HasColumnName("itemcode");
            entity.Property(e => e.MaxrateAct).HasColumnType("money");
            entity.Property(e => e.TrGrnnomaxxact)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("tr_grnnomaxxact");
        });

        modelBuilder.Entity<Vwmaxratehistoryact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwmaxratehistoryact");

            entity.Property(e => e.Grndatemax).HasColumnName("grndatemax");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Maxrateact)
                .HasColumnType("money")
                .HasColumnName("maxrateact");
            entity.Property(e => e.Partymax)
                .HasMaxLength(31)
                .IsFixedLength()
                .HasColumnName("partymax");
            entity.Property(e => e.TrGrnnomaxx)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("tr_grnnomaxx");
        });

        modelBuilder.Entity<Vwminrateact>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwminrateact");

            entity.Property(e => e.Itemcodemin)
                .HasMaxLength(50)
                .HasColumnName("itemcodemin");
            entity.Property(e => e.MinrateAct).HasColumnType("money");
            entity.Property(e => e.TrGrnnominnact)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("tr_grnnominnact");
        });

        modelBuilder.Entity<VwminratehistoryAct>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwminratehistoryAct");

            entity.Property(e => e.Grndateminn).HasColumnName("grndateminn");
            entity.Property(e => e.ItCodeMin)
                .HasMaxLength(50)
                .HasColumnName("it_codeMin");
            entity.Property(e => e.ItDescMin)
                .HasMaxLength(250)
                .HasColumnName("it_descMin");
            entity.Property(e => e.ItUnitMin)
                .HasMaxLength(10)
                .HasColumnName("it_unitMin");
            entity.Property(e => e.Minrateact)
                .HasColumnType("money")
                .HasColumnName("minrateact");
            entity.Property(e => e.Partymin)
                .HasMaxLength(31)
                .IsFixedLength()
                .HasColumnName("partymin");
            entity.Property(e => e.TrGrnnominn)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("tr_grnnominn");
        });

        modelBuilder.Entity<VwmisdailystsumOth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwmisdailystsumOth");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.Mainstore)
                .HasMaxLength(50)
                .HasColumnName("mainstore");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
            entity.Property(e => e.Receipt).HasColumnType("money");
        });

        modelBuilder.Entity<Vwopening>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwopening");

            entity.Property(e => e.CompId).HasColumnName("Comp_Id");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Opdate)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("opdate");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("opening");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("opvalue");
        });

        modelBuilder.Entity<Vwoptran>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwoptrans");

            entity.Property(e => e.Opdate)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasColumnName("opdate");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwpArtyGrade>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwpArtyGrade");

            entity.Property(e => e.BpType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BP_Type");
            entity.Property(e => e.BusinessPartnersName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("Business_Partners_Name");
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Expr1).HasMaxLength(50);
            entity.Property(e => e.Narration).HasMaxLength(250);
            entity.Property(e => e.SegmentId).HasColumnName("Segment_ID");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VType)
                .HasMaxLength(50)
                .HasColumnName("vType");
        });

        modelBuilder.Entity<Vwpilastmonth>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VWPILASTMonth");

            entity.Property(e => e.Cons).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
        });

        modelBuilder.Entity<Vwpilastyear>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VWPILASTYEAR");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Cons).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<VwpithisYear>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VWPIThisYEAR");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Cons).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<Vwpo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwpo");

            entity.Property(e => e.AdAddress1)
                .HasMaxLength(100)
                .HasColumnName("Ad_address1");
            entity.Property(e => e.AdAddress2)
                .HasMaxLength(100)
                .HasColumnName("Ad_address2");
            entity.Property(e => e.AdCity)
                .HasMaxLength(50)
                .HasColumnName("ad_city");
            entity.Property(e => e.AdCountry)
                .HasMaxLength(50)
                .HasColumnName("ad_country");
            entity.Property(e => e.Bank)
                .HasMaxLength(50)
                .HasColumnName("bank");
            entity.Property(e => e.Checkimport).HasColumnName("checkimport");
            entity.Property(e => e.Clearingagent)
                .HasMaxLength(50)
                .HasColumnName("clearingagent");
            entity.Property(e => e.Currency)
                .HasMaxLength(10)
                .HasColumnName("currency");
            entity.Property(e => e.DeliveryPlace).HasColumnName("delivery_place");
            entity.Property(e => e.DelivryDate).HasColumnName("delivry_date");
            entity.Property(e => e.Forwardcontractno)
                .HasMaxLength(50)
                .HasColumnName("forwardcontractno");
            entity.Property(e => e.Forwarddate).HasColumnName("forwarddate");
            entity.Property(e => e.Importvia)
                .HasMaxLength(20)
                .HasColumnName("importvia");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.Lcdate).HasColumnName("lcdate");
            entity.Property(e => e.Lcno)
                .HasMaxLength(50)
                .HasColumnName("lcno");
            entity.Property(e => e.Lcterm)
                .HasMaxLength(50)
                .HasColumnName("lcterm");
            entity.Property(e => e.ModeofPacking).HasColumnName("Modeof_packing");
            entity.Property(e => e.Mop)
                .HasMaxLength(30)
                .HasColumnName("MOP");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.PoDate).HasColumnName("PO_DATE");
            entity.Property(e => e.PoDiscountper).HasColumnName("po_discountper");
            entity.Property(e => e.PoItemno)
                .HasMaxLength(50)
                .HasColumnName("PO_ITEMNO");
            entity.Property(e => e.PoNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PO_NO");
            entity.Property(e => e.PoPi).HasColumnName("PO_PI");
            entity.Property(e => e.PoQtyord)
                .HasColumnType("money")
                .HasColumnName("PO_QTYORD");
            entity.Property(e => e.PoQuotno)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("PO_QUOTNO");
            entity.Property(e => e.PoRate)
                .HasColumnType("money")
                .HasColumnName("PO_RATE");
            entity.Property(e => e.PoStaxper).HasColumnName("po_staxper");
            entity.Property(e => e.PoValue)
                .HasColumnType("money")
                .HasColumnName("po_Value");
            entity.Property(e => e.Receiptdate).HasColumnName("receiptdate");
            entity.Property(e => e.Receiptno)
                .HasMaxLength(50)
                .HasColumnName("receiptno");
            entity.Property(e => e.Remarks).HasMaxLength(50);
            entity.Property(e => e.Shippedfrom).HasColumnName("shippedfrom");
            entity.Property(e => e.Shippedto).HasColumnName("shippedto");
            entity.Property(e => e.Shippingdate).HasColumnName("shippingdate");
            entity.Property(e => e.Shippingterm)
                .HasMaxLength(50)
                .HasColumnName("shippingterm");
            entity.Property(e => e.Shippingvia)
                .HasMaxLength(20)
                .HasColumnName("shippingvia");
            entity.Property(e => e.Spotrate).HasColumnName("spotrate");
            entity.Property(e => e.Srno).HasColumnName("srno");
            entity.Property(e => e.Terms)
                .HasMaxLength(25)
                .HasColumnName("terms");
            entity.Property(e => e.Uom)
                .HasMaxLength(50)
                .HasColumnName("UOM");
        });

        modelBuilder.Entity<Vwprytrcpt>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwprytrcpt");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("party");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.Quantity).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwrcptSum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwrcptSum");

            entity.Property(e => e.Main).HasMaxLength(2);
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<VwrcptSum1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwrcptSum1");

            entity.Property(e => e.Main).HasMaxLength(13);
            entity.Property(e => e.Value).HasColumnType("money");
        });

        modelBuilder.Entity<Vwregister>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwregister");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("grnno");
            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("issue");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("issuev");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("prty_name");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.Receipt).HasColumnType("money");
            entity.Property(e => e.ReceiptV).HasColumnType("money");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("type");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Vwrol>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwrol");

            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("it_partno");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<VwrptPiop>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwrptPIOP");

            entity.Property(e => e.Bal)
                .HasColumnType("money")
                .HasColumnName("bal");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.Openingyear)
                .HasMaxLength(9)
                .HasColumnName("openingyear");
        });

        modelBuilder.Entity<Vwrptpi>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwrptpi");

            entity.Property(e => e.Addres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addres");
            entity.Property(e => e.Bal)
                .HasColumnType("money")
                .HasColumnName("bal");
            entity.Property(e => e.CcCode)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("cc_code");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Make)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("make");
            entity.Property(e => e.MillRef)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("mill_ref");
            entity.Property(e => e.PiDate)
                .HasColumnType("datetime")
                .HasColumnName("PI_DATE");
            entity.Property(e => e.PiItemno)
                .HasMaxLength(13)
                .IsFixedLength()
                .HasColumnName("PI_ITEMNO");
            entity.Property(e => e.PiLocalho)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("pi_localho");
            entity.Property(e => e.PiNature)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("PI_NATURE");
            entity.Property(e => e.PiNo)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("PI_NO");
            entity.Property(e => e.PiQty)
                .HasColumnType("money")
                .HasColumnName("PI_QTY");
            entity.Property(e => e.PiRate)
                .HasColumnType("money")
                .HasColumnName("PI_RATE");
            entity.Property(e => e.PiReqdate)
                .HasColumnType("datetime")
                .HasColumnName("PI_REQDATE");
            entity.Property(e => e.PiType)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("PI_TYPE");
            entity.Property(e => e.PidRemarks)
                .HasMaxLength(200)
                .HasColumnName("pid_remarks");
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .HasColumnName("remarks");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<Vwrptpinew>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwrptpinew");

            entity.Property(e => e.Addres)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("addres");
            entity.Property(e => e.Bal)
                .HasColumnType("money")
                .HasColumnName("bal");
            entity.Property(e => e.CValue)
                .HasColumnType("money")
                .HasColumnName("cVALUE");
            entity.Property(e => e.CcCode)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("cc_code");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.Commuissue)
                .HasColumnType("money")
                .HasColumnName("COMMUISSUE");
            entity.Property(e => e.Commurece)
                .HasColumnType("money")
                .HasColumnName("COMMURECE");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Cqty)
                .HasColumnType("money")
                .HasColumnName("CQTY");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Lastyearflag).HasColumnName("lastyearflag");
            entity.Property(e => e.Make)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("make");
            entity.Property(e => e.MillRef)
                .HasMaxLength(20)
                .IsFixedLength()
                .HasColumnName("mill_ref");
            entity.Property(e => e.PiDate)
                .HasColumnType("datetime")
                .HasColumnName("PI_DATE");
            entity.Property(e => e.PiItemno)
                .HasMaxLength(13)
                .IsFixedLength()
                .HasColumnName("PI_ITEMNO");
            entity.Property(e => e.PiLocalho)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("pi_localho");
            entity.Property(e => e.PiNature)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("PI_NATURE");
            entity.Property(e => e.PiNo)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("PI_NO");
            entity.Property(e => e.PiQty)
                .HasColumnType("money")
                .HasColumnName("PI_QTY");
            entity.Property(e => e.PiRate)
                .HasColumnType("money")
                .HasColumnName("PI_RATE");
            entity.Property(e => e.PiReqdate)
                .HasColumnType("datetime")
                .HasColumnName("PI_REQDATE");
            entity.Property(e => e.PiType)
                .HasMaxLength(1)
                .IsFixedLength()
                .HasColumnName("PI_TYPE");
            entity.Property(e => e.PidRemarks)
                .HasMaxLength(200)
                .HasColumnName("pid_remarks");
            entity.Property(e => e.Remarks)
                .HasMaxLength(100)
                .HasColumnName("remarks");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("year");
        });

        modelBuilder.Entity<Vwslowmovingitem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwslowmovingitem");

            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("it_avgval");
            entity.Property(e => e.ItCRate)
                .HasColumnType("money")
                .HasColumnName("IT_cRATE");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("it_code");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("it_partno");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
        });

        modelBuilder.Entity<Vwstock>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwstock");

            entity.Property(e => e.Cqty)
                .HasColumnType("money")
                .HasColumnName("CQTY");
            entity.Property(e => e.Cvalue)
                .HasColumnType("money")
                .HasColumnName("CVALUE");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Op)
                .HasColumnType("money")
                .HasColumnName("OP");
            entity.Property(e => e.Opval)
                .HasColumnType("money")
                .HasColumnName("OPVAL");
        });

        modelBuilder.Entity<Vwstoredet>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwstoredet");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Vwstoresum>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwstoresum");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("tr_cc");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Value)
                .HasColumnType("money")
                .HasColumnName("value");
        });

        modelBuilder.Entity<Vwsummery>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwsummery");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("ISSUE");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("ISSUEV");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("OPENING");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("OPValue");
            entity.Property(e => e.Rece)
                .HasColumnType("money")
                .HasColumnName("RECE");
            entity.Property(e => e.Recev)
                .HasColumnType("money")
                .HasColumnName("RECEV");
        });

        modelBuilder.Entity<Vwsummery1>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwsummery1");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("ISSUE");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("ISSUEV");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("OPENING");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("OPValue");
            entity.Property(e => e.Rece)
                .HasColumnType("money")
                .HasColumnName("RECE");
            entity.Property(e => e.Recev)
                .HasColumnType("money")
                .HasColumnName("RECEV");
        });

        modelBuilder.Entity<Vwsummery2>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwsummery2");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("ISSUE");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("ISSUEV");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("OPENING");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("OPValue");
            entity.Property(e => e.Rece)
                .HasColumnType("money")
                .HasColumnName("RECE");
            entity.Property(e => e.Recev)
                .HasColumnType("money")
                .HasColumnName("RECEV");
        });

        modelBuilder.Entity<Vwsummery3>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwsummery3");

            entity.Property(e => e.Issue)
                .HasColumnType("money")
                .HasColumnName("ISSUE");
            entity.Property(e => e.Issuev)
                .HasColumnType("money")
                .HasColumnName("ISSUEV");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Opening)
                .HasColumnType("money")
                .HasColumnName("OPENING");
            entity.Property(e => e.Opvalue)
                .HasColumnType("money")
                .HasColumnName("OPValue");
            entity.Property(e => e.Rece)
                .HasColumnType("money")
                .HasColumnName("RECE");
            entity.Property(e => e.Recev)
                .HasColumnType("money")
                .HasColumnName("RECEV");
        });

        modelBuilder.Entity<VwtestGrn>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwtest_grn");

            entity.Property(e => e.BpCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("BP_Code");
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.CreationDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("creationDate");
            entity.Property(e => e.DcDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("DC Date");
            entity.Property(e => e.Dcno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dcno");
            entity.Property(e => e.GrnDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("GRN_DATE");
            entity.Property(e => e.GrnVoucherKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GRN_Voucher_Key");
            entity.Property(e => e.Grndate1).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRNNO");
            entity.Property(e => e.GrossWeight).HasColumnName("Gross_Weight");
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Group_Code");
            entity.Property(e => e.IgpDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("IGP Date");
            entity.Property(e => e.Igpno)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("igpno");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("ITEM_Code");
            entity.Property(e => e.Keys)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.NetWeight).HasColumnName("Net_Weight");
            entity.Property(e => e.PoDate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PO Date");
            entity.Property(e => e.Pono)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("pono");
            entity.Property(e => e.PurchaseQty).HasColumnName("Purchase_Qty");
            entity.Property(e => e.Rate).HasColumnName("rate");
            entity.Property(e => e.RemainingQty).HasColumnName("Remaining_Qty");
            entity.Property(e => e.RemainingRate).HasColumnName("Remaining_Rate");
            entity.Property(e => e.RemainingValue).HasColumnName("Remaining_Value");
            entity.Property(e => e.SalesTax).HasColumnName("Sales_Tax");
            entity.Property(e => e.Sno).HasColumnName("sno");
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentCode).HasColumnName("Sub Segment Code");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.TareWeight).HasColumnName("Tare_Weight");
            entity.Property(e => e.TotalValue).HasColumnName("Total_Value");
            entity.Property(e => e.TrCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("tr_creationDate");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TYPE");
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("uom");
            entity.Property(e => e.Value).HasColumnName("VALUE");
            entity.Property(e => e.WarehouseNo).HasColumnName("warehouse_no");
            entity.Property(e => e.Year)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Vwtran>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwtrans");

            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("cc_desc");
            entity.Property(e => e.Grndate).HasColumnName("grndate");
            entity.Property(e => e.Grnno).HasColumnName("grnno");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("it_desc");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("it_partno");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("it_unit");
            entity.Property(e => e.Qty)
                .HasColumnType("money")
                .HasColumnName("qty");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("tr_itemno");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("type");
        });

        modelBuilder.Entity<VwvDetailVMainRecord>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwvDetail_vMain_Record");

            entity.Property(e => e.AgentCode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.CheqNo).HasMaxLength(100);
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.CountNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.Expr2).HasMaxLength(50);
            entity.Property(e => e.GlCode)
                .HasMaxLength(50)
                .HasColumnName("gl_code");
            entity.Property(e => e.GlDesc).HasColumnName("gl_desc");
            entity.Property(e => e.GlYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("gl_Year");
            entity.Property(e => e.InvNo)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Narration)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Pic).HasColumnName("pic");
            entity.Property(e => e.SNo).HasColumnName("sNo");
            entity.Property(e => e.SubSegmentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SubSegment_name");
            entity.Property(e => e.SubSegmentPic).IsUnicode(false);
            entity.Property(e => e.Unit1)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Unit2)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.VCancel).HasColumnName("vCancel");
            entity.Property(e => e.VCheqDate).HasColumnName("vCheqDate");
            entity.Property(e => e.VCheqNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("vCheqNo");
            entity.Property(e => e.VConfirmedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vConfirmedBy");
            entity.Property(e => e.VContractDate).HasColumnName("vContractDate");
            entity.Property(e => e.VDate).HasColumnName("vDate");
            entity.Property(e => e.VEnterDate).HasColumnName("vEnterDate");
            entity.Property(e => e.VExcRate)
                .HasColumnType("money")
                .HasColumnName("vExcRate");
            entity.Property(e => e.VGlyear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("v_Glyear");
            entity.Property(e => e.VInvDate).HasColumnName("vInvDate");
            entity.Property(e => e.VInvNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vInvNo");
            entity.Property(e => e.VKey)
                .HasMaxLength(50)
                .HasColumnName("vKey");
            entity.Property(e => e.VNo).HasColumnName("vNo");
            entity.Property(e => e.VPort)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("vPort");
            entity.Property(e => e.VPost).HasColumnName("vPost");
            entity.Property(e => e.VSuperwisedBy)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("vSuperwisedBy");
            entity.Property(e => e.VType)
                .HasMaxLength(10)
                .HasColumnName("vType");
            entity.Property(e => e.VType1)
                .HasMaxLength(10)
                .HasColumnName("v_Type");
            entity.Property(e => e.VUserId).HasColumnName("vUserID");
            entity.Property(e => e.VUsername)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vUsername");
            entity.Property(e => e.VWorkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("vWorkStation");
            entity.Property(e => e.Vremarks)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("vremarks");
        });

        modelBuilder.Entity<Warehouse>(entity =>
        {
            entity.HasKey(e => new { e.Whno, e.CompId });

            entity.ToTable("Warehouse");

            entity.Property(e => e.Whno).HasColumnName("whno");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Whaddress)
                .IsUnicode(false)
                .HasColumnName("whaddress");
            entity.Property(e => e.Whincharge)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whincharge");
            entity.Property(e => e.Whinchargecontactno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("whinchargecontactno");
            entity.Property(e => e.Whlocation)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("whlocation");
            entity.Property(e => e.Whname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("whname");
            entity.Property(e => e.Whstotagecapacity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("whstotagecapacity");
        });

        modelBuilder.Entity<WarehouseReceiptNew>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("WarehouseReceiptNew");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");

            entity.HasOne(d => d.Muser).WithMany(p => p.WarehouseReceiptNewMusers)
                .HasForeignKey(d => d.MuserId)
                .HasConstraintName("FK_WarehouseReceiptNew_Users1");

            entity.HasOne(d => d.Suser).WithMany(p => p.WarehouseReceiptNewSusers)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_WarehouseReceiptNew_Users");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.WarehouseReceiptNews)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_WarehouseReceiptNew_SubSegment");
        });

        modelBuilder.Entity<WarehouseReceiptNewDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WarehouseReceiptNewDetail");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RequisitionSubSegmentId).HasColumnName("RequisitionSubSegmentID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_WarehouseReceiptNewDetail_ITEM_Master");

            entity.HasOne(d => d.WarehouseReceiptNew).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WarehouseReceiptNewDetail_WarehouseReceiptNew");
        });

        modelBuilder.Entity<WarehouseSubSegment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Warehouse_SubSegment");

            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Listindex).HasColumnName("listindex");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");
            entity.Property(e => e.Whno).HasColumnName("whno");

            entity.HasOne(d => d.Warehouse).WithMany()
                .HasForeignKey(d => new { d.Whno, d.CompId })
                .HasConstraintName("FK_Warehouse_SubSegment_Warehouse");
        });

        modelBuilder.Entity<WarehouseTransferNew>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId, e.FinancialYear });

            entity.ToTable("WarehouseTransferNew");

            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ApprovedUserId).HasColumnName("ApprovedUserID");
            entity.Property(e => e.DepartmentId)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DriverName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DriverPhoneNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Keys)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.McreationDate)
                .HasColumnType("datetime")
                .HasColumnName("MCreationDate");
            entity.Property(e => e.MuserId).HasColumnName("MUserID");
            entity.Property(e => e.MuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MUserName");
            entity.Property(e => e.MworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MWorkStation");
            entity.Property(e => e.ScreationDate)
                .HasColumnType("datetime")
                .HasColumnName("SCreationDate");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegmentID");
            entity.Property(e => e.SuserId).HasColumnName("SUserID");
            entity.Property(e => e.SuserName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SUserName");
            entity.Property(e => e.SworkStation)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SWorkStation");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFrom)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseTo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");

            entity.HasOne(d => d.Muser).WithMany(p => p.WarehouseTransferNewMusers)
                .HasForeignKey(d => d.MuserId)
                .HasConstraintName("FK_WarehouseTransferNew_Users1");

            entity.HasOne(d => d.Suser).WithMany(p => p.WarehouseTransferNewSusers)
                .HasForeignKey(d => d.SuserId)
                .HasConstraintName("FK_WarehouseTransferNew_Users");

            entity.HasOne(d => d.SubSegment).WithMany(p => p.WarehouseTransferNews)
                .HasForeignKey(d => new { d.SubSegmentId, d.CompId })
                .HasConstraintName("FK_WarehouseTransferNew_SubSegment");
        });

        modelBuilder.Entity<WarehouseTransferNewDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WarehouseTransferNewDetail");

            entity.Property(e => e.BatchNo)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("CompID");
            entity.Property(e => e.FinancialYear)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemCode)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemSerialNo)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Remarks)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionDetailSno).HasColumnName("RequisitionDetailSNo");
            entity.Property(e => e.RequisitionKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RequisitionNo)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RequisitionSubSegmentId).HasColumnName("RequisitionSubSegmentID");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Uom)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UOM");
            entity.Property(e => e.WarehouseFromSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseFromSubSegmentID");
            entity.Property(e => e.WarehouseToSubSegmentId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WarehouseToSubSegmentID");
            entity.Property(e => e.WhnoFrom).HasColumnName("WHNoFrom");
            entity.Property(e => e.WhnoTo).HasColumnName("WHNoTo");
            entity.Property(e => e.WhtransferKey)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WHTransferKey");

            entity.HasOne(d => d.ItemMaster).WithMany()
                .HasForeignKey(d => new { d.ItemCode, d.GroupCode, d.CompId })
                .HasConstraintName("FK_WarehouseTransferNewDetail_ITEM_Master");

            entity.HasOne(d => d.WarehouseTransferNew).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId, d.FinancialYear })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WarehouseTransferNewDetail_WarehouseTransferNew");
        });

        modelBuilder.Entity<WorkingScheduleMain>(entity =>
        {
            entity.HasKey(e => new { e.Srno, e.CompId });

            entity.ToTable("WorkingSchedule_Main");

            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
        });

        modelBuilder.Entity<WorkingScheduleOvertiming>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WorkingSchedule_Overtiming");

            entity.Property(e => e.AtDesignation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtEmployee)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtScale)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Days)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Per)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RulesLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");

            entity.HasOne(d => d.WorkingScheduleMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WorkingSchedule_Overtiming_WorkingSchedule_Main");
        });

        modelBuilder.Entity<WorkingScheduleWorkingHour>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WorkingSchedule_WorkingHour");

            entity.Property(e => e.AtDesignation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtEmployee)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtScale)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Days)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RulesLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");

            entity.HasOne(d => d.WorkingScheduleMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WorkingSchedule_WorkingHour_WorkingSchedule_Main");
        });

        modelBuilder.Entity<WorkingScheduleWorkingTiming>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WorkingSchedule_WorkingTiming");

            entity.Property(e => e.AtDesignation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtEmployee)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AtScale)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CompId).HasColumnName("comp_Id");
            entity.Property(e => e.Days)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EndTiming).HasColumnType("datetime");
            entity.Property(e => e.RulesLevel)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Srno)
                .HasMaxLength(9)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StartTiming).HasColumnType("datetime");
            entity.Property(e => e.SubSegmentId).HasColumnName("SubSegment_ID");

            entity.HasOne(d => d.WorkingScheduleMain).WithMany()
                .HasForeignKey(d => new { d.Srno, d.CompId })
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_WorkingSchedule_WorkingTiming_WorkingSchedule_Main");
        });

        modelBuilder.Entity<Workorder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("WORKORDER");

            entity.Property(e => e.OpDate)
                .HasColumnType("datetime")
                .HasColumnName("opDate");
            entity.Property(e => e.SUser)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sUser");
            entity.Property(e => e.WoCode)
                .HasMaxLength(7)
                .IsFixedLength()
                .HasColumnName("WO_CODE");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("WO_DESC");
            entity.Property(e => e.WoEdate)
                .HasColumnType("datetime")
                .HasColumnName("WO_EDATE");
            entity.Property(e => e.WoNotes)
                .HasMaxLength(300)
                .HasColumnName("WO_NOTES");
            entity.Property(e => e.WoSdate)
                .HasColumnType("datetime")
                .HasColumnName("WO_SDATE");
        });

        modelBuilder.Entity<Zerob>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("zerob");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .IsFixedLength()
                .HasColumnName("GRNNO");
            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("it_avgval");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("it_cgl");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasColumnType("ntext")
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval)
                .HasColumnType("money")
                .HasColumnName("it_opagval");
            entity.Property(e => e.ItOpbal)
                .HasColumnType("money")
                .HasColumnName("it_opbal");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("it_pgl");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(20)
                .HasColumnName("keyfield");
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MPono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .IsFixedLength()
                .HasColumnName("PARTY");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("PRTY_NAME");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrCartrage)
                .HasColumnType("money")
                .HasColumnName("tr_cartrage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("tr_fr");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("tr_other");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_Qty");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("WO_DESC");
        });

        modelBuilder.Entity<Zerobal>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("zerobal");

            entity.Property(e => e.Abbr)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("abbr");
            entity.Property(e => e.Billno)
                .HasMaxLength(15)
                .HasColumnName("BILLNO");
            entity.Property(e => e.CcBudget)
                .HasColumnType("money")
                .HasColumnName("CC_BUDGET");
            entity.Property(e => e.CcDesc)
                .HasMaxLength(50)
                .HasColumnName("CC_DESC");
            entity.Property(e => e.CompId).HasColumnName("comp_id");
            entity.Property(e => e.Gpdate).HasColumnName("GPDATE");
            entity.Property(e => e.Gpno)
                .HasMaxLength(15)
                .HasColumnName("GPNO");
            entity.Property(e => e.Grndate).HasColumnName("GRNDATE");
            entity.Property(e => e.Grnno)
                .HasMaxLength(5)
                .HasColumnName("GRNNO");
            entity.Property(e => e.ItAvgval)
                .HasColumnType("money")
                .HasColumnName("it_avgval");
            entity.Property(e => e.ItCbal)
                .HasColumnType("money")
                .HasColumnName("it_cbal");
            entity.Property(e => e.ItCgl)
                .HasMaxLength(50)
                .HasColumnName("it_cgl");
            entity.Property(e => e.ItCode)
                .HasMaxLength(50)
                .HasColumnName("IT_CODE");
            entity.Property(e => e.ItDesc)
                .HasMaxLength(250)
                .HasColumnName("IT_DESC");
            entity.Property(e => e.ItImp).HasColumnName("IT_IMP");
            entity.Property(e => e.ItLoc)
                .HasMaxLength(15)
                .HasColumnName("IT_LOC");
            entity.Property(e => e.ItNotes)
                .HasColumnType("ntext")
                .HasColumnName("it_notes");
            entity.Property(e => e.ItOpagval)
                .HasColumnType("money")
                .HasColumnName("it_opagval");
            entity.Property(e => e.ItOpbal)
                .HasColumnType("money")
                .HasColumnName("it_opbal");
            entity.Property(e => e.ItPartno)
                .HasMaxLength(15)
                .HasColumnName("IT_PARTNO");
            entity.Property(e => e.ItPgl)
                .HasMaxLength(50)
                .HasColumnName("it_pgl");
            entity.Property(e => e.ItRoqty)
                .HasColumnType("money")
                .HasColumnName("it_roqty");
            entity.Property(e => e.ItUnit)
                .HasMaxLength(10)
                .HasColumnName("IT_UNIT");
            entity.Property(e => e.Keyfield)
                .HasMaxLength(20)
                .HasColumnName("keyfield");
            entity.Property(e => e.Lot)
                .HasMaxLength(10)
                .HasColumnName("LOT");
            entity.Property(e => e.MPono)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("m_pono");
            entity.Property(e => e.MchDesc)
                .HasMaxLength(50)
                .HasColumnName("MCH_DESC");
            entity.Property(e => e.Party)
                .HasMaxLength(31)
                .HasColumnName("PARTY");
            entity.Property(e => e.PrtyName)
                .HasMaxLength(50)
                .HasColumnName("PRTY_NAME");
            entity.Property(e => e.Ref)
                .HasMaxLength(50)
                .HasColumnName("REF");
            entity.Property(e => e.TrAccept)
                .HasColumnType("money")
                .HasColumnName("tr_accept");
            entity.Property(e => e.TrCartrage)
                .HasColumnType("money")
                .HasColumnName("tr_cartrage");
            entity.Property(e => e.TrCc)
                .HasMaxLength(5)
                .HasColumnName("TR_CC");
            entity.Property(e => e.TrConstyp)
                .HasMaxLength(1)
                .HasColumnName("TR_CONSTYP");
            entity.Property(e => e.TrEntr).HasColumnName("tr_entr");
            entity.Property(e => e.TrFoc)
                .HasMaxLength(1)
                .HasColumnName("TR_FOC");
            entity.Property(e => e.TrFr)
                .HasColumnType("money")
                .HasColumnName("tr_fr");
            entity.Property(e => e.TrItemno)
                .HasMaxLength(50)
                .HasColumnName("TR_ITEMNO");
            entity.Property(e => e.TrMch)
                .HasMaxLength(5)
                .HasColumnName("TR_MCH");
            entity.Property(e => e.TrOctory)
                .HasColumnType("money")
                .HasColumnName("tr_octory");
            entity.Property(e => e.TrOther)
                .HasColumnType("money")
                .HasColumnName("tr_other");
            entity.Property(e => e.TrPacking)
                .HasColumnType("money")
                .HasColumnName("tr_packing");
            entity.Property(e => e.TrPo)
                .HasMaxLength(5)
                .HasColumnName("TR_PO");
            entity.Property(e => e.TrQty)
                .HasColumnType("money")
                .HasColumnName("tr_Qty");
            entity.Property(e => e.TrStax)
                .HasColumnType("money")
                .HasColumnName("tr_stax");
            entity.Property(e => e.TrValue)
                .HasColumnType("money")
                .HasColumnName("tr_value");
            entity.Property(e => e.TrWo)
                .HasMaxLength(7)
                .HasColumnName("TR_WO");
            entity.Property(e => e.TrZilatax)
                .HasColumnType("money")
                .HasColumnName("tr_zilatax");
            entity.Property(e => e.Type)
                .HasMaxLength(1)
                .HasColumnName("TYPE");
            entity.Property(e => e.WoDesc)
                .HasMaxLength(50)
                .HasColumnName("WO_DESC");
        });

        modelBuilder.Entity<ZktimeAttendence>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ZktimeAttendence");

            entity.Property(e => e.AttDate)
                .HasColumnType("datetime")
                .HasColumnName("att_date");
            entity.Property(e => e.BreakMinutes).HasColumnName("breakMinutes");
            entity.Property(e => e.Checkin)
                .HasColumnType("datetime")
                .HasColumnName("checkin");
            entity.Property(e => e.Checkout)
                .HasColumnType("datetime")
                .HasColumnName("checkout");
            entity.Property(e => e.EmployeeId).HasColumnName("employee_id");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Remark)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("remark");
            entity.Property(e => e.Roundin)
                .HasColumnType("datetime")
                .HasColumnName("roundin");
            entity.Property(e => e.Roundout)
                .HasColumnType("datetime")
                .HasColumnName("roundout");
            entity.Property(e => e.RworkedMinutes).HasColumnName("rworkedMinutes");
            entity.Property(e => e.Timetable).HasColumnName("timetable");
            entity.Property(e => e.Wc).HasColumnName("wc");
            entity.Property(e => e.WorkedMinutes).HasColumnName("workedMinutes");
        });

        modelBuilder.Entity<Realtor>(entity =>
        {
            entity.HasKey(e => e.SerialNo);

            entity.ToTable("Realtor");

            entity.Property(e => e.AgentId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("AgentID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Cnic)
                .HasMaxLength(15)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CNIC");
            entity.Property(e => e.Cnicimage)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("CNICImage");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OfficeAddress)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.OfficeImage)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RealtorName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Registerdate).HasColumnName("registerdate");
        });


        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
